/// 
/// file Macros_StabFem.edp
///
/// This file contains the case-dependent Macros for boundary conditions and postprocessing output.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
/// boundary conditions : 
/// macro BoundaryconditionsBaseFlow(du,u,v) 
/// macro BoundaryconditionsStability(u,v,symmetry)
///
///
/// For post-processsing purposes :
/// macro SFWriteBaseFlow(filename,u,type,iter)
/// macro SFWriteMode(namefile,u,ev,shift,type,iter)
/// 
/// The following case is for the AXISYMMETRIC DISK and includes the additional macros
/// required to compute lift and drag forces : Trainee(u,symmetry) and Portance(u,symmetry)


IFMACRO(!SOLVER)
macro SOLVER MUMPS// POSSIBLE OPTIONS : DEFAULT, MUMPS, UMPFACK (to be avoided), SLEPC (not yet implemented)
ENDIFMACRO

IFMACRO(SOLVER,MUMPS)
load "MUMPS_seq" 
cout << " USING MUMPS_seq" << endl;
ENDIFMACRO
// END DEFINITION OF SOLVER

IFMACRO(!FREEFEMPLOTS)
macro FREEFEMPLOTS  YES//EOM
ENDIFMACRO 
// Set to YES to generate plots through the native FreeFem plotter ffglut (recommended in terminal /debug mode)
// set to NO to disable all plots (recommended in Matlab/StabFem mode)


IFMACRO(!problemtype)
macro problemtype "AxiXR"//EOM
ENDIFMACRO

IFMACRO(!ncomponentsBF)
macro ncomponentsBF 2//EOM  // THIS PARAMETERS SHOULD BE 2 if BASE FLOW is (U,V,P) and 3 if it is (U,V,W,P) (case with rotation)
ENDIFMACRO



//IFMACRO(!freefemsolverUMFPACK64)
//macro freefemsolverUMFPACK64 0 //EOM
//ENDIFMACRO 

//IFMACRO(freefemsolverUMFPACK64,1)
//include "UMFPACK64"
//cout << " USING UMFPACK64" << endl;
//ENDIFMACRO

// To select the solver ; available are "default", "UMFPACK64", "MUMPS_seq", and "PETSC"




//string ffdatadir = "./WORK/";
string ffdatadir = "./DATA_SF_BIRDCALL_ERCOFTAC/";

int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6,bcslipwall =5;


/// THIS IS FOR THE POROUS DISK CASE; SET TO ZERO IN CASE NOT NEEDED
macro IsInObject(x,y) 0 //EOM


macro Uinlet(y) SFGeomRhole1^2/SFGeomRinlet^2 //


macro BoundaryconditionsBaseFlow(du,up,v)
	           on(1,du#x=Uinlet(y)-up#x,du#r=0.0)
             + on(2,21,22,23,du#x=0.0,du#r=0.0)
             IFMACRO(ncomponentsBF,3) +on(2,21,22,23,du#phi=OMEGAx-up#phi) ENDIFMACRO /* for rotating body */
             + int1d(th,5,6)(du#r*v#r*1e30) 
             + int1d(th,7)(du#r*v#r*1e30)       
//EOM


macro BoundaryconditionsStability(u,v,m)
	           on(1,u#r=0.0,u#phi=0.0) /* Warning no condition on u#x here ! */ 
	          + on(5,u#r=0.0) 
             + on(2,21,22,23,u#x=0.0,u#r=0.0,u#phi=0.0) 
             IFMACRO(ncomponentsBF,3)+ on(2,21,22,23,u#phi=0.0) ENDIFMACRO
             + int1d(th,bcaxis)(u#x*v#x*1e30*(abs(m)>0)
                               +(u#r*v#r+u#phi*v#phi)*1e30*(abs(m)!=1))       
//EOM





// HERE ARE SOME MACROS WHICH ARE USEFUL FOR POST-PROCESSING WITH AN AXI FLOW OVER A BLUFF BODY

macro Trainee(u)   
	(
	int1d(th,2,21,22,23)(u#p*N.x*2*pi*y)
	-nu*int1d(th,2,21,22,23)( (2*dx(u#x)*N.x+(dx(u#r)+dy(u#x))*N.y)*2*pi*y)
	)
//EOM
	
macro CoupleX(u)   
	(
	-nu*int1d(th,2,21,22,23)( 
	(dx(u#phi)*N.x+(-u#phi/y+dy(u#phi))*N.y)*y*2*pi*y)
	)	
//EOM

macro Portance(im,u)   
	(
	int1d(th,2,21,22,23)(u#p*N.y*y)
	-nu*int1d(th,2,21,22,23)( (2*dy(u#r)*N.y+(dx(u#r)+dy(u#x))*N.x)*2*pi*y)
	+im*nu*int1d(th,2,21,22,23)( ( (dy(u#phi)-u#phi/y)*N.y + (dx(u#phi))*N.x ) *pi*y)
	)
//EOM

macro FlowRate1(u)
    (
	int1d(th,91)(-(u#x*N.x+u#r*N.y)*2*pi*y)
	)
//EOM 

macro FlowRate2(u)
    (
	int1d(th,92)((u#x*N.x+u#r*N.y)*2*pi*y)
	)
//EOM 


macro SFWriteMesh(filename,TH)
{
     ofstream fileFF(filename);
     fileFF << "### MESH generated by Freefem++ ; " << endl;
     fileFF << "AxiXMesh" << endl;
     fileFF << "Format :" << endl;
	 fileFF << "int np int Ndof real deltamin real deltamax" ;
	 string PostProcessMeshDescription = " " ; /*description of customizable part*/
	 fileFF << PostProcessMeshDescription << endl << endl ;
     fespace femp1N(TH,P1);
     fespace femp2xfemp2xfemp1N(TH,[P2,P2,P1]);	  
     femp2xfemp2xfemp1N [uNx,uNy,uNp];
	 fileFF << TH.nv <<  endl << uNx[].n << endl ;
 	 cout << "#### Mesh information :" << endl;  
     cout << "## Number of vertices    " << TH.nv <<  endl;
	 cout << "## Number of DOF : " << uNx[].n << endl << endl;  
 	 femp1N delta = hTriangle;
	cout << "## delta min : " << delta[].min << endl;
	cout << "## delta max : " << delta[].max << endl;
	fileFF << delta[].min << endl;
	fileFF << delta[].max << endl;   
    /*Next is customizable part ; here determination of the grid size at several points */ 
}; 	 
//EOM



macro SFWriteBaseFlow(filename,u,typeFlow,iter)
	if(iter>=0)
	{
	fespace p1forff2m(th,P1);  
	p1forff2m xx,yy;
	xx=x;
	yy=y;
    p1forff2m ut,vt,pt,vort;
	ut=u#x;
	vt=u#r;
	IFMACRO(ncomponentsBF,3) 
		p1forff2m wt ; 
		wt = u#phi; 
	ENDIFMACRO
	pt=u#p;
	vort=dy(u#x)-dx(u#r); /* vorticity */
	p1forff2m psi,phi;
/*	solve Laplace(psi,phi, solver = CG) */
/* 	= int2d(th)(dx(psi)*dx(phi)+dy(psi)*dy(phi)) */
/* 	- int2d(th)(-vort*phi) */
/* 	- int1d(th,bcinlet,bcoutflow,bclat,bcwall)((-N.x*ux+N.y*uy)*phi); */   
	ofstream file(filename);
   	{
	file << "### Data generated by Freefem++ ; " << endl;
    file << typeFlow << endl;
    file << "Format : " << endl;	
    IFMACRO(ncomponentsBF,2) file << "real Re P1 ux P1 ur P1 p P1 vort P1 psi real iter " ; ENDIFMACRO
    IFMACRO(ncomponentsBF,3) file << "real Re P1 ux P1 ur P1 uphi P1 p P1 vort P1 psi real iter " ; ENDIFMACRO
	string PostProcessBaseFlowDescription = " real Pup real Pcav real Pout real Q1 real Q2"; /* customizable output */ 
	file << PostProcessBaseFlowDescription << endl << endl ; 
	file << Re << endl;	
			for (int j=0;j<ut[].n ; j++) file << ut[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vt[][j] << endl;
			IFMACRO(ncomponentsBF,3) for (int j=0;j<ut[].n ; j++) file << wt[][j] << endl; ENDIFMACRO
			for (int j=0;j<ut[].n ; j++) file << pt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vort[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << psi[][j] << endl;
			file << iter << endl << endl;
	cout << "#### customisable output for BIRDCALL : " << endl; 
    file << u#p(SFGeomXinlet,SFGeomRinlet) << endl << u#p(0,SFGeomRcav) << endl << u#p(-SFGeomXinlet,SFGeomRinlet) << endl; 
    file << FlowRate1(u) << endl << FlowRate2(u) << endl;
 	}
	}
	else
	{
	ofstream file(filename);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow NOT CONVERGED" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	};
//EOM
	
	
	
macro SFWriteMode(namefile,u,ev,shift,m,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;
		 yy=y;
    	 p1forff2m<complex> ux1,uy1,pp1,vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << typeFlow << endl;
    	 file << "Format :" << endl;
    	 string descriptionFF;
    	 if(typeFlow=="EigenModeD"||typeFlow=="HarmonicMode")
    	 	{  descriptionFF="real Re int m complex lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 real AEnergy complex Cy"; }
    	 else 
    	    {  descriptionFF="real Re int m complex lambda complex shift int iter P1c ux1Adj P1c uy1Adj P1c p1Adj P1c vort1Adj real AEnergyAdj complex CyAdj"; }
	     file << descriptionFF << endl << endl ; 
		 file << Re  << endl << m << endl << real(ev) << " " << imag(ev) << " " << real(shift) << " " << imag(shift) << " " << iter << endl << endl;
 		ux1=u#x;
		uy1=u#r;
		pp1=u#p;
		vort1=dy(u#x)-dx(u#r);
		
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		
		cout << "#### customisable output for MODE OF A WHISTLING JET : " << endl; 

	
		real AEnergyMode = sqrt(int2d(th)((abs(ux1)^2+abs(uy1)^2))*y*2*pi); 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;

		complex CyMode = 8/pi*Portance(1i*m,u); 
		cout << "#   Cy = " << CyMode << endl;
		file << 2*real(CyMode) << " " << 2*imag(CyMode) << endl;
		
		};
//EOM	




//macro PostProcessBaseFlowOutput(file,u1,u2,p)
	
