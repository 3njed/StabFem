//
//	Time-stepper for axisymmetric Navier-Stokes equations 
//
// Program recovered from B. Fry's version Init_Axi_BirdCall.edp (which originates from older version by DF)
//
//
// NB this program will require as well a base-flow to extract perturbations
//
// NBB field for time-stepper is solved as [u1,u2,p]; while base flow as [u2,u1,p] !!!

		verbosity = 0.;

		mesh th;
		
	
//	        include "SOURCES/Params_BirdCall.edp"        
//		th=readmesh("CASE_"+CASE+"/mesh_BirdCall.msh");	        
	th=readmesh("mesh.msh");

		real Uhole =1; // mean velocity across the hole
		real Uinlet = Uhole*     int1d(th,91)(y)/int1d(th,11)(y);
//		cout << Uinlet;
//		real omega = 5.39;
//		real epsilon = 0.05;

//		plot(th,wait=1);

		fespace femp2(th,P2);
		fespace femp1(th,P1);
		fespace femp0(th,P0);
		fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
		
		real Re,omega,epsilon,dt;
		int rep,itmax;
		cout << "###" << endl <<  "### TIME STEPPER for the pulsed flow through a birdcall" << endl << "###" << endl << endl;
		cout << "Enter Re : "<< endl;
		cin >> Re;
		cout << "Enter omega : "<< endl;
		cin >> omega;		
		cout << "Enter epsilon : "<< endl;
		cin >> epsilon;				
		cout << "Enter initial instant : (0 means start from base flow) "<< endl;
		cin >> rep;	
		cout << "Enter itmax"<< endl;
		cin >> itmax;	
//		cout << "Enter dt"<< endl;
//		cin >> dt;	

		int iout = 1000; // to generate output files each iout time steps
		dt = 0.001;

		cout << endl << "Starting computation with : "<< endl;
		cout << "       Re = " << Re << endl;
		cout << "       omega = " << omega << endl;
		cout << "       epsilon = " << epsilon << endl;
		cout << "       dt = " << dt << endl;


 

		real nu=1./Re;

	

		
        femp1 xx = x;
		real xmin = xx[].min;
		real xmax = xx[].max;
  
		femp2 up1,up2;
		femp2 upp1,upp2;

		real a0,a1,a2,bet0,bet1;
		
		real tps;
		int i0;

/*
	varf  NS ([u1,u2,p],[v1,v2,q])=
    		 int2d(th)(
        	    	 a0*(y^2*u1*v1+y^2*u2*v2)/dt
            		+ nu*(y^2*dx(u1)*dx(v1)+y^2*dy(u1)*dy(v1)+y*dy(u1)*v1
            		+ y^2*dx(u2)*dx(v2)+y^2*dy(u2)*dy(v2)+u2*v2+y*dy(u2)*v2)
			- p*(y^2*dx(v1)+2*y*v2+y^2*dy(v2))
            		+ q*(y*dx(u1)+u2+y*dy(u2)))
  		 + on(11,u1=Uinlet*(1+epsilon*sin(tps*omega)),u2=0.)
  		 + on(2,21,u1=0.,u2=0.)
	 	 + on(6,7, u2=0.);

		varf CONVECT ([u1,u2,p],[v1,v2,q])=
		-int2d(th) (a1*y^2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up1)*v1/dt
			   +a2*y^2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp1)*v1/dt)
		-int2d(th) (a1*y^2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up2)*v2/dt
			   +a2*y^2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp2)*v2/dt)
  		 + on(11,u1=Uinlet*(1+epsilon*sin(tps*omega)),u2=0.)
  		 + on(2,21,u1=0.,u2=0.)	
		 + on(6,7,u2=0.);
*/

		varf  NS ([u1,u2,p],[v1,v2,q])=
    		 int2d(th)(
        	    	 a0*(y*u1*v1+y*u2*v2)/dt
            		+ nu*(y*dx(u1)*dx(v1)+y*dy(u1)*dy(v1)
            		+ y*dx(u2)*dx(v2)+y*dy(u2)*dy(v2)+u2*v2/y)
			- p*(y*dx(v1)+v2+y*dy(v2))
            		+ q*(y*dx(u1)+u2+y*dy(u2)))
  		 + on(11,u1=Uinlet*(1+epsilon*sin(tps*omega)),u2=0.)
  		 + on(2,21,u1=0.,u2=0.)
	 	 + on(6,7, u2=0.);

		varf CONVECT ([u1,u2,p],[v1,v2,q])=
		-int2d(th) (a1*y*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up1)*v1/dt
			   +a2*y*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp1)*v1/dt)
		-int2d(th) (a1*y*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up2)*v2/dt
			   +a2*y*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp2)*v2/dt)
  		 + on(11,u1=Uinlet*(1+epsilon*sin(tps*omega)),u2=0.)
  		 + on(2,21,u1=0.,u2=0.)	
		 + on(6,7,u2=0.);

		femp2xfemp2xfemp1 [u1,u2,p];
		femp2xfemp2xfemp1 [urp,uzp,pp];
		femp2xfemp2xfemp1 [rhs1,rhs2,rhs3];
		
			
			// base flow
	     ifstream file("chbase.txt"); 
		 file >> urp[];
		 
		 // starting point for time-integration
		if(rep==0)
		{	
		 [u1,u2,p] = [uzp,urp,pp];
		 i0=0;
		 tps=0;
		 system("rm DNS_timeStatistics_Re_"+Re+"_omega"+omega+"_+epsilon"+epsilon+".txt");		 
		 }                
		else
		{
		 real Rein;
		 ifstream file("flow"+rep+".txt");
		 file >> u1[];
		 file >> Rein;
		 file >> i0;
		 file >> tps;
		};
{        
		 real Q0 = int1d(th,11)(y*u1);
	     real Q1 = int1d(th,91)(y*u1);
	     real Q2 = int1d(th,92)(y*u1);
		 cout << "flow rate of initial field :" << Q0 << " " << Q1 << " " << Q2 << endl;
		 
		 
}
	  
		 	 a0=1.5; a1=-2.; a2=0.5; bet0=2; bet1=-1; // coeffs for order 2
//		 	 a0=1; a1=-1; a2=0; bet0=1; bet1=0; // coeffs for order 1
		 	 
		 	 matrix NSMAT=NS(femp2xfemp2xfemp1,femp2xfemp2xfemp1,solver=UMFPACK);

		
	up1 =u1; up2=u2;			
	int i;
		for (i=i0+1; i<=itmax; i++)
 		{
			upp1=up1;
			upp2=up2;
   			up1=u1;
  			up2=u2;

			rhs1[]=CONVECT(0,femp2xfemp2xfemp1);
			u1[]=NSMAT^-1*rhs1[];
		      	tps=tps+dt;

			cout << " i = " << i  << "\n";
			
			
			//cout << " tps = " << tps  << "\n";

			//if (!(i%30))
			//{
			//	femp1 q=(-dy(u1)+dx(u2));
			//	plot(q,value=1,wait=debug);
			//	plot(p,value=1,wait=debug);
			//	plot(u1,value=1,wait=debug);
			//	plot(u2,value=1,wait=debug);
			//};
		
		 if(!(i%iout))
             {
			 ofstream file("flow"+i+".txt");
			 file << u1[] << endl;
			 file <<  endl << Re << endl << i << endl << tps <<  endl;
			 femp2 uprime =u1-uzp;
	//		 femp2 pprime = p-pp;
			 plot(uprime,wait=0);
			};
		ofstream fileres("DNS_timeStatistics_Re_"+Re+"_omega"+omega+"_+epsilon"+epsilon+".txt",append);
		//fileres.scientific;
			
			real Rcav = 5;
			// pressure at various points
			
			real pcavA, pcavE, p0A, p0E, pOA, pOE, p15A, p15E;
			real Q0, Q1 ,Q2;
			pcavA = p(xmin,0.); //pressure upstream
			pcavE = p(xmin,Rcav);
			p0A = p(0,0.); // pressure in the central cavity
			p0E = p(0,Rcav);
			pOA = p(xmax,0.); // pressure downstream
			pOE = p(xmax,Rcav);
    		Q0 = int1d(th,11)(y*u1);
			Q1 = int1d(th,91)(y*u1);
			Q2 = int1d(th,92)(y*u1);
		
		
		// same for fluctuating quantities
		    real pcavAp, pcavEp, p0Ap, p0Ep, pOAp, pOEp, p15Ap, p15Ep;
			real Q0p, Q1p ,Q2p;
			pcavAp = p(xmin,0.)-pp(xmin,0.); //pressure upstream
			pcavEp = p(xmin,Rcav)-pp(xmin,Rcav);
			p0Ap = p(0,0.)-pp(0,0); // pressure in the central cavity
			p0Ep = p(0,Rcav)-pp(0,Rcav);
			pOAp = p(xmax,0.)-pp(xmax,0); // pressure downstream
			pOEp = p(xmax,Rcav)-pp(xmax,Rcav);
    		Q0p = int1d(th,11)(y*u1)-int1d(th,11)(y*uzp);
			Q1p = int1d(th,91)(y*u1)-int1d(th,91)(y*uzp);
			Q2p = int1d(th,92)(y*u1)-int1d(th,92)(y*uzp);
			
			

		
		
		
		cout << "Flow rate at inlet and at the two holes : " << Q0 << " ; " << Q1 << " ;  " << Q2 << endl;
		cout << "Pressure at various points : " << pcavA << " ; " << pcavE << " ; " << p0A << " ;  " << p0E << " ; " << pOA << " ;  " << pOE << endl;
		
		cout << " ENERGY FLUX BASED ON MEAN QUANTITIES : " << pcavA*Q0 << endl;
		cout << " ENERGY FLUX BASED ON FLUCTUATING QUANTITIES : " << pcavAp*Q0p << endl;
		
		fileres << tps << " " << i << " " << pcavA*Q0 << " "  << pcavAp*Q0p << " "
		<< Q0 << " " << Q1  << " " << Q2  << " " << pcavA  << " " << pcavE  << " " << p0A  << " " 
		<< p0E  << " " << pOA  << " " << pOE << " " ;
		
		fileres << Q0p << " " << Q1p  << " " << Q2p  << " " << pcavAp  << " " << pcavEp  << " " << p0Ap  << " " 
		<< p0Ep  << " " << pOAp  << " " << pOEp  << endl;
		
		
		
		
		
		 };
		 
		  {
			 ofstream file("flow"+i+".txt");
			 file << u1[] << endl;
			 file <<  endl << Re << endl << i << endl << tps <<  endl;
			 femp2 uprime =u1-uzp;
	//		 femp2 pprime = p-pp;
			 plot(uprime,wait=0);
			};

		 
		 
		 // {
		//	 ofstream file("chbase_DNS.txt");
		//	 [urp,uzp,pp]=[u2,u1,p];
		//	 file << urp[] << endl;
		//	 file <<  endl << Re << endl << i0 << endl << tps <<  endl;
		//	 plot(u1,wait=0);
		//	};
		
/*			cout << "FLOW RATE :" << int1d(th,1)(y*u1) << " ; " << int1d(th,3)(y*u1) << endl ;
			real Umean = int1d(th,1)(y*u1)/(Rhole^2/2) ;
			cout << "MEAN VELOCITY THROUGH HOLE :" << Umean << endl ;
			
			cout << "PRESSURE AT VARIOUS POINTS :" << endl;
			cout << "INSIDE INLET CHAMBER :" << pcavA << " " << pcavE << endl;
			cout << "X = 0  : " << p0A << " " << p0E << endl;
			cout << "X = 10 : " << p10A << " " << p10E << endl;
			cout << "X = 15 : " << p10A << " " << p10E << endl;
		    cout <<  endl << " >>> VENA CONTRACTA COEF. : " << endl;
		    cout << (pcavA-p10E)/(Umean^2/2) << endl;
*/		     
			
			
		
