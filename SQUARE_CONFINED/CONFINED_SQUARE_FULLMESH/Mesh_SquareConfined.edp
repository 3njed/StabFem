/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
///// 
/////                              MESH GENERATOR for a  CONFINED SQUARE
/////
/////             This file creates a mesh and an initial base flow for the "StabFem" program.
/////
/////             input parameters : Xmin Xmax Ymax
/////  			  
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

include "Macros_StabFem.edp";
//string ffdatadir = "./WORK/";

// load "iovtk"                       /// load library to write in vtk format
// load "BinaryIO"                 ////load libary to write the solution in binary form
// load "BinaryIO_64"



//real RADIUS=0.5;         /////// Cylinder Radius
 


real n=6;                 
int ns=40; 

cout << " Generation of an initial mesh for a SQUARE in a channel" << endl;
cout << " Enter the dimensions beta, xmin, xmax ? " << endl; 

//real xinlet=-20.;     
//real xoutlet=40.; 
//real yside=20.;       
real xinlet , xoutlet,yside,beta ;

cin >> beta >> xinlet >> xoutlet  ;

yside = 0.5;
real RADIUS = yside*beta;

cout << "Xmin = " << xinlet << " ; Xmax = " << xoutlet << " ; beta = " << beta << endl;  

/////////////////////////////////////////////////////////////////////////////////
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;
                         /////// label for boundary conditions  
/////////////////////////////////////////////////////////////////////////////////
// cylinder center is in (0,0)

//border cylinder(t=0,pi){ x=RADIUS*cos(t);y=RADIUS*sin(t);label=bcwall;}
border square1(t=-1,1){x=-RADIUS;y=RADIUS*t;label=21;}
border square2(t=-1,1){x=RADIUS*t;y=RADIUS;label=22;}
border square3(t=1,-1){x=RADIUS;y=RADIUS*t;label=23;}
border square4(t=1,-1){x=RADIUS*t;y=-RADIUS;label=22;}

//border cylref(t=0,2*pi){ x=(RADIUS+RR)*cos(t);y=(RADIUS+RR)*sin(t);label=999;}

border inlet(t=1,-1){ x=xinlet;y=yside*t;label=bcinlet;}
//border axis1(t=0,1){ x=xinlet+(-2*RADIUS-xinlet)*t;y=0;label=bcaxis;}
//border axis11(t=0,1){ x=-2*RADIUS+RADIUS*t;y=0;label=bcaxis;}
//border axis2(t=0,1){ x=2*RADIUS+(xoutlet-2*RADIUS)*t;y=0;label=bcaxis;}
//border axis21(t=0,1){ x=RADIUS+RADIUS*t;y=0;label=bcaxis;}
border outlet(t=-1,1){ x=xoutlet;y=yside*t;label=bcoutflow;}
border latsup(t=xoutlet,xinlet){x=t;y=yside;label=2;}
border latinf(t=xinlet,xoutlet){x=t;y=-yside;label=2;}




/////////////////////////////////////////////////////////////////////////////////
// plot(inlet(10)+latinf(10)+outlet(10)+latsup(10)+cylref(10)+cylinder(10)+a1(10)+a2(10)+a3(10)+a4(10));
                         /////// Just to check the borders
/////////////////////////////////////////////////////////////////////////////////
// Build a mesh 

plot(inlet(yside*n)+outlet(2*yside*n)
+latsup((xoutlet-xinlet)*n)+latinf((xoutlet-xinlet)*n)
+square1(ns)+square2(ns)+square3(ns)+square4(ns));


mesh th=buildmesh(inlet(yside*n)+outlet(2*yside*n)
+latsup((xoutlet-xinlet)*n)+latinf((xoutlet-xinlet)*n)
+square1(ns)+square2(ns)+square3(ns)+square4(ns));


plot(th,wait=0);

// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometrical parameters for StabFem. Problem type : " << endl;
			file << "2D" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real R real Xmin real Xmax real Rmax" << endl;
			file <<  RADIUS  << endl << xinlet << endl << xoutlet << endl << yside  << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)



// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,uy,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ux[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",0);
	     



