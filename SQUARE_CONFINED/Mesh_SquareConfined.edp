/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
///// 
/////                              MESH GENERATOR for a cylinder
/////
/////             This file creates a mesh and an initial base flow for the "StabFem" program.
/////
/////             input parameters : Xmin Xmax Ymax
/////  			  
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

include "Macros_StabFem.edp";
//string ffdatadir = "./WORK/";

// load "iovtk"                       /// load library to write in vtk format
// load "BinaryIO"                 ////load libary to write the solution in binary form
// load "BinaryIO_64"



//real RADIUS=0.5;         /////// Cylinder Radius
 


real n=10;                 
int ns=50; 

cout << " Generation of an initial mesh for a SQUARE in a channel" << endl;
cout << " Enter the dimensions beta, xmin, xmax ? " << endl; 

//real xinlet=-20.;     
//real xoutlet=40.; 
//real yside=20.;       
real xinlet , xoutlet,yside,beta ;

cin >> beta >> xinlet >> xoutlet  ;

yside = 0.5;
real RADIUS = yside*beta;

cout << "Xmin = " << xinlet << " ; Xmax = " << xoutlet << " ; beta = " << beta << endl;  

/////////////////////////////////////////////////////////////////////////////////
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;
                         /////// label for boundary conditions  
/////////////////////////////////////////////////////////////////////////////////
// cylinder center is in (0,0)

//border cylinder(t=0,pi){ x=RADIUS*cos(t);y=RADIUS*sin(t);label=bcwall;}
border square1(t=0,1){x=-RADIUS;y=RADIUS*t;label=21;}
border square2(t=-1,1){x=RADIUS*t;y=RADIUS;label=22;}
border square3(t=0,1){x=RADIUS;y=RADIUS*(1-t);label=23;}

//border cylref(t=0,2*pi){ x=(RADIUS+RR)*cos(t);y=(RADIUS+RR)*sin(t);label=999;}

border inlet(t=0,1){ x=xinlet;y=yside*(1-t);label=bcinlet;}
border axis1(t=0,1){ x=xinlet+(-2*RADIUS-xinlet)*t;y=0;label=bcaxis;}
border axis11(t=0,1){ x=-2*RADIUS+RADIUS*t;y=0;label=bcaxis;}
border axis2(t=0,1){ x=2*RADIUS+(xoutlet-2*RADIUS)*t;y=0;label=bcaxis;}
border axis21(t=0,1){ x=RADIUS+RADIUS*t;y=0;label=bcaxis;}
border outlet(t=0,1){ x=xoutlet;y=yside*t;label=bcoutflow;}
border latsup1(t=xoutlet,2*RADIUS){x=t;y=yside;label=2;}
border latsup2(t=2*RADIUS,-2*RADIUS){x=t;y=yside;label=2;}
border latsup3(t=-2*RADIUS,xinlet){x=t;y=yside;label=2;}





/////////////////////////////////////////////////////////////////////////////////
// plot(inlet(10)+latinf(10)+outlet(10)+latsup(10)+cylref(10)+cylinder(10)+a1(10)+a2(10)+a3(10)+a4(10));
                         /////// Just to check the borders
/////////////////////////////////////////////////////////////////////////////////
// Build a mesh 

plot(inlet(yside*n)+axis1((-RADIUS-xinlet)*n)+axis11(ns)+axis21(ns)+axis2((xoutlet-RADIUS)*n)+outlet(2*yside*n)
+latsup1((xoutlet-RADIUS)*n)+latsup2(ns*2*RADIUS)+latsup3((-RADIUS-xinlet)*n)
+square1(ns)+square2(ns)+square3(ns));



mesh th=buildmesh(inlet(yside*n)+axis1((-RADIUS-xinlet)*n)+axis11(ns)+axis21(ns)+axis2((xoutlet-RADIUS)*n)+outlet(2*yside*n)
+latsup1((xoutlet-RADIUS)*n)+latsup2(ns*2*RADIUS)+latsup3((-RADIUS-xinlet)*n)
+square1(ns)+square2(ns)+square3(ns));



plot(th,wait=0);

savemesh(th,ffdatadir+"mesh.msh");


        {
			// old format ; to be suppressed at next commit 
            ofstream file(ffdatadir+"mesh.mshinfo"); 
			file << "Mesh for a sphere" << endl;
			file << "PROBLEM TYPE :" << endl;
			file << "2D" << endl;
			file << "PARAMETERS : " << endl;
			file << "R  Xmin Xmax Rmax" << endl;
			file <<  RADIUS  << endl << xinlet << endl << xoutlet << endl << yside  << endl;
           
		}

    {
			// new format 
            ofstream file(ffdatadir+"mesh.ff2m"); 
			file << "Mesh generated by FreeFem++ ; problem type :" << endl;
			file << "2D" << endl;
			file << "Format : " << endl;
			file << "real R real Xmin real Xmax real Rmax" << endl;
			file <<  RADIUS  << endl << xinlet << endl << xoutlet << endl << yside  << endl;
		}


/// THEN WE COMPUTE THE GUESS FROM STOKES EQUATIONS
        
        fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [u1,u2,p]=[0,0,0];
	    ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << u1[] << endl;
	    file <<  endl << 0 << endl;
		//exec("cp "+ffdatadir+"BaseFlow_guess.txt "+ffdatadir+"BaseFlow.txt");
	
	
	femp1 u1P,u2P,pP;
	femp1 yy,xx;
	yy = y; xx= x;
	u1P=u1;
	u2P=u2;
	pP=p;


//// EXPORTATION DU CHAMP DE BASE AUX FORMAT FF2M
{
	ofstream file(ffdatadir+"BaseFlow.ff2m");
	real Rpipe = yy[].max;
	    file << "### Data generated by Freefem++ ; " << endl;
    file << "Base flow for a cylinder" << endl;
    file << "Format : " << endl;	
	file << "real Re P1 u0 P1 v0 P1 p0" << endl << endl ; 
	file << 0 << endl;	
			{
			for (int j=0;j<u1P[].n ; j++) file << u1P[][j] << endl;
			for (int j=0;j<u1P[].n ; j++) file << u2P[][j] << endl;
			for (int j=0;j<u1P[].n ; j++) file << pP[][j] << endl;
			}; 
}





