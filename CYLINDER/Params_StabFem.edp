/// 
/// file Param_StabFem.edp
///
/// This file contains the case-dependent boundary conditions and posprocessing data.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
/// boundary conditions : 
/// macro BoundaryconditionsBaseFlow(u1,u2,v1,v2,symmetry) 
/// macro BoundaryconditionsStability(u1,u2,v1,v2,symmetry)
///
///
/// For post-processsing purposes :
/// string PostProcessBaseFlowDescription 
/// macro PostProcessBaseFlowOutput(file)
/// 
/// The following case is for the 2D cylinder.



macro BoundaryconditionsBaseFlow(u1,u2,v1,v2,symmetry)
	           on(bcinlet,bclat,u1=1.0-up1,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))       
//EOM

macro BoundaryconditionsStability(u1,u2,v1,v2,symmetry)
	           on(bcinlet,bclat,u1=0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))       
//EOM



macro Trainee(u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.x)
	-nu*int1d(th,2,21,22,23)( 2*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
//EOM
	



string PostProcessBaseFlowDescription = "real Drag real Lx"; 


macro PostProcessBaseFlowOutput(file,u1,u2,p)
	cout << "#### customisable output for WAKE OF A 2D BLUFF BODY : " << endl; 
    /* Calcul de la trainee */
    real Drag = Trainee(u1,u2,p);
	cout << "#    Drag =  " << Drag << endl;
    file << Drag << " " ;
    /* mesure de la longueur de recirculation */
    real Lx;
		{
		real dx = 0.001;real Uav = -2;real Uap=-1;int ix;
			for(ix=1;ix<20000;ix++)
			{   
				Uap =u1(0.5+ix*dx,0);
				if(Uap*Uav<0){break;};
				Uav = Uap;	
			}
			real xav = 0.5+(ix-1)*dx; 
			real xap = 0.5+ix*dx;
			Lx = xav *(Uap)/(Uap-Uav) + xap *(-Uav)/(Uap-Uav);
		}	
		cout << "#    Recirculation length = " << Lx << endl << endl; 
		file << Lx << endl;
//EOM