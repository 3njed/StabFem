/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
///// 
/////                              MESH GENERATOR for a cylinder
/////
/////
/////
/////  	VERY LARGE DOMAIN : DImensions correspond to TWICE the mesh "C6" from Mantic-Lugo et al.
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

//string ffdatadir = "./WORK/";
include "Macros_StabFem.edp";

load "iovtk"                       /// load library to write in vtk format
load "BinaryIO"                 ////load libary to write the solution in binary form
// load "BinaryIO_64"
load "UMFPACK64"         /////// loading sparsesolver


real RADIUS=0.5;         /////// Cylinder Radius
 


real n=1/10.; // density far away                 
int ns=40;  // density in the near wake

real xinlet=-80.;     
real xoutlet=240.; 
real yside=80.;            //lateral distance from cylinder center

/////////////////////////////////////////////////////////////////////////////////
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;
                         /////// label for boundary conditions  
/////////////////////////////////////////////////////////////////////////////////
// cylinder center is in (0,0)

border cylinder(t=0,pi){ x=RADIUS*cos(t);y=RADIUS*sin(t);label=bcwall;}
//border cylref(t=0,2*pi){ x=(RADIUS+RR)*cos(t);y=(RADIUS+RR)*sin(t);label=999;}

border inlet(t=0,1){ x=xinlet;y=yside*(1-t);label=bcinlet;}
border axis1(t=0,1){ x=xinlet+(-RADIUS-xinlet)*t;y=0;label=bcaxis;}
border axis2(t=0,1){ x=RADIUS+(xoutlet-RADIUS)*t;y=0;label=bcaxis;}
border outlet(t=0,1){ x=xoutlet;y=yside*t;label=bcoutflow;}
border latsup(t=0,1){ x=xoutlet-(xoutlet-xinlet)*t;y=yside;label=bclat;}



/////////////////////////////////////////////////////////////////////////////////
// plot(inlet(10)+latinf(10)+outlet(10)+latsup(10)+cylref(10)+cylinder(10)+a1(10)+a2(10)+a3(10)+a4(10));
                         /////// Just to check the borders
/////////////////////////////////////////////////////////////////////////////////
// Build a mesh 

plot(inlet(yside*n)+axis1((-RADIUS-xinlet)*n)+axis2((xoutlet-RADIUS)*n)+outlet(2*yside*n)+latsup((xoutlet-xinlet)*n)+cylinder(-ns));

mesh th=buildmesh(inlet(yside*n)+axis1((-RADIUS-xinlet)*n)+axis2((xoutlet-RADIUS)*n)+outlet(2*yside*n)+latsup((xoutlet-xinlet)*n)+cylinder(-ns));


plot(th,wait=0);

savemesh(th,ffdatadir+"mesh.msh");


        {
			ofstream file(ffdatadir+"mesh.mshinfo"); 
			file << "Mesh for a sphere" << endl;
			file << "PROBLEM TYPE :" << endl;
			file << "2D" << endl;
			file << "PARAMETERS : " << endl;
			file << "R  Xmin Xmax Rmax" << endl;
			file <<  RADIUS  << endl << xinlet << endl << xoutlet << endl << yside  << endl;
		}


/// THEN WE COMPUTE THE GUESS FROM STOKES EQUATIONS
        
        fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [u1,u2,p]=[0,0,0];
	    ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << u1[] << endl;
	    file <<  endl << 0 << endl;
		//exec("cp "+ffdatadir+"BaseFlow_guess.txt "+ffdatadir+"BaseFlow.txt");
	
	
	femp1 u1P,u2P,pP;
	femp1 yy,xx;
	yy = y; xx= x;
	u1P=u1;
	u2P=u2;
	pP=p;


//// EXPORTATION DU CHAMP DE BASE AUX FORMATS TECPLOT ET MATLAB
{
	ofstream file(ffdatadir+"BaseFlow.ff2m");
	real Rpipe = yy[].max;
	    file << "### Data generated by Freefem++ ; " << endl;
    file << "Base flow for a cylinder" << endl;
    file << "Format : " << endl;	
	file << "real Re P1 u0 P1 v0 P1 p0" << endl << endl ; 
	file << 0 << endl;	
			{
			for (int j=0;j<u1P[].n ; j++) file << u1P[][j] << endl;
			for (int j=0;j<u1P[].n ; j++) file << u2P[][j] << endl;
			for (int j=0;j<u1P[].n ; j++) file << pP[][j] << endl;
			}; 
}





