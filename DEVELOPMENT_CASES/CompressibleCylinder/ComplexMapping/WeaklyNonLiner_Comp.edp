//
//  PROGRAM WeaklyNonLinear_2D.edp
//	
//	Weakly-nonlinear analysis of the 2D compressible flow
//   
// More comments in a near future!



load "MUMPS_seq"
//load "MUMPS_FreeFem"
include "SF_Geom.edp";
include "Param_Mapping.edp";
include "Macros_StabFem.edp";
load "scotch"
load "../../../SOURCES_OTHER/iovtk"



/////////////////////////////////////////////////////////////////////////////////


string normalisation;
cout << " Normalisation choice ?  [none, L, E or V] " << endl << "         ( V = Velocity at on point (S&L) ; E = Energy (Mantic-lugo), L = lift force )" << endl;
cin >> normalisation ;
cout << " --> " << normalisation << endl;

real Recheck;
cout << " Give a value of Reynolds number to generate 'guess'  fields for selfconsistent/HarmonicBalance  ? " 
		<< endl << "       (type -1 if you don't want this)" << endl;
cin >> Recheck;
cout << " --> " << Recheck << endl;

real Ma;
cout << " Give a Ma number to perform the Weakly non-linear analysis near the Rec. Validated range (0.03-0.6)" 
		<< endl;
cin >> Ma;
cout << " --> " << Ma << endl;




mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;


/////////////////////////////////////////////////////////////////////////////////


real Re, ReC, omegaC, sigmaC;
real gamma=1.4; //////////////////         GAMMA        //////////////////////////
real Pr=0.7;         //////////////////  PRANDTL NUM   //////////////////////////


/////////////////////////////////////////////////////////////////////////////////

fespace XH2(th,P2);
fespace XXxxxH(th,[P2,P2,P1,P1,P1]); // space for (ux,uy,p,T,rho)
//////////////////////////// MARCRO /////////////////////////// 
macro def(u,p,T,rho)[u#x,u#y,p,T,rho]//EOF

XXxxxH<complex> def(ub,ubp,ubT,ubrho); // base flow (start) 
XXxxxH def(Ubr,Ubrp,UbrT,Ubrrho); // For the macros
XXxxxH def(Ub,Pb,Tb,Rhob); // For the macros
XXxxxH def(Urif,Prif,Trif,Rhorif)=[1.0,0.0,1.0,1.0,1.0];

XXxxxH<complex> [u1x,u1y,u1p,u1T,u1rho];    //eigenmode (start)      
XXxxxH<complex> [u1Cx,u1Cy,u1Cp,u1CT,u1Crho];    //eigenmode (start)      
XXxxxH<complex> [u1Ax,u1Ay,u1Ap,u1AT,u1Arho];    //eigenmode (start)      
XXxxxH<complex> [u1ACx,u1ACy,u1ACp,u1ACT,u1ACrho];    //eigenmode (start)      
XXxxxH<complex> [uepsx,uepsy,uepsp,uepsT,uepsrho];    //eigenmode (start)    
XXxxxH [uepsrx,uepsry,uepsrp,uepsrT,uepsrrho];    //eigenmode (start)      

XXxxxH<complex> [u20x,u20y,u20p,u20T,u20rho];
XXxxxH<complex> [u22x,u22y,u22p,u22T,u22rho];    //terms |A|^2 and A^2
XXxxxH<complex> [vx, vy, vp, vT, vrho]; // test functions
XXxxxH<complex> [vCx,vCy,vCp,vCT,vCrho]; // test functions
     
////////////////////////////////////////////////////////////////////////////////

  macro div(u) ((Dx(u#x)+Dy(u#y)))   //EOM
  macro ugradf(u,f) ((u#x*Dx(f)+u#y*Dy(f)))    //
  macro ugradfConj(u,f) ((conj(u#x)*Dx(f)+conj(u#y)*Dy(f)))    //
  macro realInnerProd(u,v) ((u#x*v#x + u#y*v#y)) //
  macro termnonlinear(u,v,w) ((w#x*(u#x*Dx(v#x)+u#y*Dy(v#x))+w#y*(u#x*Dx(v#y)+u#y*Dy(v#y)))) //
  macro Grad(u) [[Dx(u#x),Dx(u#y)],[Dy(u#x),Dy(u#y)]]//EOM
  macro Strain(u)[[Dx(u#x),0.5*(Dx(u#y)+Dy(u#x))],[0.5*(Dx(u#y)+Dy(u#x)),Dy(u#y)]]//EOM
  macro gradgrad(u,v)(Dx(u)*Dx(v)+Dy(u)*Dy(v))//EOM

macro NS(u,Re,v)(
				v#rho*(u#rho*div(u)+ugradf(u,u#rho))

				-u#p*div(v)/(gamma*Ma^2)+2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))+u#rho*termnonlinear(u,u,v)

				+v#T*(u#rho*ugradf(u,u#T)+(gamma-1.0)*u#p*div(u)-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(u)))-2.0/3.0*(div(u)*div(u))))
				+gamma/(Pr*Re)*gradgrad(u#T,v#T)   
				
				+v#p*(u#p-(u#rho*u#T))
	) //EOM macro for NS operator

  macro NSL(U,u,Re,v)(
				v#rho*(u#rho*div(U)+U#rho*div(u)+ugradf(U,u#rho)+ugradf(u,U#rho)) 

				-u#p/(gamma*Ma^2)*div(v)+2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))+ U#rho*(termnonlinear(u,U,v))
				+u#rho*termnonlinear(U,U,v)+U#rho*termnonlinear(U,u,v)

				+v#T*(u#rho*ugradf(U,U#T)+U#rho*ugradf(U,u#T)+U#rho*ugradf(u,U#T)+(gamma-1)*(u#p*div(U) + U#p*div(u))
				-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(U))+(Strain(U):Strain(u)))-2.0/3.0*(2.0*div(U)*div(u))))
				+gamma/(Pr*Re)*gradgrad(u#T,v#T)

				+v#p*(u#p-(u#rho*U#T+U#rho*u#T))								  
	) // EOM macro for linear NS operator

 macro NonLinearRho(ua,ub,u0,v) (
				(ua#rho*div(ub) + ub#rho*div(ua))*v#rho +
				(ugradf(ua,ub#rho) + ugradf(ub,ua#rho))*v#rho
			) //EOM macro for NonLinearRho

 macro NonLinearU(ua,ub,u0,v) (
			 	  ua#rho*termnonlinear(ub,u0,v) +  ub#rho*termnonlinear(ua,u0,v)
				+ u0#rho*termnonlinear(ua,ub,v) + u0#rho*termnonlinear(ub,ua,v)
				+ ua#rho*termnonlinear(u0,ub,v) + ub#rho*termnonlinear(u0,ua,v)
			) //EOM macro for NonLinearU

 macro NonLinearTriple(ua,ub,v) (
			 	  ub#rho*termnonlinear(ua,ua,v) 
				+ ua#rho*termnonlinear(ub,ua,v)
				+ ua#rho*termnonlinear(ua,ub,v)
				+ v#T*ub#rho*ugradf(ua,ua#T)
				+ v#T*ua#rho*ugradf(ub,ua#T)
				+ v#T*ua#rho*ugradf(ua,ub#T)
			) //EOM macro for NonLinearU


  macro NonLinearT(ua,ub,u0,v) (
				  v#T*(u0#rho*ugradf(ua,ub#T) + u0#rho*ugradf(ub,ua#T))
				+ v#T*(ua#rho*ugradf(u0,ub#T) + ub#rho*ugradf(u0,ua#T))
				+ v#T*(ua#rho*ugradf(ub,u0#T) + ub#rho*ugradf(ua,u0#T))
				+ v#T*(gamma-1.0)*(ua#p*div(ub) + ub#p*div(ua))
				- v#T*gamma*(gamma-1.0)*Ma^2/ReC*(2.0*((Strain(ua):Strain(ub)))-2.0/3.0*(div(ua)*div(ub)))
				- v#T*gamma*(gamma-1.0)*Ma^2/ReC*(2.0*((Strain(ub):Strain(ua)))-2.0/3.0*(div(ub)*div(ua)))
			) //EOM macro for NonLinearT

  macro NonLinearP(ua,ub,u0,v) (
				-v#p*(ua#rho*ub#T + ub#rho*ua#T)
			) //EOM macro for NonLinearP

  macro ViscousTerms(U,u,Re,v)(
  		2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))
  		-v#T*gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(U))+(Strain(U):Strain(u)))-2.0/3.0*(2.0*div(U)*div(u)))
		+gamma/(Pr*Re)*gradgrad(u#T,v#T)
  	) // EOM

  macro ViscousTermsBF(u,Re,v)(
  		2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))
  		-v#T*gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(u)))-2.0/3.0*(div(u)*div(u)))
		+gamma/(Pr*Re)*gradgrad(u#T,v#T)
  	) // EOM

  macro NonLineardtABConj(ua,uaC,omega,v) (
				1i*omega*(uaC#rho*realInnerProd(ua,v) - ua#rho*realInnerProd(uaC,v))
				+ 1i*omega*v#T*(uaC#rho*ua#T - ua#rho*uaC#T)
			) //EOM macro for NonLineardtABConj

  macro NonLineardtAA2(ua,uaC,omega,v) (
				1i*omega*(2*uaC#rho*realInnerProd(ua,v) - ua#rho*realInnerProd(uaC,v))
				+ 1i*omega*v#T*(2*uaC#rho*ua#T - ua#rho*uaC#T)
			) //EOM macro for NonLineardtABConj

  macro NonLineardtAB(ua,ub,omega,v) (
				1i*omega*(ua#rho*realInnerProd(ub,v))
				+ 1i*omega*v#T*(ua#rho*ub#T)
			) //EOM macro for NonLineardtA2A1


  macro NonLinear(ua,ub,u0,v) ( NonLinearRho(ua,ub,u0,v) + NonLinearU(ua,ub,u0,v) + NonLinearT(ua,ub,u0,v) + NonLinearP(ua,ub,u0,v) ) // EOM
        
  macro F3Ainprod(ua,ub,u0,v)( NonLinear(ua,ub,u0,v) + ViscousTerms(u0,ua,1.0,v)
  	) // End of the innner product that partially defines lambda

  macro F3AAbs2inprod(ua,ub,u0,v,omega)( NonLinear(ua,ub,u0,v) + NonLineardtAB(ua,ub,omega,v)
  	) // End of the innner product that partially defines mu

  macro F3AConjAbs2inprod(ua,ub,u0,v,omega)( NonLinear(ua,ub,u0,v) + NonLineardtAA2(ua,ub,omega,v)
  	) // End of the innner product that partially defines nu

  macro F3AAConjA(ua,ub,v)( NonLinearTriple(ua,ub,v)
  	) // End of the innner product that partially defines eta

  macro BNorm(U,u,v) (   U#rho*(u#x*v#x + u#y*v#y + u#T*v#T) + u#rho*v#rho)   //
  macro Boundaryconditions(du,us,dp,dT,drho,symmetry)
	           on(bcinlet,du#x=0,du#y=0.0,dT=0.0,drho=0.0)
	            /* bc normally used at lateral boundaries are neumann (nothing to specify) */ 
	         + on(bcoutflow,du#x=0,du#y=0.0,dT=0.0,drho=0.0)  /* if you want to try no-penetration boundary (not optimal) */
             + on(bcwall,du#x=0.0,du#y=0.0)
             + int1d(th,bcaxis)(((du#x*us#x + dT*us#T + drho*us#rho)*1e30*(symmetry==0)+du#y*us#y*1e30*(symmetry==1)))  // I am not sure what to impose on T,rho and p 
//EOM
macro Lift(nu,u)   
	(
	int1d(th,2,21,22,23)(((u#p)/(gamma*Ma^2))*N.y)
	+ int1d(th,2,21,22,23)( -nu*((((4.0/3.)*dy(u#y) - (2.0/3.)*dx(u#x))*N.y+(dx(u#y)+dy(u#x))*N.x)))
	)//

// WARNING : HERE IT IS Lift FORCE
macro Drag(nu,u)    
	(
	int1d(th,2,21,22,23)((u#p)/(gamma*Ma^2)*N.x)
	+ int1d(th,2,21,22,23)( -nu*((((4./3.)*dx(u#x) - (2./3.)*dy(u#y))*N.x+ (dx(u#y)+dy(u#x))*N.y)))
	)//

macro dDrag(nu,u)    
	(
	int1d(th,2,21,22,23)( -nu*((((4./3.)*dx(u#x) - (2./3.)*dy(u#y))*N.x+ (dx(u#y)+dy(u#x))*N.y)))
	)
// Drag FORCE

macro EnergyNorm(u,U) sqrt(int2d(th)(  (1*(symmetryBaseFlow!=1)+2*(symmetryBaseFlow==1))*(JJ)*(U#rho*(abs(u#x)^2+abs(u#y)^2+abs(u#T)^2) + abs(u#rho)^2 ) ))
// "Energy" norm for a real or complex field

macro EnergyNormCS(uc,us,U) sqrt( (1*(symmetryBaseFlow!=1)+2*(symmetryBaseFlow==1))*(int2d(th)((JJ)*(U#rho*(abs(uc#x)^2+abs(uc#y)^2+abs(uc#T)^2 +
				  	      abs(us#x)^2+abs(us#y)^2+abs(us#T)^2) + abs(uc#rho)^2 + abs(us#rho)^2) )))
// "Energy" norm for a field defined by "cos" and "sin" components 

       


{
ifstream cbin(ffdatadir+"BaseFlow.txt");
cbin >> ubx[] >> Re;
cout <<  "Re : " << Re << endl;
cout << "Drag of guess mean flow : " << Drag(1/Re,ub) << endl;
}
real epsilonTT = sqrt(1/Re-1/Recheck); // warning may fail if subcritical ! to be fixed in due time

{
cout << "Reading Eigenmode.txt" << endl;
ifstream cbin(ffdatadir+"Eigenmode.txt");
cbin >> u1x[] >> ReC >> sigmaC >> omegaC; 
}


{
cout << "Reading EigenmodeA.txt" << endl;
ifstream cbin(ffdatadir+"EigenmodeA.txt");
cbin >> u1Ax[] ; 
}
u1ACx[] = conj(u1Ax[]);




if(normalisation=="none")
	{ cout << " -> No normalization for the mode " << endl;}
else if(normalisation=="L")
	{
		cout << " -> Normalisation of mode based on LIFT  " << endl;
		real Liftguess = 0.5; // normalize so that lift is 0.5 ; total lift (including cc) is 1 ; lift coef. is .5
		
		cout << "  -> Fy = " << Liftguess  << endl;

		cout << "Fy before renarmalisation : " << Lift(1/Re,u1) << endl;
		complex modenorm = Lift(1/Re,u1);
		u1x[] = Liftguess/modenorm*u1x[]; 
			cout << "Fy after renarmalisation : " << Lift(1/Re,u1) << endl;	
	}	
else if(normalisation=="E")
		{
		cout << " -> Normalisation of mode based on ENERGY OF PERTURBATION (Mantic-lugo convention)  " << endl;
		real Eguess = 1;
		cout << "  -> Energy = " << Eguess << endl;

		cout << "Energy before renarmalisation : " << EnergyNorm(u1,ub) << endl;
		complex modenorm = Lift(1/Re,u1);
		u1x[] = 1/modenorm*u1x[]; // first normalize so that imag part of lift is zero
		modenorm = EnergyNorm(u1,ub);
		u1x[] = Eguess/modenorm*u1x[]; // then normalize so that || ums ||_L2 = 1/sqrt(2)
		cout << "Energy after renarmalisation : " << EnergyNorm(u1,ub) << endl;	
		}
else if(normalisation=="V")
		{
			cout << " -> Normalisation of mode based on velocity at one point (Sipp & lebedev convention)  " << endl;
		complex Vpoint = u1y(1,0); // convention of Sipp & Lebedev
		cout << "Energy before renarmalisation : " << EnergyNorm(u1,ub) << endl;
		complex modenorm = Lift(1/Re,u1);
		u1x[] = 0.4612/Vpoint*u1x[];  // convention of Sipp & Lebedev
		cout << "Energy after renarmalisation : " << EnergyNorm(u1,ub) << endl;	
		};


u1Cx[] = conj(u1x[]);

real nu = 1/Re;


/////////////////////////////////////////////////////////////////////////////////
//////// ORDER 2

cout << " Solving problems at order 2 :" << endl;

solve varfEpsilon([uepsx,uepsy,uepsp,uepsT,uepsrho],[vx,vy,vp,vT,vrho]) =
  	  int2d(th)( (JJ)*(NSL(ub,ueps,ReC,v)) )
	+ int2d(th) ((JJ)*(ViscousTermsBF(ub,1.0,v))) 
    + Boundaryconditions(ueps,v,uepsp,uepsT,uepsrho,symmetryBaseFlow);
	
solve varf20([u20x,u20y,u20p,u20T,u20rho],[vCx,vCy,vCp,vCT,vCrho]) =
  	  int2d(th)( (JJ)*(NSL(ub,u20,ReC,vC)) )
	+ int2d(th)( (JJ)*(NonLinear(u1,u1C,ub,vC) + NonLineardtABConj(u1,u1C,omegaC,vC)) ) 
    + Boundaryconditions(u20,vC,u20p,u20T,u20rho,symmetryBaseFlow);
	
solve varf22([u22x,u22y,u22p,u22T,u22rho],[vCx,vCy,vCp,vCT,vCrho]) =
  	  int2d(th)( (JJ)*(NSL(ub,u22,ReC,vC)) )
  	+ int2d(th)((JJ)*(2i*omegaC*BNorm(ub,u22,vC)))
	+ int2d(th)( (JJ)*(0.5*NonLinear(u1,u1,ub,vC)))  
    + Boundaryconditions(u22,vC,u22p,u22T,u22rho,symmetryBaseFlow);

[uepsrx,uepsry,uepsrp,uepsrT,uepsrrho] = [real(uepsx),real(uepsy),real(uepsp),real(uepsT),real(uepsrho)];
def(Ubr,Ubrp,UbrT,Ubrrho) = [real(ubx),real(uby),real(ubp),real(ubT),real(ubrho)];


real Fx0 = Drag(nu,Ubr);
real Fxeps2 = (Drag(nu,uepsr)-dDrag(1,Ubr));
real FxA20 = real(Drag(nu,u20));
complex FxA22 = Drag(nu,u22);
complex FyA1 = Lift(1/Re,u1)*2; // I imagine the 2 constant is to write Cy


cout << " Fx associated to order epsilon correction : " << Fxeps2 << endl;
cout << " Fx associated to order |A|^2  : " << FxA20 << endl;
cout << " Fx associated to order A^2  : " << FxA22 << endl;

/////////////////////////////////////////////////////////////////////////////////
/////// ORDER 3
cout << " Computing coeffs at order 3 :" << endl;



complex Cn;

Cn = int2d(th)((JJ)*(BNorm(ub,u1AC,u1)));

cout << " Cn : " << Cn << endl;


complex Lambda = 1/Cn*int2d(th)(JJ*(F3Ainprod(u1,uepsr,ub,u1AC)));
complex Nu0 = 1/Cn*int2d(th)(JJ*(F3AAbs2inprod(u20,u1,ub,u1AC,omegaC)));
complex Nu1 = 1/Cn*int2d(th)(JJ*(F3AConjAbs2inprod(u22,u1C,ub,u1AC,omegaC)));
complex Nu2 = 1/Cn*int2d(th)(JJ*(F3AAConjA(u1,u1C,u1AC)));

	
cout << "Lambda : "  << Lambda << " ; Nu0 = " << Nu0 << "  ; Nu1 = " << Nu1 << "  ; Nu2 = " << Nu2 << endl;
real AAA = sqrt(real(Lambda)/real(Nu0+Nu1+Nu2)); /// amplitude/sqrt(eps) ; value depends on normalisation choice


cout << endl << endl << "######### SUMMARY : ##############" << endl << endl;

cout << endl << "  >>  Amplitude :  A = " << AAA << " * epsilon^(1/2) " << endl;
cout << "  >>  In terms of Energy = " << AAA*EnergyNorm(u1,ub) << " * eps " << endl;
cout << "  >>  In terms of Lift force : Fy = [" << AAA*FyA1 << " exp(i omega0 t) + c.c. ] * eps" << endl;
cout << "                             : Fy = " << real(AAA*FyA1*2) << " cos(omega0 t) + " 
                                                     << -imag(AAA*FyA1*2) << " sin(omega0 t) ] * eps" << endl;

cout << " >> Drag force  = Fx0 + Fxeps2 * eps^2 + FxA20 *|A|^2 + |A^2| * [FxA22 exp(2 i omega0 t ) + c.c. ]"  << endl;
cout << "                      = " << Fx0 << " + " << Fxeps2 << " * eps + << " << -FxA20 << " * |A|^2 + [" << FxA22 << " exp(2 i omega0 t) + c.c.] |A|^2 "  << endl << endl;
cout << "                      = Fx0 + [ Fxeps2 + CxA20*(A^2/eps^2)] * eps^2 " 
                            << " +  [ 2*Re(FxA22)*cos( 2 omega0 t ) - 2*Im(FxA22)*sin( 2 omega0 t ) ] * "  << endl;
cout << "                      = " << Fx0 << " + " << (Fxeps2 + FxA20*AAA^2) << " * eps^2 + [ " << real(2*FxA22)*AAA^2 << " * cos(2 omega0 t ) + " 
																					<< -imag(2*FxA22)*AAA^2 << " * sin(2 omega0 t ) ] * eps^2"   << endl;
         
         
cout << endl << "  >> Frequency = omega0 + im(Lambda)*eps - im(nu0+nu2)*|A|^2 "  << endl;
cout << endl << "               = " << omegaC <<  " + " << imag(Lambda) - imag(Nu0+Nu1+Nu2)*AAA^2 << " * eps^2 "  << endl;
        
                                                  
real omegaNL;
if(Recheck>0)
{

cout << endl<< endl << " #####  EVALUATION FOR Re = " << Recheck << " AND GENERATION OF guesses for nonlinear approaches ############" << endl;
cout << "  >>  Amplitude :  A = " << AAA*epsilonTT  << endl;
cout << "  >>  In terms of Energy = " << AAA*EnergyNorm(u1,ub)*epsilonTT << endl;
cout << "  >>  In terms of Lift force : Fy = [" << AAA*FyA1*epsilonTT << " exp(i omega0 t) + c.c. ]" << endl;
cout << "                             : Fy = " << real(AAA*FyA1)*2*epsilonTT << " cos(omega0 t) + " 
													 << -imag(AAA*FyA1)*2*epsilonTT << " sin(omega0 t) " << endl; 

cout << endl << "  >> Drag force   = " << Fx0+(Fxeps2 + FxA20*AAA^2)*epsilonTT^2 << " + [ " 
										 << real(FxA20*2)*epsilonTT^2 << " * cos(2 omega0 t ) + " 
			                             << -imag(FxA22*2)*epsilonTT^2 << " * sin(2 omega0 t ) "   << endl;

omegaNL = omegaC+(imag(Lambda) - imag(Nu0+Nu1+Nu2)*AAA^2)*epsilonTT^2;
			                             
cout << endl << "  >> Frequency = " << omegaC <<  " + " << (imag(Lambda) - imag(Nu0+Nu1+Nu2)*AAA^2)*epsilonTT^2  
						<<  "  =  " << omegaNL << endl ;
						
cout << endl << "########################################################" << endl << endl;
  	
};


//// GENERATE FILE WITH ALL COEFFS ; USEFUL FOR MATLAB DRIVER

{
 		 ofstream file(ffdatadir+"WNL_results.ff2m");
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "Coefficients of the Amplitude Equation obtained by Weakly Non Linear analysis" << endl;
    	 file << "Format :" << endl;
	     file << "real Rec complex eigenvalue complex Lambda complex nu0 complex nu1 complex nu2 real Aeps complex Fyeps" 
	          << " real Fx0 real Fxeps2 real FxA20 complex FxA22 real Fxeps20 complex Fxeps22" << endl << endl ; 
	     file << ReC << endl 
			  << 0 << " " << omegaC  << endl 
			  << real(Lambda) << " " << imag(Lambda) << endl 
			  << real(Nu0) << " " << imag(Nu0) << endl 
			  << real(Nu1) << " " << imag(Nu1) << endl 
			  << real(Nu2) << " " << imag(Nu2) <<  endl 
			  << real(AAA*EnergyNorm(u1,ub)) << endl
			  << real(AAA*FyA1) << " " << imag(AAA*FyA1) << endl
			  << real(Fx0) << endl 
			  << real(Fxeps2) << endl
			  << real(FxA20) << endl  
			  << " " << real(FxA22) << " " << imag(FxA22) << endl
			  << real(FxA20*AAA^2) << endl  
			  << " " << real(FxA22*AAA^2) << " " << imag(FxA22*AAA^2) << endl ;
		file << endl;

};



//////// GENERATE "GUESS FILES" for Self-consistent computation"
if(Recheck>0)
{
XXxxxH [umx,umy,ump,umtemp,umro]; // mean flow
Re = Recheck;

{
	ofstream file(ffdatadir+"MeanFlow_guess.txt");
		umx[] = Ubrx[]+epsilonTT^2*uepsrx[];
	[umx,umy,ump,umtemp,umro]=[umx,umy,ump,umtemp,umro]+AAA^2*epsilonTT^2*[real(u20x),real(u20y),real(u20p),real(u20T),real(u20rho)];
	file << umx[]; 
	file << endl << endl << Re;
}; 
SFWriteBaseFlow(ffdatadir+"MeanFlow_guess.ff2m",um,"MeanFlow",1);

int[int] forder=[1,1,1,1];
savevtk(ffdatadir+"/WNLq21.vtk",th,real(uepsp),[real(uepsx),real(uepsy),0],real(uepsT),real(uepsrho),order=forder,dataname="Pb vel temp rho");
savevtk(ffdatadir+"/WNLq1A.vtk",th,real(u20p),[real(u20x),real(u20y),0],real(u20T),real(u20rho),order=forder,dataname="Pb vel temp rho");
savevtk(ffdatadir+"/WNLq1Aabs.vtk",th,real(u22p),[real(u22x),real(u22y),0],real(u22T),real(u22rho),order=forder,dataname="Pb vel temp rho");

    [u1x,u1y,u1p,u1T,u1rho] = 2*AAA*epsilonTT*[u1x,u1y,u1p,u1T,u1rho]; // factor 2 because (cos, sin) components instead of (re,im)
{
 	ofstream file(ffdatadir+"SelfConsistentMode_guess.txt");
   	file << u1x[] ;	
   	file << endl << endl << Re << endl
   	<< endl << 0 << "   " << omegaC  << endl;
};
SFWriteMode(ffdatadir+"SelfConsistentMode_guess.ff2m",u1,1i*omegaNL,1i*omegaC,"HarmonicMode",1);

	cout << 2*AAA^2*epsilonTT^2 << endl;
	u22x[] = 2*AAA^2*epsilonTT^2*u22x[]; // factor 2 because (cos, sin) components instead of (re,im)
{
 	ofstream file(ffdatadir+"SecondHarmonicMode_guess.txt");
   	file << u22x[] ;	
   	file << endl << endl << Re << endl
   	<< endl << 0 << "   " << 2*omegaC  << endl;
};

SFWriteMode(ffdatadir+"SecondHarmonicMode_guess.ff2m",u22,2i*omegaNL,2i*omegaC,"SecondHarmonicMode",1);

};

	

