//
//	Mesh used in ERCOFTAC results
//  initial by Benjamin, rectified by Raffaele
// 


	verbosity = 0;
	
	include "Macros_StabFem.edp" 

	include "Params_BirdCall.edp"; // mesh definition
	real Rhole=1;
	
	cout << "### Mesh generation for the flow across a single hole" << endl;
	
	real Rext = 15;
	real Lext = 15;

	real Rcav = 10;
	real Lcav = 10;
	
	real ep = 0.3; // epaisseur	
	cout << " Enter value of ep ? " ;
	cin >> ep ;
	cout << " => ep = " << ep << endl; 

	mesh Th;

	//revolution axis
	
	
		border axis(t=-Lup,Ltotcav+Ldown) {x=t;y=0.;label=6;};
	border axis1(t=-Lup,Xup + Rup*cos(Tminup)) {x=t;y=0.;label=6;};
	border axis2(t=Xup + Rup*cos(Tminup),Xdown +Rdown*cos(Tmindown)) {x=t;y=0.;label=6;};
	border axis3(t=Xdown +Rdown*cos(Tmindown),Ltotcav+Ldown) {x=t;y=0.;label=6;};


	//upstream
		//inlet
		border inlet(t=Rin,0) {x=-Lup; y=t; label=1;};	
		//non-solid boundaries
		border upstreamUP(t=Xup + Rup*cos(Tmaxup),-Lup) {x=t;y=Rin; label=5;};


	//downstream
		//outlet
		border outlet(t=0,Rout) {x=(Ltotcav+Ldown); y=t; label=3;};
		//non-solid boundaries
		border downstreamUP(t=Ltotcav+Ldown,Xdown+Rdown*cos(Tmaxdown)+Thick) {x=t;y=Rout; label=3;};


	//cavity
		//uptream wall
		border externwall11(t=Tminup,Tmaxup) {x=Xup + Rup*cos(t) ;y=Rup*sin(t);label=2;};
		border externwall12(t=Rcav,Rin) {x=Xup + Rup*cos(Tmaxup);y=t;label=2;};
		border edge1(t=Thick,0.) {x=Xup + Rup*cos(Tminup)+t;y=Rholein;label=2;};
		border internwall1(t=Tmaxup,Tminup) {x=Xup + Rup*cos(t) +Thick;y=Rup*sin(t);label=2;};
		//downstream wall
		border externwall21(t=Tmaxdown,Tmindown) {x=Xdown +Rdown*cos(t)+Thick;y=Rdown*sin(t);label=2;};
		border externwall22(t=Rout,Rcav) {x=Xdown+Rdown*cos(Tmaxdown)+Thick;y=t;label=2;};
		border edge2(t=Thick,0.) {x=t+Xdown +Rdown*cos(Tmindown);y=Rholeout;label=2;};
		border internwall2(t=Tmindown,Tmaxdown) {x=Xdown +Rdown*cos(t);y=Rdown*sin(t);label=2;};
		//top of the cavity
		border cavityUP(t=Xdown +Rdown*cos(Tmaxdown),Xup + Rup*cos(Tmaxup) +Thick){x=t;y=Rcav;label=21;};		
		//border cavityUP(t=Tmaxdown,pi-Tmaxdown){x=Xdown +Rdown*cos(t);y=Rdown*sin(t);label=21;};
		
		border hole1(t=1,0){x=Xup + Rup*cos(Tminup); y=Rholein*t; label=91; };
		border hole2(t=0,1){x=Xdown +Rdown*cos(Tmindown);y=Rholeout*t;label=92;};
		
IFMACRO(FREEFEMPLOTS,YES)		
	plot(	
	hole1(Rholein*15)+hole2(Rholeout*15)
	+    axis(Ninit*(Lup+Ltotcav+Ldown))
		+inlet(Ninit*Rin)+upstreamUP(Ninit*Lup)
		+outlet(Ninit*Rout)+downstreamUP(Ninit*Ldown)
		+externwall11(Ninit*(Rcav-Rholein))+externwall12(Ninit*(Rin-Rcav))+edge1(4*Ninit*Thick)+internwall1(Ninit*(Rcav-Rholein))
		+externwall21(Ninit*(Rcav-Rholeout))+externwall22(Ninit*(Rout-Rcav))+edge2(4*Ninit*Thick)+internwall2(Ninit*(Rcav-Rholeout))+cavityUP(2*Ninit*Hcav)
	     ,wait=debug);
ENDIFMACRO

	mesh th = buildmesh( 
	hole1(Rholein*15)+hole2(Rholeout*15)
		//+axis(Ninit*(Lup+Ltotcav+Ldown))
		+axis1(Ninit*10)+axis2(Ninit*10)+axis3(Ninit*20)
		+inlet(Ninit*Rin)+upstreamUP(Ninit*Lup)
		+outlet(Ninit*Rout)+downstreamUP(Ninit*Ldown)
		+externwall11(Ninit*(Rcav-Rholein))+externwall12(Ninit*(Rin-Rcav))+edge1(4*Ninit*Thick)+internwall1(Ninit*(Rcav-Rholein))
		+externwall21(Ninit*(Rcav-Rholeout))+externwall22(Ninit*(Rout-Rcav))+edge2(4*Ninit*Thick)+internwall2(Ninit*(Rcav-Rholeout))
		+cavityUP(Ninit*(Xdown +Rdown*cos(Tmaxdown)-Xup - Rup*cos(Tmaxup) -Thick))
			);

IFMACRO(FREEFEMPLOTS,YES)	
	plot(th, wait=debug);
ENDIFMACRO

// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");

 real SFGeomRinlet = Rin ; 
 real SFGeomRhole1 = Rholein ; 
 real SFGeomRhole2 = Rholeout ; 
 real SFGeomH = Xdown +Rdown*cos(Tmindown)-(Xup +Rdown*cos(Tminup)) ; 
 real SFGeomXinlet = -Lup ;
 real SFGeomRcav = Rcav ;

// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
            file <<  "### Data generated by Freefem++ ; " << endl;
            file << "(Auxiliary file with information on initial mesh)" << endl;
            file << "problemtype AxiXR" << endl;
			file << "real Rinlet real Rhole1 real Rhole2 real H real Xin real Rcav " << endl;
			file <<  Rin  << endl << Rholein << endl << Rholeout << endl << Xdown +Rdown*cos(Tmindown)-(Xup +Rdown*cos(Tminup)) <<  endl;
			file <<  -Lup  << endl << Rcav <<  endl;
			
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)


// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomLengthscale = 1 ; // length scale for nondimensionalization" << endl ;
            file2 << " real SFGeomVelocityscale = 1 ; // velocity scale for nondimensionalization"  << endl ;
            file2 << " real SFGeomRinlet = " << Rin  << " ; " << endl ;
            file2 << " real SFGeomRhole1 = " << Rholein  << " ; " << endl ;
            file2 << " real SFGeomRhole2 = " << Rholeout  << " ; " << endl ;
            file2 << " real SFGeomH = " << Xdown +Rdown*cos(Tmindown)-(Xup +Rdown*cos(Tminup))  << " ; " << endl ;
            file2 << " real SFGeomXinlet = " << -Lup  << " ; " << endl ;
            file2 << " real SFGeomRcav = " << Rcav  << " ; " << endl ;
}





// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,ur,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ur[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",0);
	     




		cout << "............................................" << endl;
		cout << "............................................" << endl;
		cout << "Maillage termine " << endl << "..." << endl;
//		cout << "nombre de sommets: "+Th.nv << endl;
		cout << "............................................" << endl;
		cout << "............................................" << endl;


	
