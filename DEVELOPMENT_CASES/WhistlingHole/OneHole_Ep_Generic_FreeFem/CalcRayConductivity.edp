

/// JET SIFFLANT : CAS D'UN FORCAGE PULSE
	load "UMFPACK64"
/// DECLARATIONS FORMELLES
	include "Params_Conduct.edp";
	int Nprof =6;
	macro Uin(rr) ( (2+Nprof)/Nprof*(1-rr^Nprof) )  //EOM
	
	mesh th=readmesh("mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1<complex> [urp,uzp,pp];
    p2xp2xp1<complex> [ur,uz,p],[vr,vz,q];
    p2xp2xp1 [urr,uzr,pr],[uri,uzi,pii];
    
	int m=0; 
	real nu,Re;
	real epsilonPQ = 0*1e-20; // terme de desingularisation
	real omega;
	real S = 100.;
	real Q = 1.;

	{
	ifstream cbin("chbaseCOMPLEX.txt");
	cbin >> urp[];
	cbin >> Re;
	};

	
	cout << " Entrez omega :  " << endl; 
	cin  >> omega;
	nu=2*Rhole/Re;
	cout << " Calcul d'une impedance pour un trou ; Re    = " << Re << endl; 
	cout << "                                       nu    = " << nu << endl;
	cout << "                                       omega = " << omega << endl;




	problem PulsedJet([ur,uz,p],[vr,vz,q],eps=1e-16) = 
	int2d(th)(
	(
	- yphys*vz*(
		(uzp*G*dx(uz)+uz*G*dx(uzp)+urp*Gy*dy(uz)+ur*Gy*dy(uzp))	
		  -1i*omega*uz )  				
	- yphys*vr*(
		(uzp*G*dx(ur)+uz*G*dx(urp)+urp*Gy*dy(ur)+ur*Gy*dy(urp))	
		-1i*omega*ur )	
		
	- nu*(yphys*G*dx(uz)*G*dx(vz)+yphys*Gy*dy(uz)*Gy*dy(vz)  
	      + yphys*G*dx(ur)*G*dx(vr)+yphys*Gy*dy(ur)*Gy*dy(vr)+1/yphys*ur*vr  )
	  
	+ p*(yphys*G*dx(vz)+vr+yphys*Gy*dy(vr))
	- q*(yphys*G*dx(uz)+ur+yphys*Gy*dy(ur))
	)*1/(Gy*G)
	)

	+ on(1,uz=Q/S,ur=0.)
  	+ on(2,uz=0.,ur=0.)	
	+ on(6,7,ur=0.)
	+on(3,uz=0); // mirror
   	cout << "declaration operateur m=0" << endl;
	



	

	PulsedJet;

	{ofstream file("UVP_conductivity_Re"+Re+"_omega"+omega+".txt");
  	file << ur[] ;	
   	file << endl << endl << Re << endl;}
	

	complex Rate = 2*pi*int1d(th,1)(uz*y);
	complex Force = 2*pi*int1d(th,1)(y*p);
	complex pin = Force/(2*pi*int1d(th,1)(y)); // force/surface


	complex Imp = (pin/Rate);
 	complex K   = -1i*1./Imp*omega; 

	cout << ">>>> JET PULSE :  omega = " << omega << endl;
	cout << "Debit Q = " << Rate << endl;
	cout << "FORCE   = " << Force << endl;
	cout << "DeltaP (= Pression  entree) = " << pin << endl;
	cout << "IMPEDANCE = P/Q = " << Imp << endl;
	cout << "Conductance = " << K << endl;
	cout << "Delta, Gamma : " << real(K)/2 << " " << -imag(K)/2 << endl;
 
	
	

	// Sortie des critÃ¨res
//	ofstream file2("Rayleigh_conductivity_cb0_Re"+Re+".txt",append);

//	file2  	<< omega*a/(abs(Rate)/a^2) << " "
//	    	<< real(K) 		<< " " << imag(K) 	<< " "  << abs(K)	<< " " 	
//		<< real(Imp) 		<< " " << imag(Imp) 	<< " "  << abs(Imp)	<< " " 
//		<< Rate 		<< " " << omega 	<< endl;


[urr,uzr,pr] = [real(ur),real(uz),real( p )];
[uri,uzi,pii] = [imag(ur),imag(uz),imag( p )];

	
	
	
	p2 uu ;
	uu = real(uz); 
	cout << " Max u real = " << uu[].max << endl;
	


	//Sortie du fichier .dat	
	
	
	string tit="00";	      
	p1 xx,yy;
	xx=x;
	yy=y;
	cout << x<< endl;
	
	p1 utr,vtr,ptr,vortir;
	p2 omr;
	p1 uti,vti,pti,vortii;
	p2 omi;
	p2<complex> omegaC;
	


	
	utr=uzr;
	vtr=urr;
	ptr=pr;
//	omr=(dx(urr)-Gy*dy(uzr));
//	vortir=omr;
	
	
	uti=uzi;
	vti=uri;
	pti=pii;
//	omi=(dx(uri)-Gy*dy(uzi));
//	vortii=omi;

	omegaC = G*dx(ur)-Gy*dy(uz);
	vortir = real(omegaC);
	vortii = imag(omegaC);

	
	p1 psiR,psiI,psiT; 
	p2<complex> psiC,psiTC;
	
	solve calcpsi(psiC,psiTC) = -int2d(th)(1./(yphys*G*Gy)*(G*dx(psiC)*G*dx(psiTC)+Gy*dy(psiC)*Gy*dy(psiTC)))
	+int2d(th)(psiTC*omegaC/(G*Gy))
//	+int1d(th,5)(psiT*uzr)
//	-int1d(th,3)(psiT*utr)
	+on(6,psiC=0)+on(2,7,psiC=.5);
	
	psiR = real(psiC);
	psiI = imag(psiC);

	p1 yyP,xxPR,xxPI;
	xxPR = real(xphys);
	real xxmaxR = xxPR[].max;
	xxPI = imag(xphys);
	real xxmaxI = xxPI[].max;
	yyP = yphys;
	real ymax = yyP[].max;	


plot(yyP,wait=1);


{
	ofstream champ2D("StructureCond_Re"+Re+"_omega"+omega+".dat");
	{	champ2D.precision(16);
		champ2D << "VARIABLES= \"x\" , \"y\" , \"ur\" , \"vr\" , \"pr\" , \"omr\", \"psir\", \"ui\" , \"vi\" , \"pi\" , \"omi\", \"psii\" \"XR\"  \"XI\" \"YY\" "<< endl;
		champ2D << "ZONE F=FEPOINT,ET=TRIANGLE,N=" << th.nv << ",E=" << th.nt << endl;
	
		for (int j=0; j<th.nv; j++)
		{
			champ2D << xx[][j] << " " << yy[][j]  << " " << utr[][j] <<  " " << vtr[][j] << " " << ptr[][j] << " " 
				<< vortir[][j] << " " << psiR[][j] << " " 
				<< uti[][j] <<  " " << vti[][j] << " " << pti[][j] << " " << vortii[][j] << " " << psiI[][j] << " "
				<< xxPR[][j] << " " << xxPI[][j] << " " << yyP[][j] << endl;
		}; 

		for (int i=0; i<th.nt; i++)
		{ 
			champ2D << th[i][0]+1 << " " << th[i][1]+1 << " " << th[i][2]+1 << endl;
		};
	};
	

{
ofstream champ1D("AxisStructureCond_Re"+Re+"_omega"+omega+".dat");
for (real xx = -(ep+Lcav); xx<Lext; xx=xx+0.01)
{
	champ1D << xx  << " " << real(uz(xx,0)) << " " << imag(uz(xx,0)) << " " << abs(uz(xx,0)) 
		       << " " << real(p(xx,0)) << " " << imag(p(xx,0)) << " " << abs(p(xx,0))  
		       << " " << xxPR(xx,0) << " " << xxPI(xx,0) << 
		       endl;
}
}
}


//[uri,uzi,pii] = [imag(ur)/abs(ur)*exp(-y^2),imag(uz)/abs(uz)*exp(-y^2),imag( p )/abs(p )*exp(-y^2)];

		// visualisation
	
		
	plot(uzr,value=1,wait=1);
	plot(uzi,value=1,wait=1);
	
	plot(urr,value=1,wait=1);
	plot(uri,value=1,wait=1);

	plot(pr,value=1,wait=1);
	plot(pii,value=1,wait=1);
	
	plot(psiR,value=1,cmm="psir", wait=1);
	plot(psiI,value=1,cmm="psii", wait=1);
	
//	plot(vortr,value=1,wait=1);
//	plot(vorti,value=1,wait=1);



