

	load "UMFPACK64"

	verbosity = 0;
	

include "Params_Conduct.edp";

//	int Nprof =6;
	
	real Uhole =1; // mean velocity across the hole
	
	real Uinlet = Uhole*(Rhole/Rcav)^2;
	
	real Re;
	real Reans,lecture;


cout << "###################################" << endl;
cout << endl << "       Newton_Axi.edp        " << endl; 
cout << endl << "###################################" << endl << endl;
	
	cout << " Entrer le Nombre de Reynolds :" << endl;

        cin >> lecture; 

	Re = lecture;
	cout <<"***************************  "<< Re << endl;

	mesh th=readmesh("mesh_guess.msh");
        fespace femp2(th,P2);   
        fespace femp1(th,P1);
        fespace femp0(th,P0);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1<complex> [u2guess,u1guess,pguess];
	
	
//	cout << "Mesh : meshall.msh" << endl;
    cout << "Mesh information : number of vertices    " << th.nv <<  endl;
	cout << "                   dimension of matrices " << u2guess[].n << endl << endl;
	
	fespace p1(th,P1);
	p1 yy,xx;
	xx = real(xphys);
	real xxmaxR = xx[].max;
	xx = imag(xphys);
	real xxmaxI = xx[].max;
	yy = yphys;
	real ymax = yy[].max;
	
	cout << " dimensions du domaine :  ( " 
	<< xxmaxR << " + i " << xxmaxI << " ) x " << ymax << endl;
	
	


	{
          ifstream file("chbase_guessCOMPLEX.txt");
        file >> u2guess[];
	file >> Reans;
        };

femp1<complex> GG;
GG  = G;
	
//cout << " .5 .75 .9" << endl << GG(.1,0) << " " << GG(10,0) << " " << GG(14,0) << endl;



	cout << " Newton pour Re = " << Re << endl;	
	cout << " CI : " << Reans << endl; 
	
		{ofstream log("log.txt",append);
			log <<  "-------------------------"	<<endl;		
			log <<  "Re = " << Re			<<endl;	
			log <<  "CI = " << Reans		<<endl;		
			log <<  "Nmat of the mesh = " << u2guess[].n	<<endl;}


        femp2xfemp2xfemp1<complex> [urp,uzp,pp]=[u2guess+0*1i,u1guess+0*1i,pguess+0*1i];
	femp2xfemp2xfemp1<complex> [dur,duz,dp],[vr,vz,q];
	real nu=(2*Rhole)/Re;
        
	real epsilon=1e-6;
        real residuNewton=1e-10;
        int Nitermax=20;

        real res,ener=1.;



	
	int i=0;
         while((ener>residuNewton)&(i<=Nitermax))
        {
	    if (i==Nitermax-1) {break;
				cout<<"!!! "+Nitermax+"th iteration, the newton method will not converge !!!"<< endl;	}
			  
	solve NS([dur,duz,dp],[vr,vz,q])=
	// gradient
	int2d(th)(
        (  yphys*vz*(uzp*G*dx(duz)+duz*G*dx(uzp)+urp*Gy*dy(duz)+dur*Gy*dy(uzp) )
         + yphys*vr*(uzp*G*dx(dur)+duz*G*dx(urp)+urp*Gy*dy(dur)+dur*Gy*dy(urp) )
	
  + nu*(yphys*G*dx(duz)*G*dx(vz)+yphys*Gy*dy(duz)*Gy*dy(vz)  
	      + yphys*G*dx(dur)*G*dx(vr)+yphys*Gy*dy(dur)*Gy*dy(vr)+1/yphys*dur*vr  )
	
	- dp*(yphys*G*dx(vz)+vr+yphys*Gy*dy(vr))
	+ q*(yphys*G*dx(duz)+dur+yphys*Gy*dy(dur))
        )*1/(Gy*G)
	)
	

	// second membre
 	+ int2d(th)(
         (
	 yphys*(   vr*urp*Gy*dy(urp)+vr*uzp*G*dx(urp)
	     + vz*urp*Gy*dy(uzp)+vz*uzp*G*dx(uzp)  )





	     
	+ nu*(yphys*G*dx(uzp)*G*dx(vz)+yphys*Gy*dy(uzp)*Gy*dy(vz)  
	      + yphys*G*dx(urp)*G*dx(vr)+yphys*Gy*dy(urp)*Gy*dy(vr)+1/yphys*urp*vr  )
	
        - pp*(yphys*G*dx(vz)+vr+yphys*Gy*dy(vr))
	
        + q*(yphys*G*dx(uzp)+urp+yphys*Gy*dy(urp)) 
        )*1/(Gy*G)
        )
  	+on(1,duz=Uinlet-uzp,dur=-urp)                  // profil constant
  	+on(2,21,duz=-uzp,dur=-urp)
	+on(6,dur=-urp) // axis
	+on(7,dur=-urp); // lateral wall cavity
	
	
	

		  ener=sqrt(int2d(th)(abs(dur)^2+abs(duz)^2)/th.area);
		  
		  cout << " res = " << ener << endl;
			{ofstream log("log.txt",append);
			log <<  " res = " << ener 	<<endl;}	
			
				
                urp[]+=dur[];
        i++;
	
	if((i>4)&&(ener>1))
	{
	cout << " ATTENTION : DIVERGENCE PROBABLE" << endl;
	
	femp2xfemp2xfemp1 [realurp,realuzp,realpp] = [real(urp),real(uzp),real(pp)];
	femp2xfemp2xfemp1 [realu2guess,realu1guess,realpguess] = [real(u2guess),real(u1guess),real(pguess)];
	plot(realurp,realu2guess,value=1,wait=true);
	plot(realuzp,realu1guess,value=1,wait=true);
	plot(realpp,realpguess,value=1,wait=true);
	}
	
	}
		
// sortie des résultats

femp2<complex> w,psi,psiT;
//	w = -(Gy*dy(uzp)-G*dx(urp)); 
 

if(i<Nitermax-1)
{
cout << "CONVERGENGE : sortie des resultats dans chbase.txt" << endl;
		

		
 	 {
		  ofstream file("chbaseCOMPLEX.txt");
		  file << urp[]; 
		  file << endl << endl << Re << endl; // remis
          };
	
 	exec("cp chbaseCOMPLEX.txt chbase_guessCOMPLEX.txt");               
	        
	savemesh(th,"mesh.msh");
	
	
	 {
		  ofstream file("CHBASE/cbnCOMPLEX_Re"+Re+".txt");
		  file << urp[];
		   file << endl << endl << Re << endl; // remis
          };
	savemesh(th,"CHBASE/mesh_Re"+Re+".msh");
	
	
	complex win,wout,Pup,Pin,Pdown,deltaP ;
	
	win	= w(0, Rhole);
	wout	= w(Lext, Rhole);
//	Pup	= pp(-2.5, 25/6);
//	Pin	= pp(Lext/2, Rext);
	Pdown	= pp(Rext,0);	

	deltaP = 2*int1d(th,1)(y*pp)/(Rcav*Rcav) ;
//	- 2*int1d(th,3)(y*pp)/(Rext*Rext);

	// Sortie des critères
	ofstream file("CHBASE/Ncriteria_Re="+Re+".txt");
	file	<< Re		<< " "
		<< deltaP	<< " "
		<<  1/sqrt(2*deltaP) << " " 
		<< win		<< " " 	
		<< wout		<< " " 
		<< Pup		<< " " 
		<< Pin		<< " " 
		<< Pdown	<< endl;


 	complex DebitOut = int1d(th,3)(yphys/Gy*(uzp*N.x+urp*N.y));
	complex DebitLat = int1d(th,5)(yphys/G*(uzp*N.x+urp*N.y));
	p1 ufiltre = real(uzp)*(x<0?1:0);
	real Umin = -ufiltre[].min;
	 
	cout << " Flow rate = 2 * pi *" << int1d(th,1)(uzp*y) << endl;
	cout << " Delta P = " << deltaP << endl;
	cout << " Venna contracta alpha = 1/sqrt(2 dP) = " << 1/sqrt(2*deltaP) << endl;
	cout << "Debit en sortie = 2 * pi * " << DebitOut << endl;
	cout << "Debit lateral = 2 * pi * " << DebitLat << endl;
	cout << " max(-U) dans le trou : " << Umin << endl; 
}
else
{ 
cout << " WARNING : pas de convergence ! " << endl;
};



// Critères de convergence(pression, vorticité, impédance)
	
	
	problem calcpsi(psi,psiT) = -int2d(th)(1./y*(dx(psi)*dx(psiT)+Gy*dy(psi)*Gy*dy(psiT)))
	+int2d(th)(psiT*w)
	+int1d(th,5)(psiT*uzp)
	-int1d(th,3)(psiT*urp)
	+on(6,psi=0)+on(2,7,psi=.5);
	calcpsi;
	
	

	

plot(th,wait=1);
plot(psi,value=1,cmm="psi",wait=true);
plot(urp,value=1,wait=true);
plot(uzp,value=1,wait=true);
plot(pp,value=1,wait=true);

//femp1 RES = dur^2+duz^2;
//plot(RES,value=1,wait=true);



