/// 
/// file Macros_StabFem.edp
///
/// This file contains the case-dependent Macros for boundary conditions and postprocessing output.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
/// boundary conditions : 
/// macro BoundaryconditionsBaseFlow(du,u,v) 
/// macro BoundaryconditionsStability(u,v,symmetry)
///
///
/// For post-processsing purposes :
/// macro SFWriteBaseFlow(filename,u,type,iter)
/// macro SFWriteMode(namefile,u,ev,shift,type,iter)
/// 
/// The following case is for the AXISYMMETRIC DISK and includes the additional macros
/// required to compute lift and drag forces : Trainee(u,symmetry) and Portance(u,symmetry)


IFMACRO(!SOLVER)
macro SOLVER MUMPS// POSSIBLE OPTIONS : DEFAULT, MUMPS, UMPFACK (to be avoided), SLEPC (not yet implemented)
ENDIFMACRO

IFMACRO(SOLVER,MUMPS)
load "MUMPS_seq" 
load "MUMPS" 
cout << " USING MUMPS_seq" << endl;
ENDIFMACRO
// END DEFINITION OF SOLVER

IFMACRO(!FREEFEMPLOTS)
macro FREEFEMPLOTS  NO//EOM
ENDIFMACRO 
// Set to YES to generate plots through the native FreeFem plotter ffglut (recommended in terminal /debug mode)
// set to NO to disable all plots (recommended in MatLab/StabFem mode)

IFMACRO(!EIGENSOLVER)
macro EIGENSOLVER SLEPC// POSSIBLE OPTIONS : ARPACK, SLEPC
ENDIFMACRO

IFMACRO(!COORDINATEMAPPING)
macro COORDINATEMAPPING YES//
ENDIFMACRO

IFMACRO(TOTOMAC,YES)
cout << "toto" << endl ;
ENDIFMACRO

IFMACRO(!problemtype)
macro problemtype "AxiXR"//EOM
ENDIFMACRO

IFMACRO(!ncomponentsBF)
macro ncomponentsBF 2//EOM  // THIS PARAMETERS SHOULD BE 2 if BASE FLOW is (U,V,P) and 3 if it is (U,V,W,P) (case with rotation)
ENDIFMACRO

string ffdatadir = "./WORK/";





// DEFINITION OF THE COMPLEX MAPPING

// NB the mapping used here requires the following parameters : 
//
//	real ParamMapGC (=0.3) 
//	real ParamMapLC (=2.5)
//	real ParamMapLa (=17)
//	real ParamMapLm (=0)
//	real ParamMapyA (=5)
//	real ParamMapyB (=17)
//  These parameters are defined in file ParamMapping.edp, which is created by SF_BaseFlow.


// definition of the mapping in x direction (complex)

   	macro Xphys(x,y,ParamMap) 
   	(x<ParamMap#Lm?x:ParamMap#Lm+(x-ParamMap#Lm)/(1-(x-ParamMap#Lm)^2/(ParamMap#LA-ParamMap#Lm)^2)^2*(1+1i*ParamMap#GC*tanh((x-ParamMap#Lm)^2/ParamMap#LC^2)) )
   	//EOM
   	
   	macro Hx(x,y,ParamMap) 
    ( (x<ParamMap#Lm)?1: 
       (0.1e1 / ((1 - (x - ParamMap#Lm)^2 / (ParamMap#LA - ParamMap#Lm) ^ 2) ^ 2) * 
       (0.1e1 + 1i * ParamMap#GC * tanh(((x - ParamMap#Lm) ^ 2 / ParamMap#LC ^ 2))) + 0.4e1 * ((x - ParamMap#Lm) ^ 2) 
       / ((1 - (x - ParamMapLm) ^ 2 / (ParamMap#LA - ParamMap#Lm) ^ 2) ^ 3) * (0.1e1 + 1i * ParamMap#GC * 
       tanh(((x - ParamMap#Lm) ^ 2 / ParamMap#LC ^ 2))) / ((ParamMap#LA - ParamMap#Lm) ^ 2) + 0.2e1 * ((x - ParamMap#Lm) ^ 2) 
       / ((1 - (x - ParamMap#Lm) ^ 2 / (ParamMap#LA - ParamMap#Lm) ^ 2) ^ 2) * 1i * 
       ParamMap#GC * (0.1e1 - tanh(((x - ParamMap#Lm) ^ 2 / ParamMap#LC ^ 2)) ^ 2) / (ParamMap#LC ^ 2) )
    /* (1/((1/((1-(x-ParamMap#Lm)^2/(ParamMap#LA-ParamMap#Lm)^2)^2)+4*(x-ParamMap#Lm)^2/(1-(x-ParamMap#Lm)^2/(ParamMap#LA-ParamMap#Lm)^2)^3
    /(ParamMap#LA-ParamMap#Lm)^2)*(1+1i*ParamMap#GC*tanh((x-ParamMap#Lm)^2/ParamMap#LC^2))+
	2*(0+(x-ParamMap#Lm)/(1-(x-ParamMap#Lm)^2/(ParamMap#LA-ParamMap#Lm)^2)^2)*1i*ParamMap#GC*
	(1-tanh((x-ParamMap#Lm)^2/ParamMap#LC^2)^2)*(x-ParamMap#Lm)/ParamMap#LC^2)*/
	 )
    //EOM
// BUG IDENTIFIE AVEC JAVIER....

	macro dX(a) Hx(x,y,ParamMap)*dx(a) //EOM


// definition of mapping in y direction (real)

    macro Rphys(x,y,ParamMap) 
      	 (x<0?y:(y<ParamMap#yA?y: ( ParamMap#yA+(y-ParamMap#yA)/(1-(y-ParamMap#yA)^2/(ParamMap#yB-ParamMap#yA)^2)^2) ) ) 
      	 //EOM
      	 
    macro Hy(x,y,ParamMap) 
      	(x<0?1:(y<ParamMap#yA?1: (-(y^2-2*y*ParamMap#yA+2*ParamMap#yB*ParamMap#yA-ParamMap#yB^2)^3/
      	(3*y^2-6*y*ParamMap#yA+4*ParamMap#yA^2-2*ParamMap#yB*ParamMap#yA+ParamMap#yB^2)/(-ParamMap#yB+ParamMap#yA)^4) ) )
		//EOM

	macro dY(a) Hy(x,y,ParamMap)*dy(a) //EOM
	
// Jacobian of the coordinate change
	macro JJ 1/(Hx(x,y,ParamMap)*Hy(x,y,ParamMap)) //EOM	


// MACROS FOR BOUNDARY CONDITIONS

macro BoundaryconditionsBaseFlow(du,up,v)
	           on(1,du#x=Uinlet(y)-up#x,du#r=0.0)
             + on(2,21,22,23,du#x=0.0,du#r=0.0)
             IFMACRO(ncomponentsBF,3) +on(2,21,22,23,du#phi=OMEGAx-up#phi) ENDIFMACRO /* for rotating body */
             + int1d(th,5,6)(du#r*v#r*1e30) 
             + int1d(th,7)(du#r*v#r*1e30)       
//EOM


macro BoundaryconditionsStability(u,v,m)
	           on(1,u#r=0.0,u#phi=0.0) /* Warning no condition on u#x here ! */ 
	         /*+ on(7,u#r=0.0) */
             + on(2,21,22,23,u#x=0.0,u#r=0.0,u#phi=0.0) 
             + int1d(th,6)(u#x*v#x*1e30*(abs(m)>0)+(u#r*v#r+u#phi*v#phi)*1e30*(abs(m)!=1))       
//EOM





// HERE ARE SOME MACROS
macro FlowRate1(u)
    (
	int1d(th,1)(-(u#x*N.x+u#r*N.y)*2*pi*y)
	)
//EOM 


macro SFWriteMesh(filename,TH)
{
     ofstream fileFF(filename);
	 fileFF << "### Data generated by Freefem++ ; " << endl;
     fileFF << "Mesh for the flow through a single hole" << endl;
     fileFF << "datatype Mesh meshtype 2DMapped" << endl; /* 2DMAPPED is important here ! */
	 fileFF << "int np int Ndof real deltamin real deltamax" ;
	 string PostProcessMeshDescription = " " ; /*description of customizable part*/
	 fileFF << PostProcessMeshDescription << endl << endl ;
     fespace femp1N(TH,P1);
     fespace femp2xfemp2xfemp1N(TH,[P2,P2,P1]);	  
     femp2xfemp2xfemp1N [uNx,uNy,uNp];
	 fileFF << TH.nv <<  endl << uNx[].n << endl ;
 	 cout << "#### Mesh information :" << endl;  
     cout << "## Number of vertices    " << TH.nv <<  endl;
	 cout << "## Number of DOF : " << uNx[].n << endl << endl;  
 	 femp1N delta = hTriangle;
	cout << "## delta min : " << delta[].min << endl;
	cout << "## delta max : " << delta[].max << endl;
	fileFF << delta[].min << endl;
	fileFF << delta[].max << endl;   
    /*Next is customizable part ; here the physical coordinates (possibly complex...) 
    {
    ofstream file(ffdatadir+"Mapping.ff2m");    
    fespace p1forff2m(TH,P1); 
	p1forff2m xx,yy;
    xx=x;
    yy=y;
   	file << "### Data generated by Freefem++ ; " << endl;
    file << "physical coordinates resulting from mapping (possibly complex...)" << endl;
    file << "datatype MeshMapped " << endl;
    file << "P1c xphys P1c yphys P1c Hx P1c Hy" << endl; 
	for (int j=0;j<xx[].n ; j++) file << real(Xphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Xphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Rphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Rphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hx(xx[][j],yy[][j],ParamMap)) << endl << imag(Hx(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hy(xx[][j],yy[][j],ParamMap)) << endl << imag(Hy(xx[][j],yy[][j],ParamMap)) << endl;
    } 
    */
}; 	 
//EOM

macro SFWriteMapping(filename,TH)
{
    ofstream file(filename);    
    fespace p1forff2m(TH,P1); /* Mind to use TH (argument of macro) as the current mesh is not always called th ! */  
	p1forff2m xx,yy;
    xx=x;
    yy=y;
   	file << "### Data generated by Freefem++ ; " << endl;
    file << "physical coordinates resulting from mapping (possibly complex...)" << endl;
    file << "datatype MeshMapped " << endl;
    file << "P1c xphys P1c yphys P1c Hx P1c Hy" << endl; 
	for (int j=0;j<xx[].n ; j++) file << real(Xphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Xphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Rphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Rphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hx(xx[][j],yy[][j],ParamMap)) << endl << imag(Hx(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hy(xx[][j],yy[][j],ParamMap)) << endl << imag(Hy(xx[][j],yy[][j],ParamMap)) << endl;
}; 
//EOM


macro SFWriteBaseFlow(filename,u,typeFlow,iter)
	if(iter>=0)
	{
	fespace p1forff2m(th,P1);  
	p1forff2m xx,yy;
	xx=x;
	yy=y;
	/* p1forff2m<complex> xxphys; */
    p1forff2m<complex> ut,vt,pt,vort; 
    /* xxphys = xphys; */
	ut=u#x;
	vt=u#r;
	IFMACRO(ncomponentsBF,3) 
		p1forff2m wt ; 
		wt = u#phi; 
	ENDIFMACRO
	pt=u#p;
/*	vort=Gy*dy(u#x)-G*dx(u#r); */ /* vorticity */
/*	p1forff2m psi,phi;*/
/*	solve LapLace(psi,phi, solver = CG) */
/* 	= int2d(th)(dx(psi)*dx(phi)+dy(psi)*dy(phi)) */
/* 	- int2d(th)(-vort*phi) */
/* 	- int1d(th,bcinlet,bcoutflow,bcLat,bcwall)((-N.x*ux+N.y*uy)*phi); */   
	ofstream file(filename);
   	{
   	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow for an axisymmetric incompressible problem STORED AS COMPLEX" << endl;
    file << "datatype " << typeFlow << " datastoragemode CxP2P2P1.1 " << endl;
    IFMACRO(ncomponentsBF,2) file << "real Re P1c ux P1c ur P1c p real iter " ; ENDIFMACRO
    IFMACRO(ncomponentsBF,3) file << "real Re P1c ux P1c ur P1c uphi P1c p real iter " ; ENDIFMACRO
	string PostProcessBaseFlowDescription = " real Pup real Pout real Q1"; /* customizable output */ 
	file << PostProcessBaseFlowDescription << endl << endl ; 
	file << Re << endl;	
			for (int j=0;j<ut[].n ; j++) file << real(ut[][j]) << endl << imag(ut[][j]) << endl;
			for (int j=0;j<ut[].n ; j++) file << real(vt[][j]) << endl << imag(vt[][j]) << endl;
			IFMACRO(ncomponentsBF,3) for (int j=0;j<ut[].n ; j++) file << real(wt[][j]) << endl << imag(wt[][j]) << endl; ENDIFMACRO
			for (int j=0;j<ut[].n ; j++) file  << real(pt[][j]) << endl << imag(pt[][j]) << endl;
		/*	for (int j=0;j<ut[].n ; j++) file << real(vort[][j]) << endl << imag(vort[][j]) << endl;*/
			
			file << iter << endl << endl;
	cout << "#### customisable output for WHISTLING JET : " << endl; 
    file << real(u#p(-(SFGeomLcav+SFGeomep),SFGeomRcav)) << endl << real(u#p(0,SFGeomRext)) << endl; 
    file << real(FlowRate1(u))  << endl;
 	}
	}
	else
	{
	ofstream file(filename);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow NOT CONVERGED" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	};
//EOM
	
	
	
macro SFWriteMode(namefile,u,ev,shift,m,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;
		 yy=y;
    	 p1forff2m<complex> ux1,uy1,pp1,vort1;  		 
 		  file << "### Data generated by Freefem++ ; " << endl;
    	 file << "Eigenmode for an axisymmetric incompressible problem " << endl;
    	 file << "datatype " << typeFlow << " datastoragemode CxP2P2P1 " << endl;
    	 string descriptionFF;
    	 if(typeFlow=="EigenModeD"||typeFlow=="HarmonicMode")
    	 	{  descriptionFF="real Re int m complex Lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1"; }
    	 else 
    	    {  descriptionFF="real Re int m complex Lambda complex shift int iter P1c ux1Adj P1c uy1Adj P1c p1Adj P1c vort1Adj"; }
	     file << descriptionFF << endl << endl ; 
		 file << Re  << endl << m << endl << real(ev) << endl << imag(ev) << endl << real(shift) << endl << imag(shift) << " " << iter << endl << endl;
 		ux1=u#x;
		uy1=u#r;
		pp1=u#p;
		vort1=dY(u#x)-dX(u#r);
		
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << endl << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << endl << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << endl << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << endl << imag(vort1[][j]) << endl;
		
		cout << "#### customisable output for MODE OF A WHISTLING JET : " << endl; 

	
	/*	real AEnergyMode = sqrt(int2d(th)((abs(ux1)^2+abs(uy1)^2))*y*2*pi); 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;*/

	/*	complex CyMode = 8/pi*Portance(1i*m,u); */
	/*	cout << "#   Cy = " << CyMode << endl;*/
	/*	file << 2*real(CyMode) << " " << 2*imag(CyMode) << endl;*/
	/*	complex dP = deltaP(u);
		cout << "#   deltaP = " << dP << endl;
		file << real(dP) << endl << imag(dP) << endl; 
		complex Q1 = FlowRate1(u);
		cout << "#   Q1 = " << Q1 << endl;
		file << real(Q1) << endl << imag(Q1) << endl; */				
		};
//EOM	

macro SFWriteForced(namefile,u,ev)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;
		 yy=y;
    	 p1forff2m<complex> ux1,uy1,pp1,vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "FORCED LINEAR RESPONSE for an axisymmetric incompressible problem " << endl;
    	 file << "datatype " << "ForcedFlow" << " datastoragemode CxP2P2P1 " << endl;
    	 string descriptionFF;
    	 descriptionFF="real Re complex Lambda P1c ux1 P1c uy1 P1c p1 P1c vort1 real AEnergy complex Z"; 
    	
	     file << descriptionFF << endl << endl ; 
		 file << Re  << endl << real(ev) << endl << imag(ev) << endl << endl;
 		ux1=u#x;
		uy1=u#r;
		pp1=u#p;
		vort1=dy(u#x)-dx(u#r);
		
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << endl << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << endl << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << endl << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << endl << imag(vort1[][j]) << endl;
		
		cout << "#### customisable output for LINEAR FORCED RESPONSE OF A WHISTLING JET : " << endl; 

		real AEnergyMode = sqrt(int2d(th)((abs(ux1)^2+abs(uy1)^2))*y*2*pi); 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;

		complex Rate = 2*pi*int1d(th,1)(ux*y);
		complex Force = 2*pi*int1d(th,1)(y*up);
		complex pin = Force/(2*pi*int1d(th,1)(y)); 
		complex ZZ = (pin/Rate);
		cout << "#   Z = " << ZZ << endl;
		file << real(ZZ) << endl << imag(ZZ) << endl;			
		};
//EOM	






//macro PostProcessBaseFlowOutput(file,u1,u2,p)
	
