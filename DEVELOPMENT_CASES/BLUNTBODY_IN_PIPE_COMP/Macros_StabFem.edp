/// 
/// file Macros_StabFem.edp
///
/// This file contains the case-dependent Macros for boundary conditions and postprocessing output.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
/// boundary conditions : 
/// macro BoundaryconditionsBaseFlow(du,dp,dT,drho) 
/// macro BoundaryconditionsStability(du,us,dp,dT,drho,symmetry)
///
///
/// For post-processsing purposes :
/// macro SFWriteBaseFlow(filename,ux,uy,p,type,iter)
/// macro SFWriteMode(namefile,ux,uy,p,ev,shift,type,iter)
/// 
/// The following case is for the axisymmetric body and include the additional macros
/// required to compute lift and drag forces : Trainee(ux,uy,p,symmetry) and Portance(ux,uy,p,symmetry)
///
/// The file must also contain 


/// FIRST DEFINE THE SOLVER : IF AVAILABLE MUMPS WILL STRONGLY SPEED UP THE COMPUTATIONS.
/// IF MUMPS_seg is not insalled 

// TODO! WRITE HERE THE VARIABLES OF THE MESH
IFMACRO(!EIGENSOLVER)
macro EIGENSOLVER SLEPC// POSSIBLE OPTIONS : DEFAULT, MUMPS, UMPFACK (to be avoided), SLEPC (not yet implemented)
ENDIFMACRO

IFMACRO(SOLVER,MUMPS )
load "MUMPS_seq" 
cout << " USING MUMPS_seq" << endl;
ENDIFMACRO
// END DEFINITION OF SOLVER

IFMACRO(!VTK)
macro VTK YES //
ENDIFMACRO

IFMACRO(!PROBLEM)
macro PROBLEM BLUNTBODY //
ENDIFMACRO


// I am starting to hate MACROS IFMACRO(STH,VALUE ) works IFMACRO(STH,VALUE) doesn't!!!!!!
IFMACRO(VTK,YES )
load "../../SOURCES_OTHER/VTK/iovtk"
ENDIFMACRO


// Azimuthal number

real m = 0;

// Boundaries
int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6,bcslipwall =5;

string ffdatadir = "./WORK/";
// TODO!
string symmetryBaseFlow = 1; // symmetry propery of base flow :; set "A" (0) antisymmetric set "S"(1) if domain is hzalf domain and "N" (2) if it is full domain


macro Hx(x,y,ParamMap) 
    (
    (x<ParamMap#x0 && x>-ParamMap#x1)?1:
    (x>ParamMap#x0)*
    (1.0/((1i*ParamMap#GC*(1.0/cosh((x-ParamMap#x0)^2/(4*ParamMap#LC^2)))^2
    *(x-ParamMap#x0)^2)/(2*ParamMap#LC^2*(1-(x-ParamMap#x0)^2/ParamMap#LA^2)^2)
	+(4*(1i*ParamMap#GC*tanh((x-ParamMap#x0)^2/(4*ParamMap#LC^2))+1)*(x-ParamMap#x0)^2)
	/(ParamMap#LA^2*(1-(x-ParamMap#x0)^2/ParamMap#LA^2)^3)
	+(1i*ParamMap#GC*tanh((x-ParamMap#x0)^2/(4*ParamMap#LC^2))+1)/(1-(x-ParamMap#x0)^2/ParamMap#LA^2)^2))
	+(x<-ParamMap#x1)*
	(1.0/((1i*ParamMap#GC*(1.0/cosh((x+ParamMap#x1)^2/(4*ParamMap#LC^2)))^2
    *(x+ParamMap#x1)^2)/(2*ParamMap#LC^2*(1-(x+ParamMap#x1)^2/ParamMap#LA^2)^2)
	+(4*(1i*ParamMap#GC*tanh((x+ParamMap#x1)^2/(4*ParamMap#LC^2))+1)*(x+ParamMap#x1)^2)
	/(ParamMap#LA^2*(1-(x+ParamMap#x1)^2/ParamMap#LA^2)^3)
	+(1i*ParamMap#GC*tanh((x+ParamMap#x1)^2/(4*ParamMap#LC^2))+1)/(1-(x+ParamMap#x1)^2/ParamMap#LA^2)^2))
    )//EOM



 macro Hy(x,y,ParamMap) 
    ( 
    (y<ParamMap#yo)?1:(1.0/((1i*ParamMap#GCy*(1.0/cosh((y-ParamMap#yo)^2/(4*ParamMap#LCy^2)))^2
    *(y-ParamMap#yo)^2)/(2*ParamMap#LCy^2*(1-(y-ParamMap#yo)^2/ParamMap#LAy^2)^2)
	+(4*(1i*ParamMap#GCy*tanh((y-ParamMap#yo)^2/(4*ParamMap#LCy^2))+1)*(y-ParamMap#yo)^2)
	/(ParamMap#LAy^2*(1-(y-ParamMap#yo)^2/ParamMap#LAy^2)^3)
	+(1i*ParamMap#GCy*tanh((y-ParamMap#yo)^2/(4*ParamMap#LCy^2))+1)/(1-(y-ParamMap#yo)^2/ParamMap#LAy^2)^2))
	)//EOM


macro Xphys(x,y,ParamMap) 
   	(
   	(x<ParamMap#x0 && x>-ParamMap#x1)?x:
   	(x>ParamMap#x0)*(ParamMap#x0+(x-ParamMap#x0)/(1-(x-ParamMap#x0)^2/(ParamMap#LA)^2)^2
   					*(1+1i*ParamMap#GC*tanh((x-ParamMap#x0)^2/(2*ParamMap#LC^2)))) +
 	(x<-ParamMap#x1)*(ParamMap#x1+(x+ParamMap#x1)/(1-(x+ParamMap#x1)^2/(ParamMap#LA)^2)^2
   					*(1+1i*ParamMap#GC*tanh((x+ParamMap#x1)^2/(2*ParamMap#LC^2))))
   	)//EOM
   	
macro Rphys(x,y,ParamMap)
	( 
   	(y<ParamMap#yo)?y:(ParamMap#yo+(y-ParamMap#yo)/(1-(y-ParamMap#yo)^2/(ParamMap#LAy)^2)^2
   					*(1+1i*ParamMap#GCy*tanh((y-ParamMap#yo)^2/(2*ParamMap#LCy^2))) )
   	)//EOM

macro Dx(a) Hx(x,y,ParamMap)*dx(a) //EOM
macro Dy(a) Hy(x,y,ParamMap)*dy(a) //EOM
	
// Jacobian of the coordinate change
macro JJ 1/(Hx(x,y,ParamMap)*Hy(x,y,ParamMap)) //EOM

/////////////////////////////////////////////////////////////////////////////////////////////

macro Uinlet(y) (2*(1-y^2/SFGeomRpipe^2)*(SFGeomtypeinlet=="Poiseuille")+1*(SFGeomtypeinlet=="Constant")) //

macro BoundaryconditionsBaseFlow(du,dp,dT,drho,v,rho,T,Uinlet)
	         on(1,du#x=1.0-Ubx,du#y=0.0-Uby,du#z=0.0-Ubz,drho=1.-Rhob)
	         + on(4,du#x=1.0-Ubx,du#y=0.0-Uby,du#z=0.0-Ubz,drho=1.-Rhob)
	         + on(2,21,22,23,du#x=0.0-Ubx,duy=0.0-Uby,du#z=0.0-Ubz,drho=1.-Rhob)
	         + on(5,6,du#y=-Uby)
//EOM 


macro BoundaryconditionsStability(du,us,dp,dT,drho,symmetry)
	         on(1,du#x=0.0,du#y=0.0,du#z=0.0,drho=0.0,dT=0.0) 
	         + on(4,du#x=0.0,du#y=0.0,du#z=0.0,drho=0.0,dT=0.0) 
	         + on(2,21,22,23,du#x=0.0,du#y=0.0,du#z=0.0) 
             + int1d(th,5,6)(((du#x*us#x + dT*Ts + drho*rhos)*1e30*(abs(m)>0)
             	+(du#y*us#y)*1e30*(abs(m)!=1)))       
             //EOM
// HERE ARE SOME MACROS WHICH ARE USEFUL FOR POST-PROCESSING WITH A AXISYMMETRIC FLOW 

macro Trainee(u,symmetry)   
	(
	(1*(symmetry==2)+2*(symmetry==1))
	*(
	int1d(th,2,21,22,23)((u#p)/(gamma*Ma^2)*N.x)
	-nu*int1d(th,2,21,22,23)( (((4./3.)*dx(u#x) - (2./3.)*dy(u#y))*N.x+ (dx(u#y)+dy(u#x))*N.y))
	)
	)
//EOM

macro Portance(u,symmetry)   
	(
	(1*(symmetry==2)+2*(symmetry==0))
	*(
	int1d(th,2,21,22,23)(((u#p)/(gamma*Ma^2))*N.y)
	-nu*int1d(th,2,21,22,23)( (((4./3.)*dy(u#y) - (2./3.)*dx(u#x))*N.y+(dx(u#y)+dy(u#x))*N.x))
	)
	)
//EOM



macro SFWriteMesh(filename,TH)
{
     ofstream fileFF(filename);
     fileFF << "### Data generated by Freefem++ ; " << endl;
     fileFF << "Mesh for the flow around a axisymmetric" << endl;
     fileFF << "datatype Mesh meshtype 2D" << endl;
	 fileFF << "int np int Ndof real deltamin real deltamax" ;
	 string PostProcessMeshDescription = " real deltaA real deltaB real deltaC real deltaD" ; /*description of customizable part*/
	 fileFF << PostProcessMeshDescription << endl << endl ;
     fespace femp1N(TH,P1);
     fespace femp2xfemp2xfemp1N(TH,[P2,P2,P1]);	  
     femp2xfemp2xfemp1N [uNx,uNy,uNp];
	 fileFF << TH.nv <<  endl << uNx[].n << endl ;
 	 cout << "#### Mesh information :" << endl;  
     cout << "## Number of vertices    " << TH.nv <<  endl;
	 cout << "## Number of DOF : " << uNx[].n << endl << endl;  
 	 femp1N delta = hTriangle;
	cout << "## delta min : " << delta[].min << endl;
	cout << "## delta max : " << delta[].max << endl;
	fileFF << delta[].min << endl;
	fileFF << delta[].max << endl;   
    /*Next is customizable part ; here determination of the grid size at several points */
    real[int] xprobe = [0,	2.5,	4,	10];
    real[int] yprobe = [.5, 	.5,	0,	0]; 
	cout << "## delta(0,.5) : ( boundary layer) : " << delta(xprobe(0),yprobe(0)) << endl ;
	cout << "## delta(2.5,.5) : ( sensitivity) : " << delta(xprobe(1),yprobe(1)) << endl ;
	cout << "## delta(4,0) : ( wake ) : " << delta(xprobe(2),yprobe(2)) << endl << endl ;
    cout << "## delta(10,0) : ( far wake ) : " << delta(xprobe(3),yprobe(3)) << endl << endl ;
	for(int ii = 0; ii<4;ii++){ fileFF << delta(xprobe(ii),yprobe(ii)) << endl ;}	
 
}; 	 
//EOM



macro SFWriteBaseFlow(filename,u,typeFlow,iter)
	if(iter>=0)
	{
	fespace p1forff2m(th,P1);  
	p1forff2m xx,yy;
	xx=x;
	yy=y;
    p1forff2m ut,vt,wt,pt,Tt,rhot,vort,rhovort;
	ut=u#x;
	vt=u#y;
	wt=u#z;
	pt=u#p;
	Tt=u#temp;
	rhot=u#ro;
	vort=dy(u#x)-dx(u#y); /* vorticity */
	rhovort=(dy(u#ro)*u#x+dy(u#x)*u#ro)-(dx(u#ro)*u#y+u#ro*dx(u#y)); /* vorticity */
	p1forff2m psi,phi;
	/*
	problem streamlines(psi,phi)
	= int2d(th)(dx(psi)*dx(phi)+dy(psi)*dy(phi)+psi*dy(phi)/y)
	- int2d(th)(-rhovort*phi)
 	-  int1d(th,bcaxis)(dx(psi)*phi*1e30)
 	+  on(bcinlettop,psi=0)
 	+  on(bcinletsponge,psi=flux)
 	+  on(bcoutletsponge,psi=fluxout);
 	streamlines; 
 	*/
	ofstream file(filename);
   	{
    file << "### Data generated by Freefem++ ; " << endl;
    file << typeFlow << " for a axi-compressible problem " << endl;
    file << "datatype " << typeFlow << " datastoragemode CxP2P2P2P1P1P1 " << endl;
	file << "real Re real Ma P1 ux P1 uy P1 uz P1 p P1 T P1 rho P1 vort P1 psi real iter " ;
	string PostProcessBaseFlowDescription = "real Fx real Lx"; /* customizable output */ 
	file << PostProcessBaseFlowDescription << endl << endl ; 
	file << Re << endl;
	file << Ma << endl;
			for (int j=0;j<ut[].n ; j++) file << ut[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << wt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << pt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << Tt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << rhot[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vort[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << psi[][j] << endl;
			file << iter << endl;
	
	cout << "#### customisable output for axisymmetric body : " << endl; 
    /* Calcul de la trainee */
    real DragMode = Trainee(u,symmetryBaseFlow);
	cout << "#    Fx =  " << DragMode << endl; 
    file << DragMode << " " ; 
    real Lx, Uap, Uav;
    if(iter>0)
    {
    /* mesure de la longueur de recirculation */
		{
		real dx = 0.001;real Uav = -2e-10;real Uap=-1e-10;int ix;
			for(ix=1;ix<20000;ix++)
			{   
				Uap =u#x(0.5+ix*dx,0);
				if(Uap*Uav<0){break;};
				Uav = Uap;	
			}
			real xav = 0.5+(ix-1)*dx; 
			real xap = 0.5+ix*dx;
			Lx = xav *(Uap)/(Uap-Uav) + xap *(-Uav)/(Uap-Uav);
		}	
    }
    else
    { 
    	Lx = 0;
    };
    cout << "#    Recirculation length = " << Lx << endl << endl; 
		file << Lx << endl;
     
	}
	}
	else
	{
	ofstream file(filename);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow NOT CONVERGED" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	};
//EOM
	
macro SFWriteMapping(filename,TH)
{
    ofstream file(filename);    
    fespace p1forff2m(TH,P1); /* Mind to use TH (argument of macro) as the current mesh is not always called th ! */  
	p1forff2m xx,yy;
    xx=x;
    yy=y;
   	file << "### Data generated by Freefem++ ; " << endl;
    file << "physical coordinates resulting from mapping (possibly complex...)" << endl;
    file << "datatype MeshMapped " << endl;
    file << "P1c xphys P1c yphys P1c Hx P1c Hy ";
    file << "real ParamMapx0 real ParamMapx1 real ParamMapLA real ParamMapLC real ParamMapGC real ParamMapGCy real ParamMapyo real ParamMapLAy real  ParamMapLCy" << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Xphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Xphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Rphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Rphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hx(xx[][j],yy[][j],ParamMap)) << endl << imag(Hx(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hy(xx[][j],yy[][j],ParamMap)) << endl << imag(Hy(xx[][j],yy[][j],ParamMap)) << endl;
    file << endl;
    file << ParamMapx0 << endl << ParamMapx1 << endl << ParamMapLA << endl << ParamMapLC << endl << ParamMapGC << endl;
    file << ParamMapGCy << endl << ParamMapyo << endl << ParamMapLAy <<  endl << ParamMapLCy <<  endl ;
}; 
//EOM

macro SFWriteMode(namefile,u,ev,shift,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;
		 yy=y;
		 p1forff2m<complex> ux1,uy1,pp1,vort1,rho1,T1;
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "Eigenmode for a axisymmetric-compressible problem " << endl;
    	 file << "datatype " << typeFlow <<" datastoragemode CxP2P2P2P1P1P1 " << endl;
    	 string descriptionFF;
    	 if(typeFlow=="EigenModeD"||typeFlow=="HarmonicMode")
    	 	{  descriptionFF="real Re complex lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 P1c rho1 P1c T1 real AEnergy complex Fy"; }
    	 else if(typeFlow=="EigenModeA") 
    	    {  descriptionFF="real Re complex lambda complex shift int iter P1c ux1Adj P1c uy1Adj P1c p1Adj P1c vort1Adj P1c rho1Adj P1c T1Adj real AEnergyAdj complex FyAdj"; }
    	 else if(typeFlow=="SecondHarmonicMode") 
    	    {  descriptionFF="real Re complex lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 real AEnergy complex Fx"; }
	   	file << descriptionFF << endl << endl ; 
		file << Re  << endl << real(ev) << " " << imag(ev) << " " << real(shift) << " " << imag(shift) << " " << iter << endl << endl;
 		ux1=u#x;
		uy1=u#y;
		pp1=u#p;
		rho1 =u#rho;
		T1 = u#T;
		vort1=dy(u#x)-dx(u#y);
		
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(rho1[][j]) << " " << imag(rho1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(T1[][j]) << " " << imag(T1[][j]) << endl;
		
		file << endl;
		if(typeFlow=="EigenModeD"||typeFlow=="EigenModeA")
		{
		cout << "#### customisable output for a mode in the WAKE OF A axisymmetric BLUFF BODY : " << endl; 
		real AEnergyMode = sqrt(int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex LiftMode = Portance(u,2); 
		cout << "#   Fy = " << LiftMode << " exp( lambda t) + c.c. " << endl;
		file << real(LiftMode) << " " << imag(LiftMode) << endl;
		}
		if(typeFlow=="HarmonicMode")
		{
		cout << "#### customisable output for a SC mode in the axisymmetric BODY : " << endl; 
		real AEnergyMode = sqrt(0.5*int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));  /* here factor 1 because 2 half domaines and time-average of cos^2 and sin^2 = 1/2. */ 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex LiftMode = Portance(u,2); 
		cout << "#   Fy = " << real(LiftMode) << " * cos( omega t) + " << -imag(LiftMode) << " * sin( omega t) + "  << endl;
		file << real(LiftMode) << " " << imag(LiftMode) << endl;
		}
		if(typeFlow=="SecondHarmonicMode")
		{
		cout << "#### customisable output for a HB-2 mode in the axisymmetric BODY : " << endl; 
		real AEnergyMode = sqrt(0.5*int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));  /* here factor 1 because 2 half domaines and time-average of cos^2 and sin^2 = 1/2. */ 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex DragMode = Trainee(u,2); 
		cout << "#   Fx = " << real(DragMode) << " * cos( 2 omega t) + " << -imag(DragMode) << " * sin( 2 omega t) + "  << endl;
		file << real(DragMode) << " " << imag(DragMode) << endl;
		}
		
		
		
		};
//EOM	


//macro PostProcessBaseFlowOutput(file,u1,u2,p)
	
