/// 
/// file Macros_StabFem.edp
///
/// This file contains the case-dependent Macros for boundary conditions and postprocessing output.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
///
///
/// For post-processsing purposes :
/// macro SFWriteBaseFlow
/// macro SFWriteMode
/// 


/// The following case is for Liquid bridges. In this case, the case-dependend options also comprises
/// parameters "typestart", "typeend", 'surfaceorder" and "anglecut" which are required by the macros in Macro_Geometry_FreeSurface.edp


string ffdatadir = "./WORK/";

IFMACRO(!FREEFEMPLOTS)
macro FREEFEMPLOTS  YES //EOM
ENDIFMACRO 

IFMACRO(!EIGENSOLVER)
macro EIGENSOLVER SLEPC //EOM
ENDIFMACRO


/// PARAMETRES NECESSAIRES POUR LES MACROS GEOMETRIE DE SURFACE
string surfaceorder="reverse"; /// possibilities : "direct", "reverse" (use reverse to fit with matlab "meniscus" program);
int anglecut=1; // position of the "cut" in the tan2 determination. use 2 for sessile drops and 1 vessel
string matrixconstruction = "composite"; // how to assembly the matrices. Either "block" or "composite".
string typesurfacemesh = "plain"; // select "empty" for empymesh(th), "plain" for th 
// typestart and typeend now moved in eigenvlue solver


/// THE FOLLOWING IS THE USUAL POST PROCESSING MACROS

macro SFWriteMesh(filename,th)
{
real VolMesh = 2*pi*int2d(th)(x); 
real AreaMesh = 2*pi*int1d(th,2)(x);

            ofstream file(filename); 
			file << "Data generated by FreeFem++" << endl;
            file << "Description of the mesh" << endl;
			file << "datatype Mesh meshtype 2D" << endl;
            file << "int nsurf " ;
			file << "real P0 real Vol real Area real L "; 
			file << "real gamma real rhog real Uref real nu "; /* physical parameters (also written in BaseFlow file) */
			file << " P1surf xsurf P1surf ysurf P1surf S0 P1surf N0r P1surf N0z P1surf K0a P1surf K0b P1surf alpha" << endl;
			file << Nsurface+1  << endl;
			file << PP0 << endl << VolMesh << endl << AreaMesh << endl << abs(yPointSurf(Nsurface)-yPointSurf(0)) << endl;
			file << gamma << endl << dpdz << endl << 0 << endl << 0 << endl;
			file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << xPointSurf(ksurf) << endl;} file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << yPointSurf(ksurf) << endl;} file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << S0PointSurf(ksurf) << endl;} file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << N0r(xPointSurf(ksurf), yPointSurf(ksurf) ) << endl;} file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << N0z(xPointSurf(ksurf), yPointSurf(ksurf) ) << endl;} file << endl;
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << K0aPointSurf(ksurf) << endl;} file << endl;			
			for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << K0bPointSurf(ksurf) << endl;} file << endl;
            for(int ksurf=0;ksurf<Nsurface+1;ksurf++) { file << alphaPointSurf(ksurf) << endl;} file << endl;
}
//EOM


macro SFWriteBaseFlow(filename,phi) /* Actually this one is not needed here since there is no base flow... to be cleaned */
	{
	ofstream file(filename);
	fespace P1forfile(th,P1);
	P1forfile phiP1=phi;
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Base flow over a bubble" << endl;
    file << "Format : " << endl;
    file << "real gamma real rhog real Uref real nu "; /* physical parameters (also written in mesh file) */
	file << "P1 phi" << endl << endl ; 
	file << 1 << endl << dpdz << endl << 0 << endl << 0 << endl;
			{ for (int j=0; j<phiP1[].n ; j++) file << phiP1[][j] << endl;	}; 
}	

//EOM
	
	
	
macro SFWriteModePotential(namefile,MODE,ev)
  {	
   	fespace P1forfile(th,P1);
    P1forfile<complex> ModePhiforfile,ModeEtaforfile,DETAsurDS,testDS;
    ModePhiforfile=MODE#phi;
    ModeEtaforfile=MODE#eta;
    P1forfile<complex> urforfile,uzforfile,utforfile;
    urforfile = dx(MODE#phi);
    uzforfile = dy(MODE#phi);
    utforfile = 1i*m*MODE#phi;
    /*solve calcds(DETAsurDS,testDS) =int2d(th)(1e-10*DETAsurDS*testDS)+int2d(th,2)(DETAsurDS*testDS)-int2d(th,2)(Ds(ModeEtaforfile)*testDS);*/
    DETAsurDS = Ds(ModeEtaforfile); /* Marche p? non plus  :(  */
   	{
	ofstream file(namefile);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Eigenmode of a free-surface problem (INVISCID, POTENTIAL)" << endl;
    file << "datatype Eigenmode datastoragemode CxP1P1.0 " << endl;	
	file << "complex lambda P1c phi P1c ur P1c uz P1surfc eta P1surfc DetaDs" << endl << endl ;
	file << real(ev) <<  endl << imag(ev) << endl << endl; 
	for(int j=0; j<ModePhiforfile[].n ; j++) file << real(ModePhiforfile[][j]) << endl << imag(ModePhiforfile[][j]) << endl;
	for(int j=0; j<ModePhiforfile[].n ; j++) file << real(urforfile[][j]) << endl << imag(urforfile[][j]) << endl;	
	for(int j=0; j<ModePhiforfile[].n ; j++) file << real(uzforfile[][j]) << endl << imag(uzforfile[][j]) << endl;		
	file << endl;
	for(int ksurf=0;ksurf<Nsurface+1;ksurf++) 
	     { file << real(ModeEtaforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl ;
	       file << imag(ModeEtaforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl; 
   	     }; 
	file << endl;
    for(int ksurf=0;ksurf<Nsurface+1;ksurf++) 
	     { file << real(DETAsurDS(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl ;
	       file << imag(DETAsurDS(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl; 
   	     }; 
	file << endl;
   };
  }
//EOM	


	
macro SFWriteMode(namefile,MODE,ev)
  {	
   	fespace P1forfile(th,P1);
    P1forfile<complex> Urforfile,Uzforfile,Utforfile,Upforfile,Etaforfile,K1forfile,UNforfile;
    Urforfile=MODE#r;
    Uzforfile=MODE#z;
    Utforfile=MODE#phi;
    Upforfile=MODE#p;
    Etaforfile=MODE#eta;
    K1forfile=MODE#k1;
    UNforfile = N0r*MODE#r+N0z*MODE#z;
   	{
	ofstream file(namefile);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Eigenmode of a free-surface problem (VISCOUS)" << endl;
    file << "Format : " << endl;	
	file << "complex lambda P1c ur1 P1c uz1 P1c ut1 P1c p1 P1surfc eta P1surfc K1 P1surfc uN" << endl << endl ;
	file << real(ev) <<  endl << imag(ev) << endl << endl; 
	for(int j=0; j<Urforfile[].n ; j++) file << real(Urforfile[][j]) << endl << imag(Urforfile[][j]) << endl; file << endl;
	for(int j=0; j<Urforfile[].n ; j++) file << real(Uzforfile[][j]) << endl << imag(Uzforfile[][j]) << endl; file << endl;
	for(int j=0; j<Urforfile[].n ; j++) file << real(Utforfile[][j]) << endl << imag(Utforfile[][j]) << endl; file << endl;
	for(int j=0; j<Urforfile[].n ; j++) file << real(Upforfile[][j]) << endl << imag(Upforfile[][j]) << endl; file << endl;	
	for(int ksurf=0;ksurf<Nsurface+1;ksurf++) 
	     { file << real(Etaforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl;
	       file << imag(Etaforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl; 
   	     };
	file << endl;
		for(int ksurf=0;ksurf<Nsurface+1;ksurf++) 
	     { file << real(K1forfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl;
	       file << imag(K1forfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl; 
   	     };
    file << endl;
		for(int ksurf=0;ksurf<Nsurface+1;ksurf++) 
	     { file << real(UNforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl;
	       file << imag(UNforfile(xPointSurf(ksurf), yPointSurf(ksurf) )) << endl; 
   	     };
	file << endl;
	
   };
  }
//EOM	



macro BoundaryconditionsStability(u,v,m)
	           on(bcinlet,u#x=0,u#r=0.0,u#phi=0.0)
	          + on(5,u#r=0.0) 
             + on(2,u#x=0.0,u#r=0.0,u#phi=0.0) 
             /*IFMACRO(ncomponentsBF,3)+ on(2,21,22,23,u#phi=0.0) ENDIFMACRO*/
             + int1d(th,bcaxis)(u#x*v#x*1e30*(abs(m)>0)
                               +(u#r*v#r+u#phi*v#phi)*1e30*(abs(m)!=1))       
//EOM



//macro PostProcessBaseFlowOutput(file,u1,u2,p)
	
