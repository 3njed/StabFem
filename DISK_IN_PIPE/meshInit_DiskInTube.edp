//
//  PROGRAM mesh.edp
//
//  Example of mesh generator for StabFem 
//
//  OUTPUT FILES :
// 		mesh.msh 			->  mesh in Freefem format
//		mesh.ff2m 		->  descriptor 
//      BaseFlow_guess.txt 	->  base flow used to start first newton iteration
//      BaseFlow.ff2m 	->  (ff2m format)
//
//	convention for boundary conditions :
//  1 = inlet ; 2 (and 21,22,23) = wall ; 3 = outlet ; 6 = axis

//  D. Fabre, June 2017
include "Macros_StabFem.edp";




		real S = 0.666;
		
		real l2=8; 
		real l1=4; 
		real h1=0.5/S;
		real l2b=5; 
		real l1b=1; 
	
		real x0=0.;	 	// centre en x de l'ellipse
		real y0=0.;		// centre en y de l'ellipse
		real rayon = 0.5;
		real ep = 0.333333333;
		real epsilon=1e-16;
	        real stretch = 1.2; 
		real l2real = l2b+(l2-l2b)^stretch;
		real l1real = l1b+(l1-l1b)^stretch;
	
		real l1g = 6;
		real l2g = 10;
		real fX = 0.4;
		real fY = 0.4;
		
		cout << "dimensions reelles domaine : " << -l1real << " a " << l2real << " et 0 a " << h1 << endl;
		

                border a1(t=-(l1-l1b),0){ x=-l1b-(-t)^stretch; y=0;label=6;};
                border a2(t=-l1b,x0-ep/2){ x=t; y=0;label=6;};
	
                border obs1(t=0.,1.){x=x0-ep/2; y=y0+rayon*t*(1+fX*(1-t^2));label=21;};
                border obs2(t=-1,1){x=ep/2*t*(1+fY*(1-t^2)); y=y0+rayon;label=22;};
                border obs3(t=1.,0.){x=x0+ep/2; y=y0+rayon*t*(1+fX*(1-t^2));label=23;};
		
		border a3(t=x0+ep/2,l2b){ x=t; y=0;label=6;};
                border a4(t=0,l2-l2b){ x=l2b+t^stretch; y=0;label=6;};
		
		border b(t=0,h1){ x=l2real; y=t; label=3; };
         
		
		border c1(t=0,-(l1-l1b)){ x=-l1b-(-t)^stretch; y=h1;label=1;};
                border c2(t=l2b,-l1b){ x=t; y=h1;label=1;};
		border c3(t=(l2-l2b),0){ x=l2b+t^stretch; y=h1;label=1;};
              
		border d(t=h1,0){ x=-l1real; y=t;label=1;};



                int l=6;  // densite frontieres ext
                int m=6;  // densite zone proche axe
                int o=25; // densite boite centrale 
                int n=30; //densite obstacle faces frontales
 		int n2 = 30; // densité obstacle face laterale 

                mesh th;

               
               th=buildmesh(a1((-l1b+l1)*m)+a2((x0-rayon+l1b)*o*2)
               +a3((l2b-x0-rayon)*o)+a4((l2-l2b)*m)+b(h1*m)+d(h1*m)
	       +obs1(n*rayon)+obs2(n2*ep)+obs3(n*rayon)  +c1((l1-l1b)*m)+ c2((l1b+l2b)*o)+c3((l2-l2b)*m));
	       
		plot(th,wait=1);

	
// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometrical parameters for StabFem. Problem type : " << endl;
			file << "AxiXR" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real Rdisk real Hdisk real Rpipe real Xmin real Xmax" << endl;
			file <<  rayon  << endl << ep << endl << h1 << endl << -l1real << endl << l2real << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)



// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,ur,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ur[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",0);
	     


