//   This is part of StabFem package by D. Fabre (june 2017) 
//
//   CODE GENERIQUE POUR APPROCHE FAIBLEMENT NON LINEAIRE d'UN ECOULEMENT AXI
//  
//  Références : Meliga, Tchoufag, etc...
//
//



verbosity = 0;
mesh th=readmesh("mesh.msh");
fespace p2(th,P2);
fespace p1(th,P1);
fespace p0(th,P0);
fespace p2xp2xp1(th,[P2,P2,P1]);
fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
fespace p2xp2xp2(th,[P2,P2,P2]);
real Re, Rec, sigmara, sigmaia, sigmarB, sigmaiB,nu;
real omegaE;
int mE;
p2xp2xp1 [urp,uzp,pp];// base flow at Rec=1/2(RecA+RecB)
p2xp2xp2xp1<complex> [FrE,FtE,FzE,FpE]; // terme de forcage 
p2xp2xp2xp1<complex> [urE,utE,uzE,pE],[vrC,vtC,vzC,qC];
p2 yy=y+1e-12;


/// CHAPITRE 0 : MACROS ET DEFINITIONS
///

// MACROS POUR OBJET 3D (sphere, disque, etc...)

// TRAINEE POUR UN ECOULEMENT AXI (ur,uz,p)
macro Trainee(ur,uz,p)   
	(
	int1d(th,2,21,22,23)(p*2*pi*y*N.x)
	-nu*int1d(th,2,21,22,23)( (2*dx(uz)*N.x+(dx(ur)+dy(uz))*N.y)*2*pi*y)
	)
//

// PORTANCE COMPLEXE POUR UN ECOULEMENT M=1 (ur,ut,uz,p)
macro Portance(ur,ut,uz,p)
  	(
	int1d(th,2,21,22,23)(p*N.y*y*pi)
 	- nu*int1d(th,2,21,22,23)( ( 2*dy(ur)*N.y + (dy(uz)+dx(ur))*N.x ) *pi*y) 
	+1i* nu*int1d(th,2,21,22,23)( ( (dy(ut)-ut/y)*N.y + (dx(ut))*N.x ) *pi*y)
	)
//

// COUPLE COMPLEXE POUR UN ECOULEMENT M=1
macro Couple(ur,ut,uz,p) 
        (
	int1d(th,2,21,22,23)(p*pi*y*(N.y*x-N.x*y))
	- nu *   int1d(th,2,21,22,23)( ((2*dy(ur)*N.y + (dy(uz)+dx(ur))*N.x)*x -(2*dx(uz)*N.x + (dy(uz)+dx(ur))*N.y)*y )*pi*y) 
	+1i*nu * int1d(th,2,21,22,23)( ( (dy(ut)-ut/y+1i*1*ur/y)*N.y + (dx(ut)+1i*1/y*uz)*N.x )*x * pi*y) 
	)
//


// MACROS POUR JET SIFFLANT

// Flow rate accross hole
macro FluxHole1(ur,ut,uz,p)
	( 
	2*pi*int1d(th,91)(uz*y)
	)
//
macro UMeanHole1(ur,ut,uz,p)
	( 
	int1d(th,91)(uz*y)/(int1d(th,91)(y)+1e-30)
	)

macro DeltaP(ur,ut,uz,p)
	( 
	p(-5,5)-p(+15,5)
	)
//

/// MACRO POUR OPERATEUR DE CONVECTION C_(m,n) (u1,u2)
///

macro CMN(m1,ur1,ut1,uz1,m2,ur2,ut2,uz2)  
[ y*(uz2*dx(ur1)+uz1*dx(ur2)+ur1*dy(ur2)+ur2*dy(ur1)) 
-2*ut1*ut2 +1i*m1*ut2*ur1 + 1i*m2*ut1*ur2 , 
y*(uz2*dx(ut1)+uz1*dx(ut2)+ur1*dy(ut2)+ur2*dy(ut1) )
+(ur2*ut1+ur1*ut2)+1i*m1*(ut1*ut2)+1i*m2*(ut1*ut2),
y*(uz2*dx(uz1)+uz1*dx(uz2)+ur1*dy(uz2)+ur2*dy(uz1) )
+1i*m1*ut2*uz1 + 1i*m2*ut1*uz2 ,  0 ]
//


// DECLARATION DES PROBLEMES ELEMENTAIRES
//
// FORME GENERIQUE : (B omegaE + A) uE = FE
//		

		problem NSELEMm0([urE,utE,uzE,pE],[vrC,vtC,vzC,qC]) = 
		int2d(th)(
		omegaE*(vrC*urE+vtC*utE+vzC*uzE)*0	
		+  y*vzC*(uzp*dx(uzE)+uzE*dx(uzp)+urp*dy(uzE)+urE*dy(uzp))
		+ y*vrC*(uzp*dx(urE)+uzE*dx(urp)+urp*dy(urE)+urE*dy(urp))
		+ y*vtC*(uzp*dx(utE)+urp*dy(utE)+urp*utE/y)
		+ nu*(   y*dx(uzE)*dx(vzC)+y*dy(uzE)*dy(vzC)+0^2/y*uzE*vzC  
	               + y*dx(utE)*dx(vtC)+y*dy(utE)*dy(vtC)+(0^2+1)/y*utE*vtC  
	               + y*dx(urE)*dx(vrC)+y*dy(urE)*dy(vrC)+(0^2+1)/y*urE*vrC  
	               + 2i*0*vrC*utE/y-2i*0*vtC*urE/y)  
	        - pE*(y*dx(vzC)+vrC+y*dy(vrC)-1i*0*vtC)
	        + qC*(y*dx(uzE)+urE+y*dy(urE)+1i*0*utE)
		)
		- int2d(th)(vrC*FrE+vtC*FtE+vzC*FzE)
	  	+ on(1,2,21,22,23,urE=0.,utE=0.,uzE=0.)	
		+ on(4,urE=0.)
		+ on(6,urE=0.,utE=0.); // CAR FORCAGE AXI
		
		problem NSELEMm1([urE,utE,uzE,pE],[vrC,vtC,vzC,qC]) = 
		int2d(th)(
		omegaE*(vrC*urE+vtC*utE+vzC*uzE)*0	
		+  y*vzC*(uzp*dx(uzE)+uzE*dx(uzp)+urp*dy(uzE)+urE*dy(uzp))
		+ y*vrC*(uzp*dx(urE)+uzE*dx(urp)+urp*dy(urE)+urE*dy(urp))
		+ y*vtC*(uzp*dx(utE)+urp*dy(utE)+urp*utE/y)
		+ nu*(   y*dx(uzE)*dx(vzC)+y*dy(uzE)*dy(vzC)+1^2/y*uzE*vzC  
	               + y*dx(utE)*dx(vtC)+y*dy(utE)*dy(vtC)+(1^2+1)/y*utE*vtC  
	               + y*dx(urE)*dx(vrC)+y*dy(urE)*dy(vrC)+(1^2+1)/y*urE*vrC  
	               + 2i*1*vrC*utE/y-2i*1*vtC*urE/y)  
	        - pE*(y*dx(vzC)+vrC+y*dy(vrC)-1i*1*vtC)
	        + qC*(y*dx(uzE)+urE+y*dy(urE)+1i*1*utE)
		)
		- int2d(th)(vrC*FrE+vtC*FtE+vzC*FzE)
	  	+ on(1,2,21,22,23,urE=0.,utE=0.,uzE=0.)	
		+ on(4,urE=0.)
		+ on(6,uzE=0.); // M=1
		
		problem NSELEMm2([urE,utE,uzE,pE],[vrC,vtC,vzC,qC]) = 
		int2d(th)(
		omegaE*(vrC*urE+vtC*utE+vzC*uzE)*0	
		+  y*vzC*(uzp*dx(uzE)+uzE*dx(uzp)+urp*dy(uzE)+urE*dy(uzp))
		+ y*vrC*(uzp*dx(urE)+uzE*dx(urp)+urp*dy(urE)+urE*dy(urp))
		+ y*vtC*(uzp*dx(utE)+urp*dy(utE)+urp*utE/y)
		+ nu*(   y*dx(uzE)*dx(vzC)+y*dy(uzE)*dy(vzC)+2^2/y*uzE*vzC  
	               + y*dx(utE)*dx(vtC)+y*dy(utE)*dy(vtC)+(2^2+1)/y*utE*vtC  
	               + y*dx(urE)*dx(vrC)+y*dy(urE)*dy(vrC)+(2^2+1)/y*urE*vrC  
	               + 2i*2*vrC*utE/y-2i*2*vtC*urE/y)  
	        - pE*(y*dx(vzC)+vrC+y*dy(vrC)-1i*2*vtC)
	        + qC*(y*dx(uzE)+urE+y*dy(urE)+1i*2*utE)
		)
		- int2d(th)(vrC*FrE+vtC*FtE+vzC*FzE)
	  	+ on(1,2,21,22,23,urE=0.,utE=0.,uzE=0.)	
		+ on(4,urE=0.)
		+ on(6,urE=0.,utE=0.,uzE=0.); // M=2







////
//// CHAPITRE 1 : CHAMP DE BASE A REC ///////
////


{
 ifstream file0("chbase.txt");
 file0 >> urp[];
 file0 >> Rec;
};
nu=1./Rec;


cout << endl << "### CHAMP DE BASE POUR RE = " << Rec << endl;

string typegeom, typemode;
if (int1d(th,1)(1)>0) 
	{
		cout << " Champ de base de type BLUFF BODY AXI"<< endl;
		typegeom="BLUFFBODYAXI"; 
		real Trainee0 =  Trainee(urp,uzp,pp);
		cout << "Trainee due au champ de base : " << Trainee0 << endl;
	}
	
else if (int1d(th,11)(1)>0)
	{	cout << " Champ de base de type JET AXI"<< endl;
		typegeom="JETAXI"; 	
		real  UM0 =  UMeanHole1(urp,uzp,pp);
		real DP0 = DeltaP(urp,uzp,pp);
		cout << "UM0 =  " << UM0 << " ; DP0 = " << DP0 << endl;

else
	{
		cout << " ERREUR"<< endl;
		real x=0;
		cout << 1/x << endl;
	}
end;



	
	
////
//// CHAPITRE 2 : MODES PROPRES DU CHAMP DE BASE
////

cout << endl << "MODES PROPRES : " << endl;
p2xp2xp2xp1<complex> [urA,utA,uzA,pA]; //ua
p2xp2xp2xp1<complex> [urAAdj,utAAdj,uzAAdj,pAAdj]; //ua adjoint 



/// LECTURE DANS DES FICHIERS

{
 

// ifstream file1("ModeADir.txt");
// p2xp2xp2xp1 [urR,utR,uzR,pR],[urI,utI,uzI,pI];
// ATTENTION AVEC SLEPC STOCKAGE SEPARE PARTIES REELE / IMAGINAIRE
// file1 >> urR[];
// file1 >> urI[];
// file1 >> ReM >> lambdaM;
// [urA,utA,uzA,pA] = [urR+1i*urI,utR+1i*utI,uzR+1i*uzI,pR+1i*pI];

real ReM, lambdaMR, lambdaMI; complex lambdaM; int mM;
 ifstream file1("Eigenmode.txt");
 file1 >> urA[];
 file1 >> ReM >> lambdaMR >> lambdaMI >> Re ;
 lambdaM = lambdaMR+1i*lambdaMI;
 cout << "Lecture Mode Direct : Re = " << ReM << " ; lambda = " << lambdaM << " ; m = " << mM <<  endl;

};

{
// p2xp2xp2xp1 [urR,utR,uzR,pR],[urI,utI,uzI,pI]; 
// ifstream file1a("ModeAAdj.txt");
// file1a >> urR[];
// file1a >> urI[];
// file1a >> ReM >> lambdaM;
// cout << "Lecture Mode Adjoint : Re = " << ReM << " ; lambda = " << lambdaM << endl;
// [urAAdj,utAAdj,uzAAdj,pAAdj] = [urR+1i*urI,utR+1i*utI,uzR+1i*uzI,pR+1i*pI];


real ReMA, lambdaMAR, lambdaMAI; complex lambdaMA; int mMA;

 ifstream file1("EigenmodeA.txt");
 file1 >> urAAdj[];
 file1 >> ReMA >> lambdaMAR >> lambdaMAI >> mMA;
 lambdaMA = lambdaMAR+1i*lambdaMAI;
 cout << "Lecture Mode Adjoint : Re = " << ReMA << " ; lambda = " << lambdaMA << " ; m = " << mMA <<  endl;

};

/// NORMALISATION ET STATISTIQUES SUR LES MODES PROPRES


if(typegeom="BLUFFBODYAXI")
	{
//Normalization : LATERAL FORCE = 1
	complex FyAT = Portance(urA,utA,uzA,pA);
	urA[]=.5/FyAT*urA[]; 
		
// RENORMALISATION DE L ADJOINT (FACULTATIF)
	complex FyATS = Portance(urAAdj,utAAdj,uzAAdj,pAAdj);
	urAAdj[]=1./FyATS*urAAdj[];
	
	cout << "PORTANCE COMPLEXE DU MODE A APRES RENORMALISATION = " << Portance(urA,utA,uzA,pA) << 
	            " ; " << Portance(urAAdj,utAAdj,uzAAdj,pAAdj) << endl;
	cout << "     ( = 1/2 avant ajout du complexe conjugue )" << endl; 	    
	cout << "Valeurs en (x=1.2 ; y=0.2)" << endl;
	cout << "Direct :" << endl;
	cout << "ur = " << urA(1.2,.2) << " ; ut = " << utA(1.2,.2) << " ; uz = " << uzA(1.2,.2)  
		 << " ; p = " << pA(1.2,.2) << endl;    
		    
	cout << "Adjoint :" << endl;
	cout << "ur = " << urAAdj(1.2,.2) << " ; ut = " << utAAdj(1.2,.2) << " ; uz = " << uzAAdj(1.2,.2)  
		 << " ; p = " << pAAdj(1.2,.2) << endl;    
	complex COUPLEA = 2*Couple(urA,utA,uzA,pA); 	    
	cout << "COUPLE COMPLEXE = " << COUPLEA << endl;	   
	
	};
	
	if(typegeom="JETAXI")
	{
//Normalization : mean velocity = 1

	complex FyAT = UMeanHole1(urA,utA,uzA,pA);
	urA[]=.5/FyAT*urA[]; 
		
// RENORMALISATION DE L ADJOINT (FACULTATIF)
	complex FyATS = UMeanHole1(urAAdj,utAAdj,uzAAdj,pAAdj);
	urAAdj[]=1./FyATS*urAAdj[];
		    
	cout << "Valeurs en (x=1.2 ; y=0.2)" << endl;
	cout << "Direct :" << endl;
	cout << "ur = " << urA(1.2,.2) << " ; ut = " << utA(1.2,.2) << " ; uz = " << uzA(1.2,.2)  
		 << " ; p = " << pA(1.2,.2) << endl;    
		    
	cout << "Adjoint :" << endl;
	cout << "ur = " << urAAdj(1.2,.2) << " ; ut = " << utAAdj(1.2,.2) << " ; uz = " << uzAAdj(1.2,.2)  
		 << " ; p = " << pAAdj(1.2,.2) << endl;    
	  
	};

	
	
// COMPLEXES CONJUGUES	    

p2xp2xp2xp1<complex> [urAC,utAC,uzAC,pAC]; //ua conjugue 
[urAC,utAC,uzAC,pAC] = [conj(urA),conj(utA),conj(uzA),conj(pA)];

p2xp2xp2xp1<complex> [urAAdjC,utAAdjC,uzAAdjC,pAAdjC]; //ua adjoint conjugue 
[urAAdjC,utAAdjC,uzAAdjC,pAAdjC] = [conj(urAAdj),conj(utAAdj),conj(uzAAdj),conj(pAAdj)];
	
complex denomA = int2d(th)(y*(urA*conj(urAAdj)+utA*conj(utAAdj)+uzA*conj(uzAAdj)));	
cout << "DenomA : " << denomA << endl;


////
///// CHAPITRE 3 : CORRECTION AU CHAMP DE BASE pour 1/RE = 1/REc - epsilon ////
////
//// NB UP TO CHAPTER 3 THIS IS THE SAME FOR ALL CASES


cout << endl << "### CORRECTION ORDRE EPSILON = 1/Rec-1/Re DU CHAMP DE BASE : " << endl;



p2xp2xp2xp1[urD,utD,uzD,pD],[vr,vt,vz,q];// u delta // NB ICI CHAMPS REELS


// RESOLUTION DU PROBLEME ET SORTIE DANS UN FICHIER

problem PBUdelta([urD,utD,uzD,pD],[vr,vt,vz,q]) = // for the direct computation (m=1)
	int2d(th)(
	- y*vz*(uzp*dx(uzD)+uzD*dx(uzp)+urp*dy(uzD)+urD*dy(uzp) )
	- y*vr*(uzp*dx(urD)+uzD*dx(urp)+urp*dy(urD)+urD*dy(urp) )
	- y*vt*(uzp*dx(utD)+urp*dy(utD) )-urp*utD*vt
	- nu*(y*dx(uzD)*dx(vz)+y*dy(uzD)*dy(vz)+0^2/y*uzD*vz  
	    + y*dx(utD)*dx(vt)+y*dy(utD)*dy(vt)+(0^2+1)/y*utD*vt  
	    + y*dx(urD)*dx(vr)+y*dy(urD)*dy(vr)+(0^2+1)/y*urD*vr  
	  //  + 2i*0*vr*ut/y-2i*0*vt*ur/y
	  )  
	+ pD*(y*dx(vz)+vr+y*dy(vr))  //-1i*0*vt)
	- q*(y*dx(uzD)+urD+y*dy(urD))  //+1i*0*ut)
	- y*1e-30*(urD*vr+utD*vt+uzD*vz+pD*q)
	)
  	+ int2d(th)(
	      y*dx(uzp)*dx(vz)+y*dy(uzp)*dy(vz) 
	    + y*dx(urp)*dx(vr)+y*dy(urp)*dy(vr)+1/y*urp*vr  
	           ) 
	+ on(1,uzD=0.,urD=0.,utD=0.)
  	+ on(2,21,22,23,uzD=0.,urD=0.,utD=0.)	
	+ on(4,urD=0.)
	+ on(6,urD=0.,utD=0.); //for m=0
	{
        PBUdelta;
	ofstream file0("UD.txt");
        file0 << urD[];
       };


// LECTURE DANS UN FICHIER
//        {
//        ifstream file0("UD.txt");
//        file0 >> urD[];
//        };

        cout << "TERME U delta : valeurs en (.2,.2) : " < endl << urD(.2,.2) << " ; " << utD(.2,.2) << " ; "
		     << uzD(.2,.2) << " ; " << pD(.2,.2) << endl;


if(typegeom=="BLUFFBODYAXI")
{
	// Traînée due à cette correction
	real TraineeDP     =      int1d(th,2,21,22,23)(pD*2*pi*y*N.x);
	real TraineeDV1    =  -nu*int1d(th,2,21,22,23)( (2*dx(uzD)*N.x+(dx(urD)+dy(uzD))*N.y)*2*pi*y);
	real TraineeDV2    =      int1d(th,2,21,22,23)( (2*dx(uzp)*N.x+(dx(urp)+dy(uzp))*N.y)*2*pi*y);
        cout << "Trainee due a la correction en viscosite : " 
	     << TraineeDP << " + " << TraineeDV1 << " + " << TraineeDV2 << endl;
	real TraineeEpsilon = TraineeDP+TraineeDV1+TraineeDV2;
        cout << "Total : " << TraineeEpsilon << endl;
	cout << " /Re^2 =  " << (TraineeDP+TraineeDV1+TraineeDV2)/Rec^2 << endl;

	cout << "AUTRE METHODE :" << Trainee(urD,uzD,pD)+TraineeDV2 << endl;
};

if(typegeom=="JETAXI")
{
	// Traînée due à cette correction
	real TraineeDP     =      int1d(th,2,21,22,23)(pD*2*pi*y*N.x);
	real TraineeDV1    =  -nu*int1d(th,2,21,22,23)( (2*dx(uzD)*N.x+(dx(urD)+dy(uzD))*N.y)*2*pi*y);
	real TraineeDV2    =      int1d(th,2,21,22,23)( (2*dx(uzp)*N.x+(dx(urp)+dy(uzp))*N.y)*2*pi*y);
        cout << "Trainee due a la correction en viscosite : " 
	     << TraineeDP << " + " << TraineeDV1 << " + " << TraineeDV2 << endl;
	real TraineeEpsilon = TraineeDP+TraineeDV1+TraineeDV2;
        cout << "Total : " << TraineeEpsilon << endl;
	cout << " /Re^2 =  " << (TraineeDP+TraineeDV1+TraineeDV2)/Rec^2 << endl;

	cout << "AUTRE METHODE :" << Trainee(urD,uzD,pD)+TraineeDV2 << endl;
};
	
	






////
//// CHAPITRE 4 : MODIFICATION D ORDRE EPSILON DE LA VALEUR PROPRE 
////


cout << endl << "### MODIFICATION D'ORDRE EPSILON DE LA VP : " << endl;



// PREMIER MORCEAU : CONVECTION
//	int m=1;
	p2xp2xp2xp1<complex> [FDr,FDt,FDz,FDp]; // terme de forcage 
        [FDr,FDt,FDz,FDp] = CMN(1,urA,utA,uzA,0,urD,utD,uzD);	
	complex sigma11 = -int2d(th)((FDr*conj(urAAdj)+FDt*conj(utAAdj)+FDz*conj(uzAAdj)))/denomA;
	cout << "lambdaA partie convection : " << sigma11 << endl; 
	

// SECOND MORCEAU : DIFFUSION
		
        [FDr,FDt,FDz,FDp]= 
	[ - y*(dxx(urA)+dyy(urA)+1/yy*dy(urA)-(1^2+1)/yy^2*urA-2i*1/yy^2*utA ),         
	  - y*(dxx(utA)+dyy(utA)+1/yy*dy(utA)-(1^2+1)/yy^2*utA+2i*1/yy^2*urA ),
	  - y*(dxx(uzA)+dyy(uzA)+1/yy*dy(uzA)-1^2/yy^2*uzA ),
	  0
	];	
        complex sigma12 = int2d(th)((FDr*conj(urAAdj)+FDt*conj(utAAdj)+FDz*conj(uzAAdj)))/denomA;
	cout << "lambdaA partie diffusion : " << sigma12 << endl; 
	complex lambdaA = sigma11+sigma12;
	cout << "lambdaA  : " << lambdaA << endl;
        cout << "lambdaA/Re^2 =  " << lambdaA/Rec^2 << endl;

        


////
//// CHAPITRE 5 : calcul du terme non lineaire mu
////


cout << endl << "CALCUL DE MUA : " << endl;
p2xp2xp2xp1<complex> [urAAs,utAAs,uzAAs,pAAs],[urAA,utAA,uzAA,pAA]; // Terme U^2_(A A)
				

/// PREMIER MORCEAU : CONVECTION PAR LE TERME A Aetoile AXISYMETRIQUE
		
		// Forcage a l'ordre 2, composante axi.		
 	        [FrE,FtE,FzE,FpE]= CMN(1,urA,utA,uzA,-1,urAC,utAC,uzAC);
                FrE[] = -FrE[] ;  // celui la compte double !
  	        // Resolution du probleme a l'ordre 2 :
                omegaE=0;
		mE=0;
		NSELEMm0;
		[urAAs,utAAs,uzAAs,pAAs] = [urE,utE,uzE,pE];
		
		cout << "Calcul du terme d'ordre 2 proportionnel a  (A As) . " << endl;
		cout << "TERME U A A ETOILE : valeurs en (.2,.2) : " < endl << urAAs(.2,.2) << " ; " << utAAs(.2,.2) << " ; "
		     << uzAAs(.2,.2) << " ; " << pAAs(.2,.2) << endl;
		complex TraineeAAs = Trainee(urAAs,uzAAs,pAAs);
		cout << "Contribution a la trainee proportionnelle a A As : " << TraineeAAs << endl;
		
		// Forcage pour le probleme a l'ordre 3 :	
		[FrE,FtE,FzE,FpE]= CMN(1,urA,utA,uzA,0,urAAs,utAAs,uzAAs); //
                complex muA1 = int2d(th)(FrE*conj(urAAdj)+FtE*conj(utAAdj)+FzE*conj(uzAAdj))/denomA;
                cout << "MuA1 : " << muA1 << endl;

// SECOND MORCEAU : CONVECTION PAR LE TERME A A DE GEOMETRIE M=2

                // Forcage a l'ordre 2, composante m=2
 	        [FrE,FtE,FzE,FpE]= CMN(1,urA,utA,uzA,1,urA,utA,uzA);
	        FrE[] = -.5*FrE[];
 	        // Resolution du probleme a l'ordre 2 :
                omegaE=0;
		mE=2;
		NSELEMm2;
		[urAA,utAA,uzAA,pAA] = [urE,utE,uzE,pE];
		cout << "Calcul du terme d'ordre 2 proportionnel a  (A A) . " << endl;
		cout << "TERME U A A  : valeurs en (.2,.2) : " < endl << urAA(.2,.2) << " ; " << utAA(.2,.2) << " ; "
		     << uzAA(.2,.2) << " ; " << pAA(.2,.2) << endl;
		cout << "(pas de contribution a la trainee) " << endl;
		// Forcage pour le probleme a l'ordre 3 :	
		[FrE,FtE,FzE,FpE]= CMN(-1,urAC,utAC,uzAC,2,urAA,utAA,uzAA); //
                complex muA2 = int2d(th)(FrE*conj(urAAdj)+FtE*conj(utAAdj)+FzE*conj(uzAAdj))/denomA;
		cout << "MuA2 : " << muA2 << endl;
		complex muA = muA1+muA2;
                cout << "muA = " << muA1 << " + " << muA2 << " = " << muA1+muA2 << endl; 





/// DERNIER CHAPITRE : BILAN SUR LES FORCES


cout << endl << "####" << endl << "#### BILAN SUR LES FORCES :"<< endl << "#####" <<  endl;
		
cout << "Portance = |A| = sqrt(lambdaA/muA)*sqrt(epsilon)" << endl;
cout << "                 = " << sqrt(abs(lambdaA/muA)) << " *sqrt(epsilon) " << endl;
cout << "                 = " << sqrt(abs(lambdaA/muA))/Rec << " *sqrt(Re-Rec) " << endl;
cout << "COUPLE : " << endl;
cout << "                 = " << sqrt(abs(lambdaA/muA))*real(COUPLEA) << " *sqrt(epsilon) " << endl;
cout << "                 = " << sqrt(abs(lambdaA/muA))/Rec*real(COUPLEA) << " *sqrt(Re-Rec) " << endl;

		
cout << "Trainee (avant seuil) = " << Trainee0 << " + " << TraineeEpsilon << " * epsilon" << endl;
cout << "                      = " << Trainee0 << " + " << TraineeEpsilon/Rec^2 << " * (Re-Rec)" << endl;
cout << "Trainee (apres seuil) = " << Trainee0 << " + " 
                                   << TraineeEpsilon+real(TraineeAAs*lambdaA/muA) << " * epsilon" << endl;
cout << "                      = " << Trainee0 << " + " 
                                   << (TraineeEpsilon+real(TraineeAAs*lambdaA/muA))/Rec^2 << " * (Re-Rec)" << endl;
                                   



////
//// CHAPITRE 5 : effet de la rotation 
////
        
complex apL,avL,apC,avC;

apL = -int1d(th,2,21,22,23)(y/2*pAAdjC*(x*N.y-y*N.x))/denomA;
avL = -nu*int1d(th,2,21,22,23)(y/2*
	(     (dy(urAAdjC)*N.y+dx(urAAdjC)*N.x)*x
	 + 1i*(dy(utAAdjC)*N.y+dx(utAAdjC)*N.x)*x
	 -    (dy(uzAAdjC)*N.y+dx(uzAAdjC)*N.x)*y ) )/denomA;

//apC = -int1d(th,2,21,22,23)(y/2*pAAdjC*(x*N.y-y*N.x))/denomA;
//avC = -nu*int1d(th,2,21,22,23)(y/2*
//	(     (dy(urAAdjC)*N.y+dx(urAAdjC)*N.x)*x
//	 + 1i*(dy(utAAdjC)*N.y+dx(utAAdjC)*N.x)*x
//	 -    (dy(uzAAdjC)*N.y+dx(uzAAdjC)*N.x)*y )*(x*N.y-y*N.x) )/denomA;



	cout << endl << endl << "#### PRISE EN COMPTE DE LA ROTATION : " << endl << endl;
    cout << "#### on pose u1 = A uhat + omega uh " << endl;
    cout << "####  la cond de compatibilite conduit a un terme a omega A dans l'eq d'amplitude" << endl;
     
	cout << " terme a : " << endl <<    " ( pression :) " << apL << endl
	<< " (visqueux :)" << avL << endl << " ( total    :) " << apL+avL << endl;

        cout << "APPLICATION SPHERE TOURNANTE (solution lineaire :)" << endl
             << " A = omega/epsilon * " << -(apL+avL)/lambdaA << endl
             << "          = omega/(d Re ) * " << -(apL+avL)/lambdaA*Rec^2 << endl
//	     << " Couple   = alpha/epsilon * " << -(apC+avC)/lambdaA << endl
//             << "          = alpha/(d Re ) * " << -(apC+avC)/lambdaA*Rec^2 << endl
             << " Couple  = omega/epsilon * " << -(apL+avL)/lambdaA*COUPLEA << endl
             << "          = omega/(d Re ) * " << -(apL+avL)/lambdaA*Rec^2*COUPLEA << endl;  


{
 		 ofstream file("WNL_results.ff2m");
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "Coefficients of the Amplitude Equation obtained by Weakly Non Linear analysis" << endl;
    	 file << "Format :" << endl;
	     file << "real Rec complex lambdaA complex muA complex a0" << endl << endl ; 
			file << Rec << endl << real(lambdaA) << " " << imag(lambdaA) << endl 
			     << real(muA) << " " << imag(muA) <<  endl << real(apL+avL) << " " << imag(apL+avL) << endl << endl;
};

