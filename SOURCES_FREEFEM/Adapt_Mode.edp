//
//  PROGRAM Adapt_UVP.edp
//  adaptmesh for 2D flow PLUS EIGENMODE
//   
// Usage : FreeFem++ Adapt_Mode.edp "type"
//
//  INPUT PARAMETERS (from pipe) : "type" where type is "BFonly", "UVP", "UVWP", "S" (at the moment)

//
//	INPUT FILES :
// 		mesh.msh ->  mesh in Freefem format
//		BaseFlow.txt	-> guess base flow (generated by mesh generator, time integration or previous Newton)
//		AdaptField.txt -> field to which the adaptation has to be done (in addition to base flow)
// 		Data in this file depends upon option "type"
//			type = "UVP" -> P2xP2xP1 data (for instance 2D mode)
//			type = "UVWP" -> P2xP2xxP2xP1 data (for instance 3D mode) 
//			type = "S" -> P2 data (for instance structural sensitivity)
//			type = "BFonly" -> no data, adaptation to base flow only
//  OUTPUT FILES :
//		mesh.msh -> New mesh
//		BaseFlow_guess.txt -> BaseFlow interpolated on new mesh (guess for next Newton)		
//		AdaptField_guess.txt -> data interpolated on new mesh(may be useful to provide initial guess for Shift/invert solver)
//		mesh_ans.msh, BaseFlow_ans.txt -> previous mesh and base flow to allow reconstruction in case adaptmesh was not successful 
// 		nb : BaseFlow.txt is removed, to force new computation with Newton

// 	ERROR MANAGEMENT : 
//
//  D. Fabre et al., June 2017
//




	verbosity = 0;
	include "Macros_StabFem.edp";
	
	string type;
	cout << "Select type of data ? [UVP, UVWP, S, BFonly]" << endl;
	cin >> type; 
	
	real Nbvx	= 50000.;		//maximun number of vertices
	real Thetamax	= 1e-3;			//minimum corner angle in degree
	real Verbosity	= 1; // warning : must be integer !
	bool Splitpbedge= false;
//	real Hmin	= .1e-4;           	//minimun edge size 
//	real Hmax	= .5;			//maximun edge size  	
//	real Ratio	= 10.;               	//ratio for the smoothing of the mesh
//	real error	= 1e-2;			//interpolation error level, it decreases on each iteration
// 
// NB ALL THESE PARAMETERS ARE NOW WRITTEN IN THIS FILE :
	include "Param_Adaptmesh.edp";


	exec("cp "+ffdatadir+"mesh.msh "+ffdatadir+"mesh_ans.msh");
	exec("cp "+ffdatadir+"BaseFlow.txt "+ffdatadir+"BaseFlow_ans.txt");
	 
	mesh th=readmesh(ffdatadir+"mesh.msh");
	mesh thold = th;
	int nvprev = th.nv;
	    
	    fespace femp2(th,P2);   
        fespace femp1(th,P1);
        fespace femp0(th,P0);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        fespace femp2xfemp2xfemp2xfemp1(th,[P2,P2,P2,P1]);
        femp2xfemp2xfemp1 [vB,uB,pB]; // base flow
        femp2xfemp2xfemp1<complex> [vC,uC,pC];	// structure for adaptation (case UVP)
        femp2xfemp2xfemp2xfemp1<complex> [uCC,vCC,wCC,pCC];	// structure for adaptation (case UVWP)
        femp2 Sensitivity;
	
	cout << "###################################" << endl;
cout << endl << "       Adapt_Mode.edp        " << endl; 
cout << endl << "###################################" << endl << endl;
	

cout << endl << "#### Mesh information BEFORE ADAPT :" << endl;  
        cout << "#### Number of vertices    " << th.nv <<  endl;
	    cout << "### Dimension of matrices " << vB[].n << endl << endl;
	
	real Re;
	{
	ifstream U(ffdatadir+"BaseFlow.txt");		
	U >> vB[];
	U >> Re;
	}
    cout << " lecture of Base flow : Reynolds number = " << Re << endl;


	mesh thnew;	
	
	
// selection of the type of adaptation to be done 
	if(type=="BFonly")
	{
	thnew = adaptmesh(th,[vB,uB,pB],
						nbvx=Nbvx,err=error,ratio=Ratio,hmax=Hmax,hmin=Hmin,thetamax=Thetamax,
						verbosity=Verbosity,splitpbedge=Splitpbedge,splitin2=Splitin2);		
	}
		
				
	else if(type=="UVP")
	{
		cout << " ADAPTATION TO FIELD WITH UVP STRUCTURE" << endl;	
		ifstream fileAdaptField(ffdatadir+"AdaptField.txt");
    	femp2xfemp2xfemp1 [v,u,p], [vi,ui,pii];	// real and imaginary parts
		fileAdaptField >> uC[];
		[v,u,p] = [real(vC),real(uC),real(pC)];
		[vi,ui,pii] = [imag(vC),imag(uC),imag(pC)];
		
		cout << " lecture of field with structure [U,V,P]" << endl;
		if(ui[].max<1e-6){ cout << " (Real field ; most likely a base flow) " << endl;}
		else{  cout << " (complex field ; most likely an eigenmode or response to a forcing) "<< endl; };
			
		thnew = adaptmesh(th,[v,u,p],[vi,ui,pii],[vB,uB,pB],
						nbvx=Nbvx,err=error,ratio=Ratio,hmax=Hmax,hmin=Hmin,thetamax=Thetamax,
						verbosity=Verbosity,splitpbedge=Splitpbedge,splitin2=Splitin2);		
	}
	
	else if(type=="UVWP")
	{
		cout << " ADAPTATION TO FIELD WITH UVWP STRUCTURE" << endl;	
		ifstream fileAdaptField(ffdatadir+"AdaptField.txt");
    	femp2xfemp2xfemp2xfemp1 [u,v,w,p], [ui,vi,wi,pii];	// real and imaginary parts
		fileAdaptField >> uCC[];
		[u,v,w,p] = [real(uCC),real(vCC),real(wCC),real(pCC)];
		[ui,vi,wi,pii] = [imag(uCC),imag(vCC),imag(wCC),imag(pCC)];
		
		cout << " lecture of field with structure [U,V,W,P]" << endl;
		if(ui[].max<1e-6){ cout << " (Real field ; most likely a base flow) " << endl;}
		else{  cout << " (complex field ; most likely an eigenmode or response to a forcing) "<< endl; };
			
		thnew = adaptmesh(th,[u,v,w,p],[ui,vi,wi,pii],[vB,uB,pB],
						nbvx=Nbvx,err=error,ratio=Ratio,hmax=Hmax,hmin=Hmin,thetamax=Thetamax,
						verbosity=Verbosity,splitpbedge=Splitpbedge,splitin2=Splitin2);		
	}
	
	else if(type=="Sensitivity")
	{
		cout << " ADAPTATION TO FIELD WITH UVP STRUCTURE" << endl;	
		ifstream fileAdaptField(ffdatadir+"AdaptField.txt");
    	femp2 Sensitivity;	// real and imaginary parts
		fileAdaptField >> Sensitivity[];
				
		cout << " lecture of field with structure P2" << endl;
			
		thnew = adaptmesh(th,Sensitivity,[vB,uB,pB],
						nbvx=Nbvx,err=error,ratio=Ratio,hmax=Hmax,hmin=Hmin,thetamax=Thetamax,
						verbosity=Verbosity,splitpbedge=Splitpbedge,splitin2=Splitin2);		
	}

	
// INFORMATION ON NEW MESH	
	
	fespace femp2N(thnew,P2);   
    fespace femp1N(thnew,P1);
    fespace femp0N(thnew,P0);
    fespace femp2xfemp2xfemp2xfemp1N(thnew,[P2,P2,P2,P1]);
    fespace femp2xfemp2xfemp1N(thnew,[P2,P2,P1]);
    
    
    femp2xfemp2xfemp1N [vBN,uBN,pBN];
	
 	cout << endl << "#### Mesh information AFTER ADAPT :" << endl;  
    cout << "#### Number of vertices    " << thnew.nv <<  endl;
	cout << "### Dimension of matrices " << vB[].n << endl << endl;
	
    cout << "### Number of DOF : " << vBN[].n << endl << endl;  
	femp1N delta = hTriangle;
	cout << "delta min : " << delta[].min << endl;
	cout << "delta max : " << delta[].max << endl;
	cout << "delta(0,.5) : ( boundary layer) : " << delta(0,.5) << endl ;
	cout << "delta(2.5,.5) : ( sensitivity) : " << delta(2.5,.5) << endl ;
	cout << "delta(4,0) : ( wake ) : " << delta(4,0) << endl << endl ;
    cout << "delta(10,0) : ( far wake ) : " << delta(10,0) << endl << endl ;
    
    real[int] xprobe = [0,	2.5,	4,	10];
    real[int] yprobe = [.5, 	.5,	0,	0];

// WRITE NEW MESH TO FILE

	savemesh(thnew,ffdatadir+"mesh.msh");
	 {
     	 cout << "Writing mesh_adapt.ff2m" << endl;
 		 ofstream fileFF(ffdatadir+"mesh_adapt.ff2m");
 		 fileFF << "### MESH generated by Freefem++ ; " << endl;
    	 fileFF << "2D" << endl;
    	 fileFF << "Format :" << endl;
	     fileFF << "int np int Ndof real deltamin real deltamax real deltaA real deltaB real deltaC real deltaD" 
	     << endl << endl ; 
		 fileFF << thnew.nv <<  endl << vBN[].n << endl ;
		 fileFF << delta[].min << endl;
		 fileFF << delta[].max << endl;
		 for(int ii = 0; ii<4;ii++)
		 	{ fileFF << delta(xprobe(ii),yprobe(ii)) << endl ;}	
 	 };
	
	plot(thold,wait=1);
	plot(thnew,wait=1);

	plot(uBN,fill=1,wait=1);
	plot(vBN,fill=1,wait=1);
	plot(pBN,fill=1,wait=1);
	
// INTERPOLATE BASE FLOW ON NEW MESH AND WRITE TO FILE


    [vBN,uBN,pBN] = [vB,uB,pB]; // interpolation of base flow
    {
		ofstream U(ffdatadir+"BaseFlow_guess.txt");		
        U << vBN[];
        U << endl << endl <<  Re << endl;
	}

// INTERPOLATE THE DATA AND WRITE TO FILE

 
 if(type=="UVP")
   {
	femp2xfemp2xfemp1N<complex> [vCN,uCN,pCN]; 
	[vCN,uCN,pCN] = [vC,uC,pC]; // interpolation of structure
	ofstream U(ffdatadir+"AdaptField_guess.txt");		
    U << vCN[];
    U << endl << endl <<  Re << endl;
   }
   
   else if(type=="UVWP")
   {
	femp2xfemp2xfemp2xfemp1N<complex> [uCCN,vCCN,wCCN,pCCN]; 
	[uCCN,vCCN,wCCN,pCCN] = [uCC,vCC,wCC,pCC]; // interpolation of structure
	ofstream U(ffdatadir+"AdaptField_guess.txt");		
    U << uCCN[];
    U << endl << endl <<  Re << endl;
   }
   
   else if(type=="Sensitivity")
   {
	femp2N SensitivityN; 
	SensitivityN = Sensitivity; // interpolation of structure
	ofstream U(ffdatadir+"AdaptField_guess.txt");		
    U << SensitivityN[];
    U << endl << endl <<  Re << endl;
   }


 


//	cout << "     copying  interpolated base flow to files BaseFlow_adapt.txt and BaseFlow_guess.txt " 
//	     << endl;
	     
	   
			

	

 		     	 
     	







