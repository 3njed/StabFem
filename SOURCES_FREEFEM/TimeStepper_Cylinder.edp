		//include "data.txt"
//		real epsilon=1e-8;
		real xpres = -80.;
		real ypres = 0.;
		
		
    macro Trainee(u1,u2,p)   
	(
	int1d(th,2,21,22,23)(p*N.x)
	-nu*int1d(th,2,21,22,23)( (2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
	//EOM
	macro Portance(u1,u2,p)   
	(
	int1d(th,2,21,22,23)(p*N.y)
	-nu*int1d(th,2,21,22,23)( (2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
	//EOM
		
		
		real Re,omega,epsilon,dt,Reans,tps;
		int rep,itmax;
		cout << "###" << endl <<  "### TIME STEPPER for the flow around a cylinder" << endl << "###" << endl << endl;
		cout << "Enter Re : "<< endl;
		cin >> Re;			
		cout << "Enter initial instant : (0 means start from base flow + eigenmode) "<< endl;
		cin >> rep;	
		cout << "Enter itmax"<< endl;
		cin >> itmax;	
		cout << "Enter dt"<< endl;
		cin >> dt;	
		int imean;
		cout << " Mode de calcul ? [0 -> pas de champ moyen] [1 -> calcul du champ moyen sur 1 periode] [2 -> calcul de l'ecart au champ moyen]" << endl;
		cin >> imean; 
		

		int iout = 500; // to generate output files each iout time steps
//		dt = 0.001;

		cout << endl << "Starting computation with : "<< endl;
		cout << "       Re = " << Re << endl;
		cout << "       dt = " << dt << endl;
real nu=1./Re;



	
  		mesh th=readmesh("mesh.msh");
  		fespace femp2(th,P2);
		fespace femp1(th,P1);
		fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
		femp2xfemp2xfemp1 [u1init,u2init,pinit];
		femp2xfemp2xfemp1 [u1mean,u2mean,pmean],[u1prime,u2prime,pprime];
		u1mean[] = 0;
  

	if(rep==0) // starting from base flow 
	{  femp2xfemp2xfemp1 [u1b,u2b,pb];
	   femp2xfemp2xfemp1<complex> [um1s,um2s,pms];    //eigenmode (start)     
	   	   real A;
	   cout << "Starting from base flow (chbase.txt) + A*eigenmode (Eigenmode.txt)" << endl;
	   cout << "Initial amplitude A ? " << endl;
	   cin >> A;
	    {
          ifstream file("chbase.txt");
        file >> u1b[];
		file >> Reans;
        };
        {
          ifstream file("Eigenmode.txt");
        file >> um1s[];
        };
        complex AA = A/Portance(um1s,um2s,pms);
	  [u1init,u2init,pinit] = [u1b+real(AA*um1s),u2b+real(AA*um2s),pb+real(AA*pms)];
	  tps = 0;
	  exec("rm dns_liftanddrag_Re"+Re+".txt");
	}
	else
	{
		ifstream file("dnsfield_"+rep+".txt");
	  file >> u1init[];
	  file >> tps;
	  cout << "Starting from previous field for it= " << rep << " ; tps = " << tps << endl; 

	};
	
		
 if(imean==2)

	{
                ifstream g("MeanFlowDNS_Re"+Re+".txt");
				g >> u1mean[];
				cout << " Lecture du champ moyen OK " << endl;
    };
      	 


		
		
	


		femp1 cfl=1.*dt/hTriangle;
		femp1 rem=1*hTriangle/nu;

		plot(cfl,cmm="cfl",fill=1,value=1,wait=0);
		plot(rem,cmm="remaille",fill=1,value=1,wait=0);

		femp2 up1, up2;
		femp2 upp1, upp2;
		femp2xfemp2xfemp1 [r1,r2,r3];


		real a0,a1,a2,bet0,bet1;

		varf NS([u1,u2,p],[v1,v2,q])=
    		 int2d(th)(
        	    	 a0*( u1*v1 + u2*v2)/dt
            		+ nu * ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
            		+ dx(u2)*dx(v2) + dy(u2)*dy(v2) )
            		+ p*q*epsilon 
            		- p*dx(v1)- p*dy(v2)
            		- q*dx(u1)- q*dy(u2))
  		 +on(1,u1=1.,u2=0.)
  		 +on(2,u1=0.,u2=0.)
		 +on(4,6,u2=0.);

		varf SMNS([u1,u2,p],[v1,v2,q])=
		-int2d(th) (a1*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up1)*v1/dt
			   +a1*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up2)*v2/dt)
		-int2d(th) (a2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp1)*v1/dt
			   +a2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp2)*v2/dt)
  		 +on(1,u1=1.,u2=0.)
  		 +on(2,u1=0.,u2=0.)
		 +on(4,6,u2=0.);


 			a0=1.5; a1=-2.; a2=0.5; bet0=2; bet1=-1; // coeffs for order 2
//		 	 a0=1; a1=-1; a2=0; bet0=1; bet1=0; // coeffs for order 1


		matrix NSMAT=NS(femp2xfemp2xfemp1,femp2xfemp2xfemp1,solver=UMFPACK,tgv=1.e30);
                                          
		femp2xfemp2xfemp1 [u1,u2,p];
//		femp2xfemp2xfemp1 [r1,r2,r3];
	
/*		{	
		femp2 psi,phi;
		solve laplace(psi,phi,solver=UMFPACK)=
		 int2d(th)(dx(psi)*dx(phi)+dy(psi)*dy(phi))
		 +on(2,6,psi=0.)
		 +on(1,3,psi=y)
		 +on(4,psi=y);
		[u1,u2,p]=[dy(psi),-dx(psi),0];
		plot(psi,wait=1);
		};
*/

	up1 = u1init;
	up2 = u2init;
	[u1,u2,p] = [u1init,u2init,pinit];
	int it;
	real Energieprimemean;
	
	////// BEGINING OF TIME LOOP
	
		for (it=rep+1;it<itmax+1;it++)
 		{
			upp1=up1;
			upp2=up2;
   			up1=u1;
  			up2=u2;
			
			r1[]=SMNS(0,femp2xfemp2xfemp1,tgv=1.e30);
			u1[]=NSMAT^-1*r1[];
		    tps+=dt;



		real Drag = Trainee(u1,u2,p);
		real Lift = Portance(u1,u2,p);
		real Energie = int2d(th)((u1-1)^2+u2^2);
		real Energieprime=0;
		real Ux2y1 = u1(2,1);
		real Vx07y0 = u2(0.7,0);
		real Lx;
		
	if(imean==1)
	{
		u1mean[] += u1[];
	};
	if(imean==2)
	{
		u1prime[] = u1[]-u1mean[];
		Energieprime = int2d(th)(u1prime^2+u2prime^2);
		Energieprimemean += Energieprime;
	};
		

// post traitement		    
		    
		    // mesure de la longueur de recirculation
			real dx = 0.001;real Uav = -2;real Uap=-1;int ix;
			for(ix=1;ix<20000;ix++)
			{   
				Uap =u1(0.5+ix*dx,0);
				if(Uap*Uav<0){break;}; // break
				Uav = Uap;
				
			}
			real xav = 0.5+(ix-1)*dx; real xap = 0.5+ix*dx;
			Lx = xav *(Uap)/(Uap-Uav) + xap *(-Uav)/(Uap-Uav);
			
		
		cout << "iter " << it << " ; Drag = " << Drag << " ; Lift = " << Lift << " ; Energie " << Energie 
			 << endl << "       velocities ; " << Ux2y1 << " " << Vx07y0 << " Lx " << Lx << endl;
		{
			ofstream fileforces("dns_liftanddrag_Re"+Re+".txt",append);
				fileforces << tps << " " << Drag << " " << Lift << " " << Energie << " " << Energieprime 
				<< " " << Lx << " " << Ux2y1 << " " << Vx07y0  << endl;
		}
	
	
	
if (!((it)%50))
	{
		plot(u1,wait=0,fill=1,cmm="Ux for it = "+(it) );
	};

if (!((it)%iout))
	{
       ofstream g("dnsfield_"+(it)+".txt");
		g << u1[] << endl << endl;
		g << tps << endl << endl;
    };


 		}; // end time stepper
 		
 		{
                ofstream g("dnsfield_"+(it-1)+".txt");
				g << u1[] << endl << endl;
				g << tps << endl << endl;
        };
             
    if(imean==1)
	{
		u1mean[] = u1mean[]/(itmax-rep);
	    {
                ofstream g("MeanFlowDNS_Re"+Re+".txt");
				g << u1mean[] << endl << endl;
				g << tps << endl << endl;
        };
        plot(u1mean,wait=1,fill=1,cmm="Ux MEAN" );
	};       
 		
 		
 	 if(imean==2)	
 		{
 			Energieprimemean=Energieprimemean/(itmax-rep);
 			cout << "Energieprimemean = " << Energieprimemean << endl;
 			cout << " A = sqrt(Eprimemean) = " << sqrt(Energieprimemean) << endl;
 		}
 		
 		
/*
//			if(!(i%1))
			{
				femp1 w=-dx(u2)+dy(u1);
				real pref=p(xpres,xpres);

		      		real FPy = int1d(th,2)(p*N.y);
		      		real FPx = int1d(th,2)(p*N.x);
				real FFx = 2*nu*int1d(th,2)(-dx(u1)*N.x-0.5*(dy(u1)+dx(u2))*N.y);
				real FFy = 2*nu*int1d(th,2)(-dy(u2)*N.y-0.5*(dy(u1)+dx(u2))*N.x);

			//	real CpAm0=p(x0-rayonx,y0)-pref;
			//	real CpAm1=p(x0,y0+rayony)-pref;
			//	real CpAm2=p(x0+rayonx,y0)-pref;
			//	real CpAm3=p(x0,y0-rayony)-pref;

				cout << " i = " << i  << "\n";
				cout << " tps = " << tps  << "\n";
                       
	                        {
        	                ofstream f(filename,append);
 				f << tps << "   "
			//	  << CpAm0 << "   "
			//	  << CpAm1 << "   "
			//	  << CpAm2 << "   "
			//	  << CpAm3 << "   "
				  << FPx+FFx << "   " << FPy+FFy << "   " << pref << "\n";		
                        	};
			};

			if (!(i%10))
			{
                                ofstream g("sol"+(10000+i)+".txt");
				g << u1[] << endl;
                        };

			if (!(i%300))
			{
				femp1 w=(-dy(u1)+dx(u2));	
				plot(w,value=1,wait=1);
				plot(p,value=1,wait=1);
				plot(u1,value=1,wait=1);
				plot(u2,value=1,wait=1);
			};

			if(!(i%100))
			{
			real pref=p(xpres,ypres);
			femp1 w=dy(u1)-dx(u2);
			{
                                ofstream g("pressfrott"+(10000+i)+".txt");
				femp1 tau;
				varf frott(tau,v)=on(2,tau=2*nu*((dx(u1)-dy(u2))*N.x*N.y
							+(N.y*N.y-N.x*N.x)*0.5*(dx(u2)+dy(u1))));
				tau[]=frott(0,femp1,tgv=1);

				for(int ii=0; ii<th.nt; ii++)
				  for(int jj=0; jj<3; jj++)
				    if((th[ii][jj].label==2))
				    {
					g << th[ii][jj].x << "   " << th[ii][jj].y << "   " 
					<< u1[][femp2xfemp2xfemp1(ii,jj)+2]-pref << "   "  			  
					<< tau[][femp1(ii,jj)] << endl;
				    };
			};
			};
};

			{
                                ofstream g("chbase_guess.txt");
				g << u1[] << endl;
                        };

*/
