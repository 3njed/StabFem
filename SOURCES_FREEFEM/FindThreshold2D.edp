/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
/////            DIRECT COMPUTATION OF STABILITY thRESHOLD FOR 2D FLOW
/////
/////		Adapted for usage with matlab driver by D. Fabre, july 2017
/////
/////		Cleaned up on oct. 8 2018
/////
/////  this program should be rewritten in the same way as HarmonicBalance_2D.edp
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

include "Macros_StabFem.edp";



mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]

macro DEF(u) [u#x,u#y,u#p] // Macro to define composite fields

//XXMh [ubx,uby,ubp]; // base flow (start) 
//XXMh<complex> [u1x,u1y,u1p];    //eigenmode (start)      

//XXMh DEF(u0),DEF(u1r),DEF(u1i); // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
//XXMh DEF(du0),DEF(du1r),DEF(du1i); // Increments in Newton
//XXMh DEF(v); // test functions

XXMh DEF(ub) ; XXMh<complex> DEF(u1); // base flow and eigenmode (read from file)
XXMh DEF(u0), DEF(u1r), DEF(u1i); // unknowns of the problem : bf and re/im parts of eigenmode
XXMh DEF(du0), DEF(du1r), DEF(du1i); // increments
XXMh DEF(v); // test functions
XXMh DEF(dumb); // dumb (not used but necessary to build vectors from linear part of varf) 

real Re, dRe;
real omega, omegaM, sigmaM, domega;
     
macro div(u) (dx(u#x)+dy(u#y))//EOM macro for divergence 

macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) //EOM macro for mutual convection operator
macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
//EOM macro for rate-of-deformation tensor

macro NS(nu,u,v) 
		(
		 -2*nu*(D(u):D(v))
        + u#p*div(v)
        + v#p*div(u)
        - .5*Conv(u,u,v)
        )
//EOM
     
macro NSL(nu,U,u,v) 
		(
		-2*nu*(D(u):D(v))
        + u#p*div(v)
        + div(u)*v#p
        - Conv(U,u,v)
        )
//EOM
       
       
macro Boundaryconditions(u,v,symmetry)
	           on(1,u#x=0.0,u#y=0.0) 
             + on(2,u#x=0.0,u#y=0.0)
             + int1d(th,6)(u#x*v#x*1e30*(symmetry=="A")+u#y*v#y*1e30*(symmetry=="S"))
// 

macro Lift(nu,ux,uy,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -2*nu*(2*dy(uy)*N.y+(dx(uy)+dy(ux))*N.x))
	)
//

       

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow and eigenmode  for starting point     ////////////////////////
{
ifstream cbin(ffdatadir+"BaseFlow_guess.txt");
cbin >> ubx[] >> Re;
}

{
		cout << "starting  from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
		cbin >> u1x[] >>  sigmaM >> omegaM; 
		complex liftnorm = Lift(1/Re,u1x,u1y,u1p);
		u1x[] = .5/liftnorm*u1x[]; // normalize so that lift is 0.5
};
cout << " Reading baseflow and mode with Re = " << Re << " ; sigma = " << sigmaM << " ; omega = " << omegaM << endl;

DEF(u0) = [ubx, uby, ubp]; 
DEF(u1r) = [real(u1x), real(u1y), real(u1p)]; 
DEF(u1i) = [imag(u1x), imag(u1y), imag(u1p)]; 



real[int] RHS;
real NLOpF4,NLOpF5;
omega = omegaM;

real nu=1/Re;

////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for base flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 and 5 normalization  
// M = 1 base-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 5 domega ; M=4 dRe 
//
// in the assembly blocks [1-3]x[1-3]  corresponding to the fluid unknows are built with varfs NLOpF and LinOpFF 
//
/////////////////////////////////////////////////////////////////////////////////

cout << " Taille du probleme : " << ubx[].n+2 << endl;

/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;

// block 1 : NS for base flow
varf NLOpF1(DEF(dumb),DEF(v)) =
   int2d(th)( NS(nu,u0,v) )		
 	;
 			
// block 2 : base-flow effect on real part of eigenmode			
varf NLOpF2(DEF(dumb),DEF(v)) =
	 int2d(th)( NSL(nu,u0,u1r,v) )
	+ int2d(th) ( omega * (u1ix*vx+u1iy*vy ) ) 			
	;
	
// block 3 : base-flow effect on imag part of eigenmode			
varf NLOpF3(DEF(dumb),DEF(v)) =
	 int2d(th)( NSL(nu,u0,u1i,v)  )              
	- int2d(th) ( omega * (u1rx*vx+u1ry*vy ) ) 
	;
	
cout << " defining operators for nonlinear term... done" << endl;

	




/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////
cout << " defining operators for linear term..." << endl;


// block 1-1 : NS for base flow
varf LinOp11(DEF(du0),DEF(v)) =
   	int2d(th)( NSL(nu,u0,du0,v) )        
 	+ Boundaryconditions(du0,v,"S");

// block 1-4 : effect of dRe on base-flow equations
varf LinOp14(DEF(dumb),DEF(v))
	= int2d(th)(2/Re^2*(D(u0):D(v)));

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21(DEF(du0),DEF(v)) =
	 int2d(th)( - Conv(du0,u1r,v) );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22(DEF(du1r),DEF(v)) =
             int2d(th)( NSL(nu,u0,du1r,v) )
 			+ Boundaryconditions(du1r,v,"A");
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23(DEF(du1i),DEF(v)) =
			 int2d(th)(omega*(du1ix*vx+du1iy*vy));

// block 2-4 : effect of dRe on eigenmode-imag equations
varf LinOp24(DEF(dumb),DEF(v))
	= int2d(th)(2/Re^2*(D(u1r):D(v)));

// block 2-5 : effect of domega on eigenmode-real equations
varf LinOp25(DEF(dumb),DEF(v))
	=  int2d(th)((u1ix*vx+u1iy*vy));
	
	
// block 3-1 : base-flow effect on imag part of eigenmode			
varf LinOp31(DEF(du0),DEF(v)) =
	 int2d(th)( - Conv(du0,u1i,v) );  
	             
// block 3-2 : effect of omega on imag part of equation for eigenmode
varf LinOp32(DEF(du1r),DEF(v)) =
			 int2d(th)(-omega*(du1rx*vx+du1ry*vy));
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33(DEF(du1i),DEF(v)) =
             int2d(th)( NSL(nu,u0,du1i,v) )
 		   + Boundaryconditions(du1i,v,"A");
 			;

// block 3-4 : effect of dRe on eigenmode-imag equations
varf LinOp34(DEF(dumb),DEF(v))
	= int2d(th)(2/Re^2*(D(u1i):D(v)));		
	
// block 3-5 : effect of domega on eigenmode-imag equations
varf LinOp35(DEF(dumb),DEF(v))
	= int2d(th)(-(u1rx*vx+u1ry*vy));

// block 4-2 : lift of real part of eigenmode-re
varf LinOp42(DEF(dumb),DEF(du1r))	
	= Lift(1/Re,du1rx,du1ry,du1rp);
	
// block 5-3 : lift of real part of eigenmode-re
varf LinOp53(DEF(dumb),DEF(du1i))	
	= Lift(1/Re,du1ix,du1iy,du1ip);

cout << " defining operators for linear term... done" << endl;
cout << "dimensions of the operator and of the RHS : " << RHS.n <<  endl << endl;



///// BEGINING OF NEWTON LOOP
domega = 1;
int i=1;
while(abs(domega)>1e-8&&abs(domega)<10)
	{ 
	cout << "Newton loop step " << i << endl;

	cout << "constructing rhs... " << i << endl;
	real[int] RHSF1(u0x[].n), RHSF2(u0x[].n), RHSF3(u0x[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);	
	NLOpF4 = Lift(1/Re,u1rx,u1ry,u1rp)-.5; 
	NLOpF5 = Lift(1/Re,u1ix,u1iy,u1ip)-0; 	
	RHS = [RHSF1, RHSF2, RHSF3, NLOpF4, NLOpF5];		
	cout <<  "max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << NLOpF4 <<  ", " << NLOpF5 << endl;  



cout << " Assembling matrix..." << endl;
matrix matLinOp11 = LinOp11(XXMh,XXMh);
real[int] matLinOp14 = LinOp14(0,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
real[int] matLinOp24 = LinOp24(0,XXMh);
real[int] matLinOp25 = LinOp25(0,XXMh);

matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
real[int] matLinOp34 = LinOp34(0,XXMh);
real[int] matLinOp35 = LinOp35(0,XXMh);			


real[int] matLinOp42 = LinOp42(0,XXMh);
real[int] matLinOp53 = LinOp53(0,XXMh);

real LinOp44 = Lift(-1/Re^2,u1rx,u1ry,0);
real LinOp54 = Lift(-1/Re^2,u1ix,u1iy,0);


matrix LinOp = [	[matLinOp11, 	0, 			0,	  matLinOp14, 	  0    	 ],
					[matLinOp21,matLinOp22,matLinOp23,matLinOp24, matLinOp25 ],
					[matLinOp31,matLinOp32,matLinOp33,matLinOp34, matLinOp35 ],
					[	0	   ,matLinOp42',	 0,		LinOp44, 	0 		],
					[	0	   ,	0		,matLinOp53',  LinOp54,	0  		]	  
				  ];
cout << " Assembling matrix... done" << endl;

cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;



	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du0x[], du1rx[], du1ix[], dRe, domega] = dX;
	u0x[] -= du0x[];
	u1rx[] -= du1rx[];
	u1ix[] -= du1ix[];
	Re -= dRe;
	omega -= domega;

	cout << "dRe ; domega : " << -dRe << " " << -domega << endl;
	cout << "Re ; omega : " << Re << " " << omega << endl;
	
	
IFMACRO(FREEFEMPLOTS,YES)
	XXMh [Tx,Ty,Tp];
	Tx[] = RHSF1; 
	plot(Tx,value=1,wait=1,cmm="RHS 0");
	Tx[] = RHSF2; 
	plot(Tx,value=1,wait=1,cmm="RHS 1");
	Tx[] = RHSF3; 
	plot(Tx,value=1,wait=1,cmm="RHS 2");
	plot(du0x,value=1,wait=1);
	plot(du1rx,value=1,wait=1);
	plot(du1ix,value=1,wait=1);
	plot(u0x,value=1,fill=1,wait=1);
	plot(u1rx,value=1,fill=1,wait=1);
	plot(u1ix,value=1,fill=1,wait=1);
ENDIFMACRO
	i++;
	};
	
	
	
// END OF NEWTON LOOP ; BEGINNING OF POSTPROCESSING	
	
	
	if(abs(domega)>10) 
	{
	ofstream file("ffdatadir+BaseFlow_threshold.ff2m");
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	cout << " Newton Loop DIVERGED " << endl;	
	}
	
	else	
	{
	cout << " Newton Loop converged " << endl;
	cout << " >>> Rec = " << Re << endl;
	cout << " >>> Omegac = " << omega << endl;	


/// GENERATES OUTPUT FILES


{
	ofstream file(ffdatadir+"BaseFlow_threshold.txt");
	file << u0x[]; 
    file << endl << endl << Re;
}; 

 cout << "Writing base flow in file BaseFlow_threshold.ff2m" << endl;
 SFWriteBaseFlow(ffdatadir+"BaseFlow_threshold.ff2m",u0,"BaseFlow",i);


{
    cout << u1x(1,1) << " " << u1y(1,1) << endl;
    ofstream file(ffdatadir+"Eigenmode_threshold.txt");
    [u1x,u1y,u1p] = [u1rx+1i*u1ix,u1ry+1i*u1iy,u1rp+1i*u1ip]; 
  	file << u1x[] ;	
  	file << endl << endl << endl << 0 << endl << omega  << endl;
}


 	cout << "Writing eigenmode in file Eigenmode_threshold.ff2m" << endl;
 	string namefileFF=ffdatadir+"Eigenmode_threshold.ff2m";
 	string typeDA = "D";

 	SFWriteMode(namefileFF,u1,1i*omega,1i*omegaM,"EigenMode"+typeDA,i); 
 		
};
cout << "	===> FindThreshold2D.edp correctly ended" << endl << endl;






