
//
//  PROGRAM Newton_Axi_COMPLEX.edp
//  computation of an axisymmetric base flow [ux,uy](x,y)
//
//  This program is similar to Newton_Axi.edp but uses the COMPLEX MAPPING technique and therefore
//  requires the base flow to be defined as complex. 
//
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re
//	INPUT FILES :
//		BaseFlow_guess.txt	-> guess base flow (generated by mesh generator, time integration or previous Newton)
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//		BaseFlow.txt			-> base flow (FF format)
//      BaseFlow.ff2m         -> base flow (FF2M format) 
//
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, BaseFlow.txt is not generated and "iter" parameter in BaseFlow.ff2m is -1.
//
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

cout << "$$$$ ENTERING Newton_Axi_COMPLEX.edp " << endl << "$$" << endl; 

include "SF_Geom.edp";
include "Param_Mapping.edp";
include "Macros_StabFem.edp";

//	int Nprof =6;
	
	real Uhole =1; // mean velocity across the hole
	
	real Uinlet = Uhole*(SFGeomRhole/SFGeomRcav)^2;
	
	real Re;
	real Reans,lecture;


cout << "###################################" << endl;
cout << endl << "       Newton_Axi.edp        " << endl; 
cout << endl << "###################################" << endl << endl;
	
	cout << " Entrer le Nombre de Reynolds :" << endl;

    cin >> Re;
    cout <<"***************************  "<< Re << endl;
    

    cout << " Parametres du mapping Lm,LA,LC,gc,yA,yB lus dans le fichier Param_Mapping.edp : " << endl; 
    cout << "Lm,LC,LA,gc,yA,yB : " << ParamMapLm  <<  " " << ParamMapLA  << " " << ParamMapLC << " " << ParamMapGC << " " << ParamMapyA << " " << ParamMapyB << endl;

	mesh th=readmesh(ffdatadir+"mesh.msh");
        fespace femp2(th,P2);   
        fespace femp1(th,P1);
        fespace femp0(th,P0);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1<complex> [uxguess,urguess,pguess];
	
	
//	cout << "Mesh : meshall.msh" << endl;
    cout << "Mesh information : number of vertices    " << th.nv <<  endl;
	cout << "                   dimension of matrices " << uxguess[].n << endl << endl;
	
	fespace p1(th,P1);
	p1 yy,xx;
	xx = real(Xphys(x,ParamMap));
	real xxmaxR = xx[].max;
	xx = imag(Xphys(x,ParamMap));
	real xxmaxI = xx[].max;
	yy = Rphys(y,ParamMap);
	real ymax = yy[].max;
	
	cout << " dimensions du domaine :  ( " 
	<< xxmaxR << " + i " << xxmaxI << " ) x " << ymax << endl;
	
	

	{
	cout << "$$ reading UVP baseflow " << endl;
    ifstream file(ffdatadir+"BaseFlow_guess.txt");
    file >> uxguess[];
	file >> Reans;
	}
	
	femp1<complex> GG;
	GG  = Hx(x,ParamMap);
	
//cout << " .5 .75 .9" << endl << GG(.1,0) << " " << GG(10,0) << " " << GG(14,0) << endl;



	cout << " Newton pour Re = " << Re << endl;	
	cout << " CI : " << Reans << endl; 
	
//		{ofstream log("log.txt",aupend);
//			log <<  "-------------------------"	<<endl;		
//			log <<  "Re = " << Re			<<endl;	
//			log <<  "CI = " << Reans		<<endl;		
//			log <<  "Nmat of the mesh = " << uxguess[].n	<<endl;}


        femp2xfemp2xfemp1<complex> [ux,ur,up]=[uxguess+0*1i,urguess+0*1i,pguess+0*1i];
	femp2xfemp2xfemp1<complex> [dux,dur,dup],[vz,vr,q];
	real nu=(2*SFGeomRhole)/Re;
        
	real epsilon=1e-6;
        real residuNewton=1e-10;
        int Nitermax=40;

        real res,ener=1.;



	
		int i=0;
         while((ener>residuNewton)&(i<=Nitermax))
        {
	    if (i==Nitermax-1) {break;
				cout<<"!!! "+Nitermax+"th iteration, the newton method will not converge !!!"<< endl;	}
			  
	solve NS([dux,dur,dup],[vz,vr,q])=
	// gradient
	int2d(th)(
        (  Rphys(y,ParamMap)*vz*(ux*dX(dux)+dux*dX(ux)+ur*dY(dux)+dur*dY(ux) )
         + Rphys(y,ParamMap)*vr*(ux*dX(dur)+dux*dX(ur)+ur*dY(dur)+dur*dY(ur) )	
         + nu*(Rphys(y,ParamMap)*dX(dux)*dX(vz)+Rphys(y,ParamMap)*dY(dux)*dY(vz)  
	     + Rphys(y,ParamMap)*dX(dur)*dX(vr)+Rphys(y,ParamMap)*dY(dur)*dY(vr)+1/Rphys(y,ParamMap)*dur*vr  )
	     - dup*(Rphys(y,ParamMap)*dX(vz)+vr+Rphys(y,ParamMap)*dY(vr))
	     + q*(Rphys(y,ParamMap)*dX(dux)+dur+Rphys(y,ParamMap)*dY(dur))
        )*1/(Hy(y,ParamMap)*Hx(x,ParamMap))
	)
	

	// second membre
 	+ int2d(th)(
         (	Rphys(y,ParamMap)*(   vr*ur*dY(ur)+vr*ux*dX(ur)
	     	+ vz*ur*dY(ux)+vz*ux*dX(ux)  )
			+ nu*(Rphys(y,ParamMap)*dX(ux)*dX(vz)+Rphys(y,ParamMap)*dY(ux)*dY(vz)  
	      	+ Rphys(y,ParamMap)*dX(ur)*dX(vr)+Rphys(y,ParamMap)*dY(ur)*dY(vr)+1/Rphys(y,ParamMap)*ur*vr  )
        	- up*(Rphys(y,ParamMap)*dX(vz)+vr+Rphys(y,ParamMap)*dY(vr))
        + q*(Rphys(y,ParamMap)*dX(ux)+ur+Rphys(y,ParamMap)*dY(ur)) 
        )*1/(Hy(y,ParamMap)*Hx(x,ParamMap))
        )
  	+on(1,dux=Uinlet-ux,dur=-ur)                  // profil constant
  	+on(2,21,dux=-ux,dur=-ur)
	+on(6,dur=-ur) // axis
	+on(7,dur=-ur); // lateral wall cavity
	
	
	

		  ener=sqrt(int2d(th)(abs(dur)^2+abs(dux)^2)/th.area);
		  
		  cout << " res = " << ener << endl;
	//		{ofstream log("log.txt",aupend);
	//		log <<  " res = " << ener 	<<endl;}	
			
				
                ur[]+=dur[];
        i++;
	
	if((i>10)&&(ener>1))
	{
	cout << " ATTENTION : DIVERGENCE PROBABLE" << endl;
	
	femp2xfemp2xfemp1 [realur,realux,realup] = [real(ur),real(ux),real(up)];
	femp2xfemp2xfemp1 [realuxguess,realurguess,realpguess] = [real(uxguess),real(urguess),real(pguess)];
	//plot(realur,realuxguess,value=1,wait=true);
	//plot(realux,realurguess,value=1,wait=true);
	//plot(realup,realpguess,value=1,wait=true);
	}
	
	}
		
// sortie des rÃ©sultats 

		if((ener>50)||(i>Nitermax))
		{
			cout << "$$ NEWTON ITERATION FAILED" << endl;
			exec("rm "+ffdatadir+"BaseFlow.txt");
			SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",-1);
		}
		else
		
		{
		  {ofstream file(ffdatadir+"BaseFlow.txt"); // file in .txt format for FreeFem solvers
		  file << ux[]; 
		  file << endl << endl << Re;
		  }; 
          exec("cp "+ffdatadir+"BaseFlow.txt "+ffdatadir+"BaseFlow_guess.txt"); 
          SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",i); // file in .ff2ml format for StabFem driver
          // plot 
		  //plot(ux,fill=1,wait=0,value=1,cmm="final ur");
			//plot(uy,fill=1,wait=0,value=1,cmm="final ux");
			//plot(p,fill=1,wait=0,value=1,cmm="final Pressure");
    
		};
          
cout << "$$$$ SUCESSFULLY LEAVING Newton_Axi_COMPLEX.edp " << endl ; 



//
