//
//  PROGRAM Newton_2D_Comp.edp
//  computation of 2D compessible base flow [ux,uy,p,T,rho](x,y)
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re, Ma
//	INPUT FILES :
//		BaseFlow_guess.txt	-> guess base flow (generated by mesh generator, time integration or previous Newton)
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//		BaseFlow.txt			-> base flow (FF format)
//      BaseFlow.ff2m         -> base flow (FF2M format) 
//
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, BaseFlow.txt is not generated and "iter" parameter in BaseFlow.ff2m is -1.
//
//
// Incorporated by David Fabre from a code of Flavio
// Modified by Javier Sierra.


//////////////
//LOADS FROM FLAVIO
//load "MUMPS_FreeFem"
load "MUMPS_FreeFem"
load "scotch";
IFMACRO(VTK,YES)
load "../SOURCES_OTHER/iovtk"
ENDIFMACRO
//load "./CPP_FUNCTIONS/BinaryIO_64";
include "SF_Geom.edp";
include "Param_Mapping.edp";
include "Macros_StabFem.edp";
//include "SF_Mesh.edp";
//include "SF_Method.edp"


//cout << "mpirank " << mpirank << endl;
//cout << " mpisize " << mpisize << endl;

real ts;
string ssparams = "nprow=1, npcol="+mpisize;
bool fplot=false;
int comp=0;


real Re,Reans,Ma,Maans;

if(mpirank==0)
{
	cout << " Enter Reynolds Number ?' " << endl;
	cin >> Re;

	cout << " Enter Mach Number ?' " << endl;
	cin >> Ma;

}

broadcast(processor(0),Re); 
broadcast(processor(0),Ma); 
cout << endl << " >>> RE = " << Re << "    ;  Mach = " << Ma << " MPIRANK " << mpirank <<endl;
	    
//////////////////////////////////////////////////////////////////////////////////////////////

real gamma=1.4; 
real Pr=0.7;
real nu=1./Re;    

mesh th;

//include "cyl_mesh.edp";
//mesh th;
if(mpirank==0)
  { 
    th=readmesh(ffdatadir+"mesh.msh");
    int[int] nupart(th.nt);
    nupart=0; 
    if(mpisize>1)
    scotch(nupart, th, mpisize);
    th=change(th,fregion= nupart[nuTriangle]);
   }
broadcast(processor(0),th); 


//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
//verbosity=10;
//real Re=1.0;

//////////////////////////////////////////////////////////////////////////////////////////////

real TOLLERANCENewton=1e-9;  /// tollerance of newton loop
int NITERATIONNEWTLOOP=40;  //////////////  Max number of ITERATIONs --> Newton loop
real TOLLERANCEDiv = 20.0; // Tolerance to reset initial condition due to divergence of the Newton method.

///////////////////////////////////////////////////////////////////////////////////////////////
fespace XH2(th,P2);
//fespace XH1(th,P1);
//fespace XH0(th,P0);
///////////////////////////////////////////////////////////////////////////////////////////////	
fespace XXxxxH(th,[P2,P2,P1,P1,P1]); ///   pres P1 + vel 2x P2 + temp P1 + dens P1
//fespace XXxH(th,[P2,P2,P1]);	     ///   vel P2 +press P1
macro def(u,p,T,rho)[u#x,u#y,p,T,rho]//EOF
//macro def(u)[u#x,u#y,u#p,u#T,u#rho]//EOF a utiliser pour simplifier (a faire dans l'avenir)
  
XXxxxH<complex> def(du,dp,dT,drho);
XXxxxH<complex> def(Ub,Pb,Tb,Rhob);
XXxxxH<complex> def(Urif,Prif,Trif,Rhorif)=[1.0,0.0,1.0,1.0,1.0];

	int testCB = exec("ls WORK/BaseFlow_guess.txt");
    	if (testCB!=0)
		{
		cout << "$$ No file BaseFlow_guess.txt : strarting from arbitrary initial condition" << endl;
		IFMACRO(!DefaultGuessForNewton) // if your want something else this macro may be redefined in your Macro_StabFem.idp
		macro DefaultGuessForNewton
		[Ubx,Uby,Pb,Tb,Rhob] = [1.0,0.0,1.0,1.0,1.0]; //EOM
		ENDIFMACRO
		DefaultGuessForNewton;
		} 
		else
		{
		cout << "$$ Reading file BaseFlow_guess.txt" << endl;
		 ifstream file(ffdatadir+"BaseFlow_guess.txt");
        file >> Ubx[];
		file >> Reans;
		file >> Maans;
		cout << "$$ Re of guess field : " << Reans << endl; 
		};

cout << "$$ Newton for Re = " << Re << endl;	
cout << "$$ Reynolds of the initial condition : " << Reans << endl;

  macro div(u) ((Dx(u#x)+Dy(u#y)))   //EOM
  macro ugradf(u,f) ((u#x*Dx(f)+u#y*Dy(f)))    //
//macro gradfgradf(f,f1) ((Dx(f)*Dx(f1)+Dy(f)*Dy(f1)))  //
//macro strain(u1,u2,v1,v2) ((Dx(u1)*Dx(v1)+(1./2)*(Dx(u2)+Dy(u1))*(Dx(v2)+Dy(v1))+Dy(u2)*Dy(v2)))  //
  macro termnonlinear(u,v,w) ((w#x*(u#x*Dx(v#x)+u#y*Dy(v#x))+w#y*(u#x*Dx(v#y)+u#y*Dy(v#y)))) //
  macro Grad(u) [[Dx(u#x),Dx(u#y)],[Dy(u#x),Dy(u#y)]]//EOM
  macro Strain(u)[[Dx(u#x),0.5*(Dx(u#y)+Dy(u#x))],[0.5*(Dx(u#y)+Dy(u#x)),Dy(u#y)]]//EOM
  macro gradgrad(u,v)(Dx(u)*Dx(v)+Dy(u)*Dy(v))//EOM
  
  varf dirichlet(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=on(bcinlet,dux=1.0-Ubx,duy=0.0-Uby,dT=1.-Tb,drho=1.-Rhob)
  +on(bcoutflow,dux=1.0-Ubx,duy=0.0-Uby,dT=1.-Tb,drho=1.-Rhob)
  +on(bcwall,dux=0.0-Ubx,duy=0.0-Uby);

varf jacobian(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=int2d(th,mpirank)( (JJ)*((rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
								       //mass equation
								       -dp/(gamma*Ma^2)*div(us)+2.0/Re*(Strain(du):Grad(us))-2.0/(3.0*Re)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)+drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
								       //momentum
								  +Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)+(gamma-1)*(div(Ub)*dp + Pb*div(du))-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))+gamma/(Pr*Re)*gradgrad(dT,Ts)
								       // energy
								       +ps*(dp-(drho*Tb+Rhob*dT))
								  )))
  +BoundaryconditionsBaseFlow(du,dp,dT,drho);


varf vNs(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=-int2d(th,mpirank)( (JJ)*(rhos*(Rhob*div(Ub)+ugradf(Ub,Rhob))
							   //mass equation
							   -Pb/(gamma*Ma^2)*div(us)+2.0/Re*(Strain(Ub):Grad(us))-2.0/(3.0*Re)*(div(Ub)*div(us))+Rhob*termnonlinear(Ub,Ub,us)
							   //momentum
								   +Ts*(Rhob*ugradf(Ub,Tb)+(gamma-1)*Pb*div(Ub)-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(Ub):Strain(Ub)))-2.0/3.0*(div(Ub)*div(Ub))))+gamma/(Pr*Re)*gradgrad(Tb,Ts)
							   // energy
							   +ps*(Pb-(Rhob*Tb))
							   ))
  +BoundaryconditionsBaseFlow(du,dp,dT,drho);

real res,ener=1.;
if(mpirank==0)
  {
    cout << " ................................................... "<< endl;	
    cout << " ................................................... "<< endl;	
  }
int contout=0;

  
    ///////////////////////////////////////////////////////////////////////
    
    
    

	res=1.0;
	ener=1.0;
	

	 
	  int i=0;
	  while((ener>TOLLERANCENewton)&(i<=NITERATIONNEWTLOOP))
	    {
	      ts=clock();
	      
	      matrix<complex> NewtLoc=jacobian(XXxxxH,XXxxxH);
	      matrix<complex> Newt;
	      mpiAllReduce(NewtLoc,Newt,mpiCommWorld,mpiSUM);
	      if(mpirank==0)
		cout<<"Matrix formed in "<<clock()-ts<<" s"<<endl;  
	      complex[int] rhsl= vNs(0,XXxxxH);
	      complex[int] rhs(Newt.n);
	      mpiAllReduce(rhsl,rhs,mpiCommWorld,mpiSUM);
	      set(Newt,solver=sparsesolver,sparams=ssparams);
	      dux[] =  (Newt^-1*rhs);
	      ener=sqrt(int2d(th)(abs(duy)^2+abs(dux)^2)); 
	      if(mpirank==0)
		{
		  cout << "iter "<<i<<" | sqrt(int2d(th)(dux^2+duy^2)) = " << ener << endl;
		}
	      Ubx[]+=dux[];
	      i++;	    
	    if(ener > TOLLERANCEDiv && i <= 5)
	    {
	    	cout << "Initial condition has been reseted" << endl;
	    	Ubx[] = Urifx[];
	    }
	     }// end of NEWTON LOOP
	     
	     /// NEXT IS PLOT AND POSTPROCESS
	  
	  if(mpirank==0)
	    {
	      //cout << "p,T,rho,u,v at (5,0): " << pp(5,0) << " " << Tp(5,0) << " " << rhop(5,0) << " " << uxp(5,0) << " " << uyp(5,0) << endl;
	      cout << " -------------------------------------------------------- "<< endl;	
	      plot(Pb,fill=1,value=1,cmm="press");
	      plot(Uby,fill=1,value=1,cmm="vel: y-component");
	      plot(Ubx,fill=1,value=1,cmm="vel: x-component");
	      plot(Tb,fill=1,value=1,cmm="Temp");
	      plot(Rhob,fill=1,value=1,cmm="density");
	      cout << " Newton iteration ok!"<< endl;
	    };
	  
	  
	  
	  ////// OUTPUT FOR STABFEM  
	    
	    // sortie des r?sultats 

//		if((ener>50)||(iter>Nitermax))
//		{
//			cout << " NEWTON ITERATION FAILED" << endl;
//			exec("rm "+ffdatadir+"BaseFlow.txt");
//			SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",-1);
//		}
//		else
		

// temporary fix
XXxxxH<complex> [ux,uy,up,utemp,uro] = [(Ubx),(Uby),(Pb),(Tb),(Rhob)];
XXxxxH [urx,ury,urp,urtemp,urro] = [real(Ubx),real(Uby),real(Pb),real(Tb),real(Rhob)];

		{
		  {ofstream file(ffdatadir+"BaseFlow.txt"); // file in .txt format for FreeFem solvers
		  file << ux[]; 
		  file << endl << endl << Re << endl << Ma << endl;
		  }; 
          exec("cp "+ffdatadir+"BaseFlow.txt "+ffdatadir+"BaseFlow_guess.txt"); 
         

          SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",ur,"BaseFlow",i); // file in .ff2ml format for StabFem driver
         IFMACRO(VTK,YES)
          int[int] forder=[1,1,1,1];
		  savevtk(ffdatadir+"/BflowCM_Re"+Re+"_M"+Ma+".vtk",th,urp,[urx,ury,0],urtemp,urro,order=forder,dataname="Pb vel temp rho");
		  ENDIFMACRO
		};
          

	    
	    
	  



