//
//  PROGRAM LinearForcedAxi_COMPLEX_m0.edp
//  computation of a linear harmonically forced problem for a single or multiple choices of omega
//
//	This solver uses the complex mapping ; 
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	typecalc -> 'single', 'range', or 'array'
//	 	'single' -> omega (real) (in this case a structure field is produced)
//		'range' -> omegamin, omegastep, omegamax (real)
//		'array' -> user-defined range (complex) (N, omega1, sigma1, omega2, sigma2, ....)
//
//	INPUT FILES :
//		BaseFlow.txt		-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//
//  OUTPUT FILES :
//		Impedance.ff2m -> formatted file, structure defined in macro
//		Impedance_Chi##_Re###.txt 
//
// 	ERROR MANAGEMENT : 
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

cout << "$$$$ ENTERING LoopImpedance.edp " << endl << "$$" << endl; 

include "SF_Geom.edp";
include "Param_Mapping.edp";
include "Macros_StabFem.edp";

int NNN = 10000;	
string typecalc; 
int Nomega;
complex[int] omegaarray(NNN);
	
cout << "$$ ENTERING Function LinearForcedAxiCOMPLEX_m0.edp" << endl;
cout << "$$ Selection of parameters : " << endl;
cout << "$$ Enter type  (single, range, array)  >> " ;
cin >> typecalc;
cout << typecalc << endl;
if(typecalc=="single")
	{
		cout << "$$ Enter omega  >> " ;
		cin >> omegaarray(0)  ;
		cout <<  omegaarray(0) << endl;	
		Nomega = 1;
	}
	else if(typecalc=="range")
	{
		real omegamin,omegamax,omegastep;
		cout << "$$ Enter omegamin, omegastep,  omegamax  >> " ;
		cin >> omegamin >> omegastep >> omegamax ;
		cout <<  omegamin << " , " << omegastep << " , " << omegamax << endl;
		Nomega = (omegamax-omegamin)/omegastep+1;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin+kk*omegastep;};
	}
	else if(typecalc=="array")
	{
		real omegar,omegai;
		cout << "$$ Enter Number of omega values N >> " ;
		cin >> Nomega;
		cout << Nomega << endl;
		cout << "$$ Enter successively omega1, sigma1, omega2, sigma2, (...) omegaN, sigmaN  >> " ;
		for(int kk=0;kk<Nomega;kk++)
		{
			cin >> omegar >> omegai; 
			omegaarray(kk) = omegar+1i*omegai;
		};
		cout << endl << "$$ (successfully read " << Nomega << " complex values " << endl;
	}
	else
	{
		cout << " Error : typecalc = " << typecalc << " is not a valid value !" << endl;
		exit(10); 
	};


	mesh th=readmesh(ffdatadir+"mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1<complex> [uxp,urp,pp];
    p2xp2xp1<complex> [ux,ur,up],[vx,vr,q];
    p2xp2xp1 [urr,uzr,pr],[uri,uzi,pii];
    
	int m=0; 
	real Re;
//	real epsilonPQ = 0*1e-20; // terme de desingularisation
	complex omega;

	{
	ifstream cbin(ffdatadir+"BaseFlow.txt");
	cbin >> uxp[];
	cbin >> Re;
	};
	cout << " Lecture BaseFlow : Re = " << Re << endl;
	real nu=SFGeomLengthscale*SFGeomVelocityscale/Re; // NB SFGeom parameters should be defined in SF_Geom.edp
	cout << "nu = " << nu << endl;
	




	
macro BoundaryConditionsForcedProblem(u,v)
	on(1,u#x=(SFGeomRhole/SFGeomRcav)^2,u#r=0.)
  	+ on(2,u#x=0.,u#r=0.)	
	+ on(6,7,u#r=0.) 
	//EOM 
	
	
macro ForcedLinearStatisticsINIT(namefile)
{
	ofstream fileforces(namefile+".txt");
    fileforces << "%% omegar omegai Zr Zi "  << endl;			
    ofstream file(namefile+".ff2m");
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Impedance of a whistling jet" << endl;
    file << "datatype ForcedLinear" << endl;
	file << "real ind complex omega  complex  Z" << endl;
}
//EOM

macro ForcedLinearStatistics(namefile)
{
	
	complex Rate = 2*pi*int1d(th,1)(ux*y);
	complex pin = int1d(th,1)(y*up)/int1d(th,1)(y); 
	/*real Energy = int2d(th)(Rphys(x,y,ParamMap)/abs(Hy(y,ParamMap)*Hx(x,ParamMap))*(abs(ux)^2+abs(ur)^2));*/
	complex Imp = (pin/Rate);
	cout << ">>>> JET PULSE :  omega = " << omega << endl;
	cout << ">>>> Debit Q = " << Rate << endl;
	cout << ">>>> DeltaP (= Pression  entree) = " << pin << endl;
	cout << ">>>> IMPEDANCE = P/Q = " << Imp << endl;
	cout << ">>>> Ux(1,0) = " << ux(1,0) << endl;
	ofstream fileforces(namefile+".txt",append);
	fileforces << ind << " " << real(omega) << " " << imag(omega) << " " << real(Imp) << " " << imag(Imp) << endl;		
	ofstream file(namefile+".ff2m",append);
	file << ind << " " << real(omega) << " " << imag(omega) << " " << real(Imp) << " " << imag(Imp) << endl;		
}
//EOM	
	
	
	
	problem ForcedLinear([ux,ur,up],[vx,vr,q],eps=1e-16) = 
	int2d(th)(
	(
	- Rphys(x,y,ParamMap)*vx*(
		(uxp*dX(ux)+ux*dX(uxp)+urp*dY(ux)+ur*dY(uxp))	
		  -1i*omega*ux )  				
	- Rphys(x,y,ParamMap)*vr*(
		(uxp*dX(ur)+ux*dX(urp)+urp*dY(ur)+ur*dY(urp))	
		-1i*omega*ur )	
	- nu*(Rphys(x,y,ParamMap)*dX(ux)*dX(vx)+Rphys(x,y,ParamMap)*dY(ux)*dY(vx)  
	+ Rphys(x,y,ParamMap)*dX(ur)*dX(vr)+Rphys(x,y,ParamMap)*dY(ur)*dY(vr)+1/Rphys(x,y,ParamMap)*ur*vr  )  
	+ up*(Rphys(x,y,ParamMap)*dX(vx)+vr+Rphys(x,y,ParamMap)*dY(vr))
	- q*(Rphys(x,y,ParamMap)*dX(ux)+ur+Rphys(x,y,ParamMap)*dY(ur))
	)*JJ
	)
	+ BoundaryConditionsForcedProblem(u,v); 


// Initialisation of output files
string namefile = ffdatadir+"LinearForcedStatistics";
ForcedLinearStatisticsINIT(namefile);	


// Loop over omega
for(int ind = 0; ind<Nomega; ind++)
{
	omega  = omegaarray(ind);

	cout << "$$ Calcul d'un probleme lineaire force pour un trou ; Re    = " << Re << endl; 
	cout << "$$                                                    nu    = " << nu << endl;
	cout << "$$                                                    omega = " << omega << endl;	

	ForcedLinear;
	ForcedLinearStatistics(namefile);
	
	
	
	IFMACRO(FREEFEMPLOTS,YES)
	plot(ux,cmm="Structure of forced flow for omega = "+omega,wait=1,fill=1);
	ENDIFMACRO
	
	
	if(Nomega==1)
	{
    ofstream file(ffdatadir+"ForcedFlow.txt");
  	file << ux[] ;	
   	file << endl << endl << imag(omega) << "   " << -real(omega)  << endl;
	SFWriteForced(ffdatadir+"ForcedFlow.ff2m",u,1i*omega)
	};

};
// end Loop



cout << "$$$$ LEAVING LoopImpedance.edp " << endl << "$$" << endl; 
	
	
