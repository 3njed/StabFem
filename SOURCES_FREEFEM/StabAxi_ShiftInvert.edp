//
//  PROGRAM StabAxi_ShiftInvert.edp
//
// Generic solver for the stability of an axisymmetric base flow SHIFT INVERT DIRECT
// 30 mai 2017
// History : recupere du cas jet sifflant


// USAGE : 
// Input arguments (from keyboad or pipe) : Re ; m ; shift
//
// INPUT FILES : 
//		mesh.msh mesh file
// 		chbase.txt base flow file (last line is Reynolds)
//		(optional) :  Eigenmode_guess.txt used as a start to speed up the convergence  
//
// OUTPUT FILES
//		Eigenvalues.txt 	-> Re(lambda) ; Im(lambda) ; Re ; m ; Re(shift) ; Im(shift)
//		Eigenmode.txt 	-> Eigenmode in freefem format
//		Eigenmode.ff2m 	-> Eigenmode in ff2m format (for matlab)
//		(if needed on can add the tecplot and paraview format)		
//
//	if computation converges Eigenmode_guess.txt is removed (reset it in driver if needed)
//	if computation diverges Eigenvalues.txt is empty



	load "UMFPACK64"
/// DECLARATIONS FORMELLES
//	include "Params_Conduct.edp";
	real G=1; real Gy = 1;
	macro yphys y //
	
//	int Nprof =6;
//	macro Uin(rr) ( (2+Nprof)/Nprof*(1-rr^Nprof) )  //EOM
	
	mesh th=readmesh("mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1 [urp,uzp,pp];
    p2xp2xp2xp1<complex> [ur,ut,uz,p],[vr,vt,vz,q];
    p2xp2xp2xp1<complex> [ur0,ut0,uz0,p0];
    p2xp2xp2xp1 [urr,utr,uzr,pr],[uri,uti,uzi,pii];
    
	int m=1; 
	real nu,Re,Rechbase,sigmar,sigmai,shiftr,shifti;
	real epsilonPQ = 0*1e-20; // terme de desingularisation
//	real S = 100.;
//	real Q = 1.;

	{
	ifstream cbin("chbase.txt");
	cbin >> urp[];
	cbin >> Rechbase;
	};
    	
	
	cout << "########################################################" << endl;
	cout << "### EIGENVALUE COMPUTATION (S/I) "<< endl ;
	cout << "### GENERIC SOLVER " << endl;
	
//	cout << "### Jet through single hole, H/D = " << ep/(2*Rhole) << " ; Re = " << Re << endl;
//	cout << " ### NON-AXI (m=1), incompressible case" << endl; 
//	cout << "### With complex coordinate mapping (D. Fabre et al., V2.0, dec. 2016)" << endl;
//	cout << "########################################################" << endl << endl;

	cout << " Entrez Re :   " << endl; 
	cin  >> Re;
	//cout << " ---> Re = " << Re << endl;
	
	
	cout << " Entrez m :   " << endl; 
	cin  >> m ;

	
	cout << " Entrez SHIFT (re,im) :   " << endl; 
	cin  >> shiftr >> shifti;
	complex shift = 1i*shifti+shiftr;
	
	int nev;
//    cout << " Entrez nev (1 pour direct ; - 1 pour adjoint)" << endl;
//    cin >> nev ;
	
	
	
	cout << " Calcul de VP SHIFT/INVERT ; Re    = " << Re << endl; 
	cout << "                             m     = " << m << endl;
	cout << "                             shift = " << shiftr << " +i " << shifti << endl;
	if (nev>0) {cout << " nev = " << nev << " : probleme DIRECT" << endl;};
	if (nev<0) {cout << " nev = " << nev << " : probleme ADJOINT" << endl;};
	
	
	if (Rechbase!=Re) {cout << " WARNING : Re(base flow) differs from Re" << endl;} ; 
    nu=1/Re;


/// declaration probleme
///  
/// This solves (A - shift B) X_{n+1} = B X_n
/// Here X_n is uz0[] and X_{n+1} is uz[] 
///
/// This problem converges to X_{n+1} = G X_n with G = 1/(sigma-shift)


      macro dX(t) G*dx(t)//
      macro dY(t) Gy*dy(t)//
          
    	problem ShiftInvertm0([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation
	int2d(th)((
	- yphys*vz*(uzp*dX(uz)+uz*dX(uzp)+urp*dY(uz)+ur*dY(uzp) )
	- yphys*vr*(uzp*dX(ur)+uz*dX(urp)+urp*dY(ur)+ur*dY(urp) )
	- yphys*vt*(uzp*dX(ut)+urp*dY(ut) )-urp*ut*vt
	- nu*(yphys*dX(uz)*dX(vz)+yphys*dY(uz)*dY(vz)+m^2/yphys*uz*vz  
	+ yphys*dX(ut)*dX(vt)+yphys*dY(ut)*dY(vt)+(m^2+1)/yphys*ut*vt 
	+ yphys*dX(ur)*dX(vr)+yphys*dY(ur)*dY(vr)+(m^2+1)/yphys*ur*vr 
	+ 2i*m*vr*ut/yphys-2i*m*vt*ur/yphys)  
	+ p*(yphys*dX(vz)+vr+yphys*dY(vr)-1i*m*vt)
	- q*(yphys*dX(uz)+ur+yphys*dY(ur)+1i*m*ut)
	- yphys*shift*(ur*vr+ut*vt+uz*vz)
	)*1/(G*Gy))
	
	+ int2d(th)
    (-yphys*(vz*uz0+vr*ur0+vt*ut0)*1/(Gy*G))
	
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(2,21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(6,ur=0.,ut=0) //for m=0
	+ on(7,ur=0.); 

 	problem ShiftInvertm1([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation
	int2d(th)((
	- yphys*vz*(uzp*dX(uz)+uz*dX(uzp)+urp*dY(uz)+ur*dY(uzp) )
	- yphys*vr*(uzp*dX(ur)+uz*dX(urp)+urp*dY(ur)+ur*dY(urp) )
	- yphys*vt*(uzp*dX(ut)+urp*dY(ut) )-urp*ut*vt
	- nu*(yphys*dX(uz)*dX(vz)+yphys*dY(uz)*dY(vz)+m^2/yphys*uz*vz  
	+ yphys*dX(ut)*dX(vt)+yphys*dY(ut)*dY(vt)+(m^2+1)/yphys*ut*vt 
	+ yphys*dX(ur)*dX(vr)+yphys*dY(ur)*dY(vr)+(m^2+1)/yphys*ur*vr 
	+ 2i*m*vr*ut/yphys-2i*m*vt*ur/yphys)  
	+ p*(yphys*dX(vz)+vr+yphys*dY(vr)-1i*m*vt)
	- q*(yphys*dX(uz)+ur+yphys*dY(ur)+1i*m*ut)
	- yphys*shift*(ur*vr+ut*vt+uz*vz)
	)*1/(G*Gy))
	
	+ int2d(th)
    (-yphys*(vz*uz0+vr*ur0+vt*ut0)*1/(Gy*G))
	
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(2,21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(6,uz=0.) //for m=1
	+ on(7,ur=0.); 



 	problem ShiftInvertm2([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation
	int2d(th)((
	- yphys*vz*(uzp*dX(uz)+uz*dX(uzp)+urp*dY(uz)+ur*dY(uzp) )
	- yphys*vr*(uzp*dX(ur)+uz*dX(urp)+urp*dY(ur)+ur*dY(urp) )
	- yphys*vt*(uzp*dX(ut)+urp*dY(ut) )-urp*ut*vt
	- nu*(yphys*dX(uz)*dX(vz)+yphys*dY(uz)*dY(vz)+m^2/yphys*uz*vz  
	+ yphys*dX(ut)*dX(vt)+yphys*dY(ut)*dY(vt)+(m^2+1)/yphys*ut*vt 
	+ yphys*dX(ur)*dX(vr)+yphys*dY(ur)*dY(vr)+(m^2+1)/yphys*ur*vr 
	+ 2i*m*vr*ut/yphys-2i*m*vt*ur/yphys)  
	+ p*(yphys*dX(vz)+vr+yphys*dY(vr)-1i*m*vt)
	- q*(yphys*dX(uz)+ur+yphys*dY(ur)+1i*m*ut)
	- yphys*shift*(ur*vr+ut*vt+uz*vz)
	)*1/(G*Gy))
	
	+ int2d(th)
    (-yphys*(vz*uz0+vr*ur0+vt*ut0)*1/(Gy*G))
	
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(2,21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(6,uz=0.,ur=0.,ut=0) //for m=2
	+ on(7,ur=0.); 
    
	
// initialisation
//	[ur0,ut0,uz0,p0] = [urp,0,uzp,pp]; // simplest method : X_1 = base flow


int testCB = exec("ls Eigenmode_guess.txt");
    	if (testCB!=0)
		{
		cout << "no file Eigenmode_guess.txt : strarting from arbitrary initial condition" << endl;
		[ur0,ut0,uz0,p0] = [0,0,1,0];
		} 
		else
		{
		cout << "starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin("Eigenmode_guess.txt");
		cbin >> ur0[];
};
		




	int itmax = 30;
	complex sigma0 = 1e6;
	real err = 1e6;
	real errmax=1e-6;
	complex sigma;
	
/// ITERATION LOOP
int i;
	for (i=0; ((err>errmax)&&(i<itmax)); i++)
	{
		if(m==0)
		    { ShiftInvertm0;};
		  if(abs(m)==1)
		    { ShiftInvertm1;};
		  if(abs(m)>1)
		    { ShiftInvertm2;};
		
	
	complex XnXn1 = int2d(th)(uz0*uz+ut0*ut+ur0*ur);
	complex Xn1Xn1 =  int2d(th)(uz*uz+ut*ut+ur*ur);
	complex GG = Xn1Xn1/XnXn1;
// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
	sigma = shift+1/GG;
	err = abs(sigma-sigma0);
	cout << " iteration " << i+1 << " : " << endl;	
//	cout << " GG = " << GG << endl;
//	cout << " XnXn = " << XnXn << endl;
	cout << " estimated eigenvalue sigma = " << sigma << endl;	
	
	ur0[] = 1/sqrt(abs(Xn1Xn1))*ur[];
	sigma0 = sigma;
	}
/// END ITERATION LOOP	


 
if(i<itmax) 
{	
sigmar = real(sigma) ; sigmai = imag(sigma);

{
    ofstream file("Eigenvalues.txt");
           file << sigmar << " " << sigmai << " " << Re << " " << m << " " << real(shift) << " " << imag(shift) << endl;
}

{
    ofstream file("Eigenmode.txt");
  	file << ur[] ;	
   	file << endl << endl << Re << endl
   	<< endl << sigmar << "   " << sigmai << " " << m << endl;
}

if (testCB==0)
		{
		exec("rm Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
		};
		

	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,ur1,ut1,pp1,vort1;

	{
 		 ofstream file("Eigenmode.ff2m");
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "EIGENMODE for a disk in a pipe (SHIFT-INVERT)" << endl;
    	 file << "Format :" << endl;
	     file << "real Re real m complex sigma complex shift int iter P1c ux1 P1c ur1 P1c ut1 P1c p1 P1c vort1" << endl << endl ; 
			file << Re << endl << m << endl << sigmar << " " << sigmai  << " " << shiftr << " " << shifti  <<  "  " << i << endl << endl;
 		ux1=uz;
		ur1=ur;
		ut1=ut;
		pp1=p;
		vort1=dy(uz)-dx(ur);
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(ur1[][j]) << " " << imag(ur1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(ut1[][j]) << " " << imag(ut1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
	};
}
else
{
cout << "Shift/invert algorithm not converging ; guess may be wrong" << endl;
ofstream file("Eigenvalues.txt");
           file << endl;
};



	