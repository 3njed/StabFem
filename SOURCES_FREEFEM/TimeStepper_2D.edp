//
//  PROGRAM TimeStepper_2D.edp
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re
//		rep	
//	    itmax	
//      dt
//      iout
//		iplot
//	INPUT FILES :
//		DNSFIELDS/dnsfield_#####.txt
//
//  OUTPUT FILES :
//		DNSFIELDS/dnsfield_#####.txt
//		DNSFIELDS/dnsfield_#####.ff2m
//
// 	ERROR MANAGEMENT : 
//
//

		cout << "$$$$ ENTERING TimeStepper_2D.edp " << endl << "$$" << endl; 
		include "SF_Geom.edp";
		include "Macros_StabFem.edp";


		//include "data.txt"
//		real epsilon=1e-8;
		real xpres = -80.;
		real ypres = 0.;
		
		
//    macro Trainee(u1,u2,p)   
//	(
//	int1d(th,2,21,22,23)(p*N.x)
//	-nu*int1d(th,2,21,22,23)( (2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
//	)
	//EOM
//	macro Portance(u1,u2,p)   
//	(
//	int1d(th,2,21,22,23)(p*N.y)
//	-nu*int1d(th,2,21,22,23)( (2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
//	)
	//EOM
		
		
		real Re,omega,epsilon,dt,Reans,tps;
		int rep,itmax;
		int iout; // to generate output files each iout time steps
		int iplot; // to plot (if using in interactive mode)

		cout << "###" << endl <<  "### TIME STEPPER for the flow around a cylinder" << endl << "###" << endl << endl;
		cout << "Enter Re : "<< endl;
		cin >> Re;			
		cout << "Enter initial instant : (0 means start from base flow + eigenmode) "<< endl;
		cin >> rep;	
		cout << "Enter itmax"<< endl;
		cin >> itmax;	
		cout << "Enter dt"<< endl;
		cin >> dt;	
		cout << " Enter iout " << endl;
		cin >> iout;
		cout << " Enter iplot " << endl;
		cin >> iplot;

		int imean;
		cout << " Mode de calcul ? [0 -> pas de champ moyen] [1 -> calcul du champ moyen sur 1 periode] [2 -> calcul de l'ecart au champ moyen]" << endl;
		cin >> imean; 
		

		

		//		dt = 0.001;

		cout << endl << "Starting computation with : "<< endl;
		cout << "       Re = " << Re << endl;
		cout << "       dt = " << dt << endl;
		real nu=1./Re;



	
  		mesh th=readmesh(ffdatadir+"mesh.msh");
  		fespace femp2(th,P2);
		fespace femp1(th,P1);
		fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
		femp2xfemp2xfemp1 [u1init,u2init,pinit];
		femp2xfemp2xfemp1 [u1mean,u2mean,pmean],[u1prime,u2prime,pprime];
		femp2xfemp2xfemp1 [uDNSx,uDNSy,uDNSp];
		
		u1mean[] = 0;
  

// PARTIE A REVOIR

	if(rep==0) // starting from base flow
	
	/// A REVOIR SI ON VEUT L'INTEGRER ENTIEREMENT
	 
	{  femp2xfemp2xfemp1 [u1b,u2b,pb];
	   femp2xfemp2xfemp1<complex> [um1s,um2s,pms];    //eigenmode (start)     
	   	   real A;
	   cout << "Starting from base flow " << endl; //(chbase.txt) + A*eigenmode (Eigenmode.txt)" << endl;
//	   cout << "Initial amplitude A ? " << endl;
//	   cin >> A;
	    {
        ifstream file(ffdatadir+"dnsfield_start.txt");
        file >> u1b[];
		file >> Reans;
        };
     //   {
      //    ifstream file("Eigenmode.txt");
      //  file >> um1s[];
       // };
       // complex AA = 0;//Portance(um1s,um2s,pms);
	  //[u1init,u2init,pinit] = [u1b+real(AA*um1s),u2b+real(AA*um2s),pb+real(AA*pms)];
	  [u1init,u2init,pinit] = [u1b,u2b,pb];
	  tps = 0;
	  exec("rm dns_liftanddrag_Re"+Re+".txt");
	}
	else
	{
		ifstream file(ffdatadir+"DNSFIELDS/dnsfield_"+rep+".txt");
	  file >> u1init[];
	  file >> tps;
	  cout << "Starting from previous field for it= " << rep << " ; tps = " << tps << endl; 

	};
	
		
 if(imean==2)

	{
                ifstream g(ffdatadir+"DNSFIELDS/MeanFlowDNS_Re"+Re+".txt");
				g >> u1mean[];
				cout << " Lecture du champ moyen OK " << endl;
    };
      	 
// FIN DE LA PARTIE A REVOIR



		femp1 cfl=1.*dt/hTriangle;
		femp1 rem=1*hTriangle/nu;

IFMACRO(FREEFEMPLOTS,YES)
		plot(cfl,cmm="cfl",fill=1,value=1,wait=0);
		plot(rem,cmm="remaille",fill=1,value=1,wait=0);
ENDIFMACRO

		femp2 up1, up2;
		femp2 upp1, upp2;
		femp2xfemp2xfemp1 [r1,r2,r3];


		real a0,a1,a2,bet0,bet1;

		varf NS([u1,u2,p],[v1,v2,q])=
    		 int2d(th)(
        	    	 a0*( u1*v1 + u2*v2)/dt
            		+ nu * ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
            		+ dx(u2)*dx(v2) + dy(u2)*dy(v2) )
            		+ p*q*epsilon 
            		- p*dx(v1)- p*dy(v2)
            		- q*dx(u1)- q*dy(u2))
  		 +on(1,u1=1.,u2=0.)
  		 +on(2,u1=0.,u2=0.)
		 +on(4,6,u2=0.);

		varf SMNS([u1,u2,p],[v1,v2,q])=
		-int2d(th) (a1*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up1)*v1/dt
			   +a1*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-dt,up2)*v2/dt)
		-int2d(th) (a2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp1)*v1/dt
			   +a2*convect([bet0*up1+bet1*upp1,bet0*up2+bet1*upp2],-2*dt,upp2)*v2/dt)
  		 +on(1,u1=1.,u2=0.)
  		 +on(2,u1=0.,u2=0.)
		 +on(4,6,u2=0.);


 			a0=1.5; a1=-2.; a2=0.5; bet0=2; bet1=-1; // coeffs for order 2
//		 	 a0=1; a1=-1; a2=0; bet0=1; bet1=0; // coeffs for order 1


		matrix NSMAT=NS(femp2xfemp2xfemp1,femp2xfemp2xfemp1,solver=UMFPACK,tgv=1.e30);
                                          

	up1 = u1init; up2 = u2init; 
	
	upp1 = up1; upp2 = up2; // We could impro ve by reading the file number (it-1)
	
	
	[uDNSx,uDNSy,uDNSp] = [u1init,u2init,pinit];
	int it;
	real Energieprimemean;
	
	
	// INITIALISING TIME STATISTICS FILES
	DNSTimeStatisticsINIT(ffdatadir+"dns_Stats_Re"+Re)
	
	
	
	
	
	////// BEGINING OF TIME LOOP
	
		for (it=rep+1;it<itmax+1;it++)
 		{
			upp1=up1;
			upp2=up2;
   			up1=uDNSx;
  			up2=uDNSy;
			
			r1[]=SMNS(0,femp2xfemp2xfemp1,tgv=1.e30);
			uDNSx[]=NSMAT^-1*r1[];
		    tps+=dt;

	// Generating time statistics files
	DNSTimeStatistics(ffdatadir+"dns_Stats_Re"+Re)
       
	
if (!((it)%iplot))
// each iplot we plot the results
	{
		plot(uDNSx,wait=0,fill=1,cmm="Ux for it = "+(it) );
	};

if (!((it)%iout))
// each iout time step we generate output files
	{
       ofstream g(ffdatadir+"DNSFIELDS/dnsfield_"+(it)+".txt");
		g << uDNSx[] << endl << endl;
		g << Re << endl << endl;
		g << tps << endl << endl;
		
		SFWriteDNSField(ffdatadir+"DNSFIELDS/dnsfield_"+(it)+".ff2m",uDNS,"DNSField",it)
		
    };


 }; 

// COMPUTATION OF A MEAN FLOW IF DESIRED
             
    if(imean==1)
	{
		u1mean[] = u1mean[]/(itmax-rep);
	    {
                ofstream g(ffdatadir+"MeanFlowDNS_Re"+Re+".txt");
				g << u1mean[] << endl << endl;
				g << Re << endl << endl;
				g << tps << endl << endl;
				SFWriteDNSField(ffdatadir+"DNSFIELDS/dnsfield_"+(it)+".ff2m",uDNS,"DNSField",it)
        };
        
        plot(u1mean,wait=1,fill=1,cmm="Ux MEAN" );
	};       
 		 		
 	 if(imean==2)	
 		{
 			Energieprimemean=Energieprimemean/(itmax-rep);
 			cout << "Energieprimemean = " << Energieprimemean << endl;
 			cout << " A = sqrt(Eprimemean) = " << sqrt(Energieprimemean) << endl;
 		};
 		
 	
 
// BELOW IS AN EXAMPLE OF MACROS FOR POST-PROCESSING (these should be put in your Macros_StabFem.edp file) 
 	
/* 		
macro DNSTimeStatisticsINIT(namefile)
{
	ofstream fileforces(namefile+".txt",append);
    fileforces << "%% tps   Energie Energieprime Fwallx Fwally Fplatex Fplatey pbottom"  << endl;			
    ofstream file(namefile+".ff2m",append);
    file << "### Data generated by Freefem++ ; " << endl;
    file << "DNS Time-series of a 2D-incompressible problem " << endl;
    file << "datatype TimeStatistics" << endl;
	file << "real tps real Energie real EnergiePrime real Fwallx real Fwally real Fplatex real Fplatey real pbottom " << endl;
}
//EOM

macro DNSTimeStatistics(namefile)
		real Energie = int2d(th)((uDNSx-1)^2+uDNSy^2);
		real Energieprime=0;		
	if(imean==1)
	{
		u1mean[] += uDNSx[];
	};
	if(imean==2)
	{
		u1prime[] = uDNSx[]-u1mean[];
		Energieprime = int2d(th)(u1prime^2+u2prime^2);
		Energieprimemean += Energieprime;
	};
		cout << "iter " << it << " ; Energy " << Energie  << " ; Pressure bottom cavity = " << Pressure(uDNS,23) <<  endl;
		{
			ofstream fileforces(namefile+".txt",append);
				fileforces << tps << " " << Energie << " " << Energieprime << " " 
				<< Forcex(uDNS,24)  << " " <<  Forcey(uDNS,24) << " "  << Forcex(uDNS,25) << " "  << Forcey(uDNS,25) << " " << Pressure(uDNS,23) << endl;		
			ofstream file(namefile+".ff2m",append);
				file << tps << " " << Energie << " " << Energieprime << " "  
				<< Forcex(uDNS,24)  << " " <<  Forcey(uDNS,24) << " "  << Forcex(uDNS,25) << " "  << Forcey(uDNS,25) << " " << Pressure(uDNS,23) << endl;
		}
//EOM	
 */		