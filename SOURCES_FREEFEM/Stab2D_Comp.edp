//
//  PROGRAM Stab2DComp.edp
//	
//	Performs the linear stability analysis of a 2D compressible flow
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re , Ma, shift(Re,im) , Symmetry, Type, nev 
//
//   this solver will use either Arnoldi (if nev>1) or simple Shift-invert (if nev=1)
//
//	INPUT FILES :
//		BaseFlow.txt	-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//	single-mode calculation :
//		Eigenmode.txt   (txt format for FreeFem)
//      Eigenmode.ff2m  (ff2m format for stabfem)
// 		EigenmodeA.txt  ADJOINT  (txt format for FreeFem)
//      EigenmodeA.ff2m ADJOINT  (ff2m format for stabfem)
//      Sensitivity.txt          (Norm of the sensitivity to base flow modifications)
//		Sensitivity.ff2m  ( Sensitivity to base flow modifications, to Mach modifications)
//
// multiple-mode calculation :
//  	Eigenmode##.txt   (txt format for FreeFem)
//      Eigenmode##.ff2m  (ff2m format for stabfem)
//
// in all modes :
//		Spectrum.txt -> All computed Eigenvalues
//
// 
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, Eigenmode.txt is not generated and "iter" parameter in Eigenmode.ff2m is -1.
//

// CORRECT BUG WITH SENSITIVITY BY SUBSTITUTING THE OTHER VERSION 

//load "MUMPS_seq"        ////////  load sparsesolver   
include "Param_Mapping.edp";
 include "SF_Geom.edp";
include "Macros_StabFem.edp";
//include "SF_Mesh.edp";
load "MUMPS_FreeFem"
load "scotch"
IFMACRO(VTK,YES)
load "../SOURCES_OTHER/iovtk"
ENDIFMACRO
load "PETSc-complex"                             // PETSc plugin
load "SLEPc-complex"                             // SLEPc plugin
macro partitioner()metis// End Of Macro  // metis, scotch, or parmetis
macro dimension(      )2// End Of Macro  // 2D or 3D
include "macro_ddm.idp"                  // Additional DDM functions
macro def(i)i// EOM
macro init(i)i// EOM

string ssparams = "nprow=1, npcol="+mpisize;
real ttgv=1e30;

//////////////////////////////////////////////////////////////////////////////
//////////////////----->             parameters         <-----///////////////////
/////////////////////////////////////////////////////////////////////////////////
real Re,nu;         ////////////////// REYNOLDS NUMBER   //////////////////////////
real Ma;          	////////////////// MACH NUMBER   //////////////////////////
real gamma=1.4;   	////////////////// GAMMA        //////////////////////////
real Pr=0.7;     	////////////////// PRANDTL NUM   //////////////////////////
real shiftr,shifti;
complex shift, shiftOP, sigma;
int symmetry;
int iadjoint; // 0 for direct ; 1 for adjoint
int nev, ncv, k; // number of eigenvalues, cardinal of Krylov Basis and number of eigenvalues computed


if(mpirank==0)
{              
	// INPUT  
	cout << " Enter Reynolds :   " << endl; cin  >> Re;	nu=1.0/Re;
	cout << " Enter Mach :   " << endl; cin  >> Ma;
	cout << " Enter SHIFT (re,im) :   " << endl; cin  >> shiftr >> shifti; shift = 1i*shifti+shiftr;
	cout << " Symmetry properties ?? (A (0), S (1) or N (2))" << endl; cin >> symmetry;
	cout << " Direct (0), Adjoint (1), D&A+sensitivity (2) ?" << endl; cin >> iadjoint;
   	cout << " Enter nev ? (will use simple shift-invert if nev = 1)" << endl; cin >> nev;
	ncv = 4*nev;   ///// Krylov Basis (If you get problems with convergence with ARPACK increase ncv/nev)

	// OUTPUT
	cout << " ### PARAMETERS SELECTED : " << endl;
	cout << " Re = " << Re<< endl;
	cout << " shift = " << shift << endl; sigma = shift;                 
	if (symmetry == 0) {cout << "Antiymmetric modes" << endl;}
	else if (symmetry == 1) {cout << "Symmetric modes" << endl;}	
	else if (symmetry == 2) {cout << "No symmetry axis" << endl;}
	
	if (iadjoint == 0) {cout << " DIRECT PROBLEM" << endl;}
	else if (iadjoint == 1) {cout << " ADJOINT PROBLEM" << endl;}
	else if (iadjoint == 2) {cout << " DIRECT+ADJOINT PROBLEM INCLUDING SENSITIVITY" << endl;}
	else {cout << " ERROR WHEN SELECTING PROBLEM TYPE" << endl;}
	cout << " Number of eigenvalues to be computed = " << nev << endl;	
}

// MESH READING
meshN th;
meshN ThBorder, ThGlobal ;

if(mpirank==0)
  {
    ThGlobal=readmesh(ffdatadir+"mesh.msh");
    int[int] nupart(ThGlobal.nt);
    nupart=0; 
    if(mpisize>1)
      scotch(nupart, ThGlobal, mpisize);
    th=change(ThGlobal,fregion= nupart[nuTriangle]);
  }

// ADDED From SLEPC --- DISTRIBUTED MATRICES INDECES AND MESH READING

int[int] arrayIntersection;                 // Rank of neighborings subdomains
int[int][int] restrictionIntersection(0);   // Local-to-neighbors renumbering
real[int] D;   

// FE-SPACE
func Pk = P1;
fespace Vh(th, Pk);      // local finite element space
///////////////////////////////////////////////////////////////////////////////////////////////
fespace XH2(th,P2);
///////////////////////////////////////////////////////////////////////////////////////////////
fespace XXxxxH(th,[P2,P2,P1,P1,P1]); /// 
fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
///////////////////////////////////////////////////////////////////////////////////////////////

if(EigenSOLVER == "SLEPC" && nev > 1)
{
    // .....
    build(th,       // The local mesh
            ThBorder, // The interface mesh
            ThGlobal, // The global mesh
            10,       // Fake interface
            1,        // Refinement factor
            1,        // overlap
            D,        // partition of unity
            arrayIntersection,       // ranks of neighboring subdomains
            restrictionIntersection, // local-to-neighbors renumbering
            Vh,           // The local Finite Element space
            Pk,           // FE-space
            mpiCommWorld, // Communicator
            false         // excluded
         );
}
// END Added From SLEPC

//////////////////////////// MARCRO ///////////////////////////  
macro defU(u,p,T,rho)[u#x,u#y,p,T,rho]//EOF
XXxxxH<complex> defU(Ub,Pb,Tb,Rhob);
XXxxxH<complex> defU(dUb,dPb,dTb,dRhob); // Base flow variation with respect to Mach modifications
XXxxxH<complex> defU(u,up,uT,urho);

macro div(u) ((Dx(u#x)+Dy(u#y)))   //EOM
macro ugradf(u,f) ((u#x*Dx(f)+u#y*Dy(f)))    //
macro ugraduTx(u,v) ((u#x*Dx(v#x)+u#y*Dx(v#y)))    //
macro ugraduTy(u,v) ((u#x*Dy(v#x)+u#y*Dy(v#y)))    //
macro innerproduct(u,v) ((u#x*v#x + u#y*v#y)) // EOM
macro prodgradfStrain(u,f,v) (v#x*(Dx(f)*(2.0*Dx(u#x)) +Dy(f)*(Dy(u#x)+Dx(u#y)) ) + v#y*( Dx(f)*(Dy(u#x)+Dx(u#y)) + Dy(f)*(2.0*Dy(u#y)) ) ) //EOM
//macro gradfgradf(f,f1) ((Dx(f)*Dx(f1)+Dy(f)*Dy(f1)))  //
//macro strain(u1,u2,v1,v2) ((Dx(u1)*Dx(v1)+(1./2)*(Dx(u2)+Dy(u1))*(Dx(v2)+Dy(v1))+Dy(u2)*Dy(v2)))  //
macro termnonlinear(u,v,w) ((w#x*(u#x*Dx(v#x)+u#y*Dy(v#x))+w#y*(u#x*Dx(v#y)+u#y*Dy(v#y)))) //
macro Grad(u) [[Dx(u#x),Dx(u#y)],[Dy(u#x),Dy(u#y)]]//EOM
macro Strain(u)[[Dx(u#x),0.5*(Dx(u#y)+Dy(u#x))],[0.5*(Dx(u#y)+Dy(u#x)),Dy(u#y)]]//EOM
macro gradgrad(u,v)(Dx(u)*Dx(v)+Dy(u)*Dy(v))//EOM

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow   ////////////////////////////////////////////////////
{
ifstream cbin(ffdatadir+"BaseFlow.txt");
cbin >> Ubx[];
}
            
/////////////////////////////////////////////////////////////////////////////////
//////// varf for generalized eigenvalue problem: 
////////////////////////////////////////////////////////////////////////////////////

real ssvv=1e-10;

// DIRECT PROBLEM
varf LNSE(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=
	-int2d(th)((JJ)*(rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
	//mass equation
	-dp/(gamma*Ma^2)*div(us)+2.0/Re*(Strain(du):Grad(us))
	-2.0/(3.0*Re)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)
	+drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
	//momentum
	+Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)
	+(gamma-1)*(div(Ub)*dp + Pb*div(du))
	-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))
	+gamma/(Pr*Re)*gradgrad(dT,Ts)
	// energy
	+ps*(dp-(drho*Tb+Rhob*dT))
									  ))
	-int2d(th)((JJ)*sigma*(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT))
	+int2d(th)((JJ)*ssvv*(rhos*drho))
	+ BoundaryconditionsStability(du,us,dp,dT,drho,symmetry);

// ADJOINT PROBLEM
varf LNSEadjointDiscrete(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=
	-int2d(th)((JJ)*(rhos*(-ugradf(Ub,drho) + termnonlinear(Ub,Ub,du) + dT*ugradf(Ub,Tb) - Tb*dp) 
	//mass equation
	-Rhob*ugradf(us,drho) + Rhob*ugradf(us,Tb)*dT - Rhob*termnonlinear(Ub,du,us) 
	+ Rhob*termnonlinear(us,Ub,du) +2.0/Re*(Strain(du):Grad(us))-2.0/(3.0*Re)*(div(du)*div(us))
	- (gamma-1.0)*Pb*ugradf(us,dT) - (gamma-1.0)*dT*ugradf(us,Pb) 
	- 2*gamma*(gamma-1.0)*(Ma^2/Re)*dT*((2.0*Strain(Ub):Grad(us))-2.0/(3.0*Re)*(div(Ub)*div(us))) 
	+ 2*gamma*(gamma-1.0)*(Ma^2/Re)*(ugradf(us,dT)*div(Ub) + prodgradfStrain(Ub,dT,us) )
	//momentum
	+Ts*(-Rhob*ugradf(Ub,dT) - Rhob*dp) + gamma/(Pr*Re)*gradgrad(dT,Ts)
	// energy
	+ps*(-1.0/(gamma*Ma^2)*div(du) + (gamma-1.0)*dT*div(Ub) + dp)))
  	-int2d(th)((JJ)*conj(sigma)*(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT))
  	+int2d(th)((JJ)*ssvv*(rhos*drho))
  	+ BoundaryconditionsStability(du,us,dp,dT,drho,symmetry);

varf b(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=int2d(th)((JJ)*(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT));

// Matrices for compressible base flow sensitivity
varf jacobian(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=int2d(th)(JJ*(rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
								       //mass equation
								       -dp/(gamma*Ma^2)*div(us)+2.0/Re*(Strain(du):Grad(us))-2.0/(3.0*Re)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)+drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
								       //momentum
								  +Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)+(gamma-1)*(div(Ub)*dp + Pb*div(du))-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))
								  +gamma/(Pr*Re)*gradgrad(dT,Ts)
								       // energy
								       +ps*(dp-(drho*Tb+Rhob*dT))
								  ))
  +BoundaryconditionsStability(du,us,dp,dT,drho,symmetry);

varf DerMachNS(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=int2d(th)(JJ*(Ts*(2.0*gamma*(gamma-1.0)*Ma/Re*(2.0*((Strain(Ub):Strain(Ub)))-2.0/3.0*(div(Ub)*div(Ub))))+ 2.0*ugradf(us,Pb)/(gamma*Ma^3)));



complex[int] ev(nev); // Eigenvalues
XXxxxH<complex> [int] [eux,euy,ep,eT,erho](nev); // Eigenvectors

if(nev>1)
{
/// SOLUTION AND POSTPROCESSING FOR NEV>1 (Arnoldi eigenvalue solver)
////// BUILD B-MATRIX
real ts=clock();
if(EigenSOLVER == "ARPACK")
{
	matrix<complex> Bloc= b(XXxxxH,XXxxxH);  //////// WARNING: THE SOLVER !!!!!!!!!!!!!!!
	matrix<complex> B;
	mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
	if(mpirank==0)
	  {
	    cout << "### B is ok !" << endl;
	    cout <<" ### B assembled in "<<clock()-ts<<" s"<<endl;
	  }
	/////  BUILD OP-MATRIX
	ts=clock();
	matrix<complex> OP; 

	if(iadjoint==0){
		matrix<complex> OPloc=LNSE(XXxxxH,XXxxxH);
		mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
		set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
		shiftOP = shift;
	}

	if(iadjoint==1) // Solve the conjugate eigenvalue problem of the adjoint
	{	
		sigma = conj(sigma);
		Ubx[] = conj(Ubx[]);
		Bloc= b(XXxxxH,XXxxxH);
		mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
		matrix<complex> OPloc=LNSEadjointDiscrete(XXxxxH,XXxxxH);
		mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
		set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
		shiftOP = shift;
	}

	if(mpirank==0)
	  {
	    cout << "### OP is ok !" << endl;
	    cout <<" ### OP assembled in "<<clock()-ts<<" s"<<endl;
	  }


	if(mpirank==0)
	  {
	    cout << "Matrices have been created..." << endl;
	    cout << "... starting eigenvalues calculation..."<< endl;
	  }
	///////////////////// CALL TO ARPACK++ ///////////////////////////////////////////////////
	k=EigenValue(OP,B,sigma=shiftOP,value=ev,vector=eux,tol=1e-6,maxit=0,ncv=ncv);    //Arpack call
}

else
{

	/***************************************/
	/*      Build local matrices     */
	/***************************************/
	matrix<complex> A1;
	matrix<complex> B1= b(XXxxxH,XXxxxH);
	sigma = 0.0; // No need of shift this is handled by SLEPc
	if(iadjoint==0)
	{
		A1= LNSE(XXxxxH,XXxxxH);
		shiftOP = shift;
	}
	else // Adjoint (complex conjugate)
	{
		sigma = conj(sigma);
		Ubx[] = conj(Ubx[]);
		B1=b(XXxxxH,XXxxxH);
		A1=LNSEadjointDiscrete(XXxxxH,XXxxxH);
		shiftOP = shift;
	}
	sigma = shift;
	/***************************************/
	/*      Build distributed matrices     */
	/***************************************/
	dmatrix<complex> DistA(A1, arrayIntersection, restrictionIntersection, D, clean = true);
	dmatrix<complex> DistB(DistA, B1, clean = true);

	string ssparams =            // Parameters for the distributed EigenValue solver
	  " -eps_nev " + nev       + // Number of eigenvalues
	  " -eps_type krylovschur" +
	  //" -eps_interval -0.2,0.05" +
	  " -eps_target " + shiftOP +
	  //" -eps_harmonic " +
	  " -st_type cayley "     +
	  //" -st_type cayley_antishift "     +
	  //" -st_pc_type cholesky " +
	  //" -st_pc_factor_mat_solver_type superlu_dist " +
	  //" -st_ksp_type preonly " +
	  //" -mat_superlu_dist_rowperm NATURAL " +
	  " -st_pc_type lu "       +
	  " -st_pc_factor_mat_solver_package mumps" +
	  " -eps_view"             +
	  " -eps_gen_non_hermitian"      // The problem is generalized non hermitian
	;
	//SLEPC

	///////////////////// CALL TO SLEPC ///////////////////////////////////////////////////
	k = zeigensolver
	(DistA,              // matrix OP = A − sigma*B
	 DistB,              //
	 vectors = eux, // Array to store the FEM-EigenFunctions
	 values  = ev, // Array to store the EigenValues
	 sparams = ssparams  // Parameters for the distributed EigenValue solver
	);

	k=min(k,nev); // some time the number of converged eigen value
	              // can be greater than Nev;
}


////////////////////////////////////////////////////////////////////////////////////

    string namefile;
    namefile=ffdatadir+"Spectrum.txt";
    ofstream fileVP1(namefile); 
	
	for (int i=0;i<nev;i++)
	{
		if(iadjoint==1)
		{
			eux[i][] = conj(eux[i][]);
			ev[i] = conj(ev[i]);
		}
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       cout << " Eigenvalue : " << i+1 << "  : " << ev[i] << endl;

 		if(iadjoint==0)
 		{
 			namefile=ffdatadir+"Eigenmode"+(i+1);
 			// Normalize the mode
 			real NormUDirect = abs(sqrt(int2d(th)(JJ*(abs(Rhob*eux[i])^2 + abs(Rhob*euy[i])^2 + abs(Rhob*eT[i])^2 + abs(erho[i])^2 ))));
			eux[i][] = eux[i][]/NormUDirect;
			NormUDirect = abs(sqrt(int2d(th)(JJ*(abs(Rhob*eux[i])^2 + abs(Rhob*euy[i])^2 + abs(Rhob*eT[i])^2 + abs(erho[i])^2 ))));
			cout << "Normalizing eigenmode " << i << endl;
			cout << "B-Norm " << NormUDirect << endl;
 		}
 		else{namefile=ffdatadir+"EigenmodeA"+(i+1);};
 		 
 		{
 		  ofstream fileMode(namefile+".txt");
 		  fileMode << eux[i][]; 
 		  fileMode << endl << endl << Re << endl << endl << real(ev[i]) << "   " << imag(ev[i])  << endl;
 		}
		 
 		 ux[] = eux[i][]; 
 		 cout << "Writing eigenmode in file " << namefile << endl;
 		 SFWriteMode(namefile+".ff2m",u,ev[i],shift,"EigenModeD",1);	 // MACRO DEFINED in StabFem_Macros.edp
 		 
 	};
	cout << "it's done" << endl;

////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


int[int] forder=[1,1,1,1,1,1,1,1];
XXxxxH defU(upr,ppr,Tpr,rhopr),defU(upi,ppi,Tpi,rhopi);

for (int i=0;i<k;i++)
  {
    defU(upr,ppr,Tpr,rhopr)=[real(eux[i]),real(euy[i]),real(ep[i]),real(eT[i]),real(erho[i])]; 
    defU(upi,ppi,Tpi,rhopi)=[imag(eux[i]),imag(euy[i]),imag(ep[i]),imag(eT[i]),imag(erho[i])]; 
    
    IFMACRO(VTK,YES)
    if(mpirank==0)  
      { 
/*	SaveVecComplexPETSc(eu1[i][],pathspectrum+"/directmode_"+i+".bin");*/
	savevtk(ffdatadir+"/directmode_"+i+".vtk",th,ppr,[uprx,upry,0],Tpr,rhopr,ppi,[upix,upiy,0],Tpi,rhopi,order=forder,dataname="pr velr tempr rhor pi veli tempi rhoi");
      }
      	ENDIFMACRO	
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
  }   //END FOR

mpiBarrier(mpiCommWorld);
}



else

/// SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED
{
XXxxxH<complex> [ux0,uy0,p0,T0,rho0],[udirectx,udirecty,pdirect,Tdirect,rhodirect],[uadjointx,uadjointy,padjoint,Tadjoint,rhoadjoint], [conjudirectx,conjudirecty,conjpdirect,conjTdirect,conjrhodirect]; 

int testCB = exec("ls WORK/Eigenmode_guess.txt");
    	if (testCB!=0)
		{
		cout << "no file Eigenmode_guess.txt : strarting from arbitrary initial condition" << endl;
		[ux0,uy0,p0,T0,rho0] = [1.0,0.0,1.0,1.0,1.0];
		} 
		else
		{
		cout << "starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
		cbin >> ux0[];
		};


// selection of the computation to be performed : direct, adjoint or both
		
int directadjointA,directadjointB;
if(iadjoint==0)
	{
	directadjointA = 1; directadjointB=1;
	cout << "Shift-invert algorithm for DIRECT problem" << endl;
	}
else if(iadjoint==1)
	{
	directadjointA = 2; directadjointB=2;
	cout << "Shift-invert algorithm for ADJOINT problem" << endl;
	}
else if(iadjoint==2)
	{
	directadjointA = 1; directadjointB=2;
	cout << "Shift-invert algorithm for BOTH DIRECT AND ADJOINT(discrete) problem" << endl;
	}
	
	complex lambda;
// LOOP TO SELECT WHICH COMPUTATION WILL BE DONE 
	for(int directadjoint=directadjointA;directadjoint<directadjointB+1;directadjoint++)	
	{
	real ts;
	/////  BUILD OP-MATRIX
	
	matrix<complex> OP; 

	if(directadjoint==1)
	{	
		ts=clock();
		cout << " Constructing operator for DIRECT problem ..." << endl;
		matrix<complex> OPloc=LNSE(XXxxxH,XXxxxH);
		mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
		set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
		shiftOP = shift;
		cout << " solving DIRECT problem ..." << endl;
	}
	else if(directadjoint==2)
	{
		sigma = conj(sigma);
		Ubx[] = conj(Ubx[]);
		cout << " Constructing operator for ADJOINT(discrete) problem ..." << endl;
		matrix<complex> OPloc=LNSEadjointDiscrete(XXxxxH,XXxxxH);
		mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
		set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
		shiftOP = shift;
		cout << "solving ADJOINT problem ..." << endl;
	}


	int itmax = 100;
	complex lambda0 = 1e6;
	real err = 1e6;
	real errmax=1e-4;
	varf brhs(defU(du,dp,dT,drho),defU(us,ps,Ts,rhos))=int2d(th,mpirank)(JJ*(rhos*rho0+Rhob*uy0*usy+Rhob*ux0*usx+Ts*Rhob*T0));
	
	/// ITERATION LOOP
	int iter;
	for (iter=0; ((err>errmax)&&(iter<itmax)); iter++)
	{
		ts=clock();
		matrix<complex> Bloc= b(XXxxxH,XXxxxH);  //////// WARNING: THE SOLVER !!!!!!!!!!!!!!!
		matrix<complex> B;
		mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
		if(mpirank==0)
		  {
		    cout << "### B is ok !" << endl;
		    cout <<" ### B assembled in "<<clock()-ts<<" s"<<endl;
		  }
		complex[int] rhs = B*ux0[];
		complex[int] w = OP^-1*rhs;
		ux[] = w;
	
		complex XnXn1 = int2d(th)(JJ*(rho0*urho+Rhob*ux0*ux+Rhob*uy0*uy+Rhob*T0*uT));
		complex Xn1Xn1 =  int2d(th)(JJ*(urho*urho+Rhob*ux*ux+Rhob*uy*uy+Rhob*uT*uT));
		complex GG = Xn1Xn1/XnXn1;
		// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
		//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
		lambda = shiftOP+1/GG;
		err = abs(lambda-lambda0);
		cout << " iteration " << iter+1 << " : " << endl;	
		//	cout << " GG = " << GG << endl;
		//	cout << " XnXn = " << XnXn << endl;
		cout << " estimated eigenvalue lambda = " << lambda << endl;	
		ux0[] = 1/sqrt(abs(Xn1Xn1))*ux[];
		lambda0 = lambda;
	};
	/// END ITERATION LOOP	
//	cout << "ttoto" << endl ;
	if(directadjoint==2||directadjoint==0){lambda=conj(lambda);};
 	// renormalization by MAXIMUM
 	Xh NormU = sqrt(abs(Rhob*ux)^2+abs(Rhob
*uy)^2+abs(urho)^2+abs(Rhob*uT)^2);
	//ux[] = 1/NormU[].max*ux[];
	
	
	string namefile,namefileFF,descriptionFF,typeDA; 
	if(iter<itmax)
	
	// post-processing if iteration was successful
	{	
		real lambdar = real(lambda) ; real lambdai = imag(lambda);
    	if(directadjoint==1)
    	{
    		ofstream fileVP(ffdatadir+"Spectrum.txt");
    		fileVP << lambdar << " " << lambdai << " " << Re <<  " " << real(shift) << " " << imag(shift) << endl;
    		namefile=ffdatadir+"Eigenmode.txt";
    		namefileFF=ffdatadir+"Eigenmode.ff2m";
    		typeDA = "D";
    		udirectx[]=ux[];
			real NormUDirect = abs(sqrt(int2d(th)(JJ*(abs(Rhob*udirectx)^2 + abs(Rhob*udirecty)^2 + abs(Rhob*Tdirect)^2 + abs(rhodirect)^2 ))));
			udirectx[] = udirectx[]/real(NormUDirect);
			NormUDirect = abs(sqrt(int2d(th)(JJ*(abs(Rhob*udirectx)^2 + abs(Rhob*udirecty)^2 + abs(Rhob*Tdirect)^2 + abs(rhodirect)^2 ))));
			ux[] = udirectx[];
    	};
    	
    	if(directadjoint==2||directadjoint==0)
    	{
    		ux[] = conj(ux[]); // Revert conjugation of the complex adjoint problem
    		Ubx[] = conj(Ubx[]); // Revert conjugation of the complex adjoint problem
			lambdai = -lambdai;
			lambda = conj(lambda);
    		ofstream fileVP(ffdatadir+"Spectrum.txt");
           	fileVP << lambdar << " " << lambdai << " " << Re << " " << real(shift) << " " << imag(shift) << endl;
    		namefile=ffdatadir+"EigenmodeA.txt";
    		namefileFF=ffdatadir+"EigenmodeA.ff2m";	
    		typeDA = "A";
    		uadjointx[]=ux[];
			complex BiNorm=(int2d(th)(JJ*(Rhob*conj(uadjointx)*udirectx + Rhob*conj(uadjointy)*udirecty + Rhob*conj(Tadjoint)*Tdirect + conj(rhoadjoint)*rhodirect))); // Scalar product between adjoint and direct modes
			uadjointx[] = uadjointx[]/conj(BiNorm);
			BiNorm=(int2d(th)(JJ*(Rhob*conj(uadjointx)*udirectx + Rhob*conj(uadjointy)*udirecty + Rhob*conj(Tadjoint)*Tdirect + conj(rhoadjoint)*rhodirect)));
			cout << "Norm of the direct/adjoint " << BiNorm << endl;
			ux[] = uadjointx[];
    	};
    
    // write outpout in .txt format (for freefem)
    {
    ofstream file(namefile);
  	file << ux[] ;	
   	file << endl << endl << Re << endl
   	<< endl << lambdar << "   " << lambdai  << endl;
    }

    // write output in .dff.2m format (for StabFem)
	SFWriteMode(namefileFF,u,lambda,shift,"EigenMode"+typeDA,iter);	 // MACRO DEFINED in StabFem_Macros.edp
	
	} // end of post processing of simple shift-invert case
else // case iteration failed
{
	namefileFF=ffdatadir+"Eigenmode.ff2m";
	cout << " ERROR : shift-invert iteration failed ; shift is probably wrong" << endl;
	SFWriteMode(namefileFF,u,99999.9,99999.9,"EigenMode"+"D",iter);	 // MACRO DEFINED in StabFem_Macros.edp

};

if (testCB==0)
		{
		exec("rm Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
		};


}; //end of loop for direct/adjoint/selection

if(iadjoint==2)
//
{
cout << "Computation of sensitivity after direct and adjoint" << endl;

//	cout << "STAT" << uxdirect(2.5,.5) << " " << uxadjoint(2.5,.5) << " " << uydirect(2.5,.5) << " " << uyadjoint(2.5,.5) << endl ;

	fespace p2(th,P2);fespace p1(th,P1);
	p2 sensitivity;
	Xh<complex> graduAx;
	Xh<complex> gradux;
	Xh<complex> graduAy;
	Xh<complex> graduy;
	Mh<complex> gradpA;
	Mh<complex> gradp;
	Mh<complex> gradTA;
	Mh<complex> gradT;
	Mh<complex> gradrhoA;
	Mh<complex> gradrho;
	XXxxxH<complex> [dMJacux,dMJacuy,dMJacp,dMJacT,dMJacrho];
	real dMa = 0.1;

	
	

	
	// SENSITIVITY TO BASE FLOW MODIFICATION 
	conjudirectx[] = conj(udirectx[]);
	gradrhoA = (-termnonlinear(Ub,conjudirect,uadjoint) - Tadjoint*ugradf(Ub,conjTdirect));
	gradrho = (-conj(lambda)*(innerproduct(uadjoint,conjudirect) + Tadjoint*conjTdirect) - termnonlinear(conjudirect,Ub,uadjoint) - termnonlinear(Ub,conjudirect,uadjoint) + ugradf(conjudirect,rhoadjoint) - Tadjoint*(ugradf(conjudirect,Tb) + ugradf(Ub,conjTdirect) ) + padjoint*conjTdirect);

	graduAx = (Rhob*(-ugraduTx(uadjoint,conjudirect)) + conjrhodirect*(-ugraduTx(Ub,uadjoint) + ugraduTx(uadjoint,Ub)) + conjrhodirect*Dx(rhoadjoint) - Rhob*Tadjoint*Dx(conjTdirect) - conjrhodirect*Tadjoint*Dx(Tb));
	graduAy = Rhob*(-ugraduTy(uadjoint,conjudirect)) + conjrhodirect*(-ugraduTy(Ub,uadjoint) + ugraduTy(uadjoint,Ub)) + conjrhodirect*Dy(rhoadjoint) - Rhob*Tadjoint*Dy(conjTdirect) - conjrhodirect*Tadjoint*Dy(Tb);

	gradux = Rhob*(-ugraduTx(uadjoint,conjudirect) + ugradf(conjudirect,uadjointx)) + conjrhodirect*(-ugraduTx(uadjoint,Ub) + ugradf(Ub,uadjointx)) + conjrhodirect*Dx(rhoadjoint) - Tadjoint*( conjrhodirect*Dx(Tb) + Rhob*Dx(conjTdirect) ) + (gamma-1.0)*(conjpdirect*Dx(Tadjoint) + Tadjoint*Dx(conjpdirect)) + (-2.0*gamma*(gamma-1.0)*Ma^2/Re)*(Dx(Tadjoint)*((4./3.)*Dx(conjudirectx) - (2.0/3.0)*Dy(conjudirecty)) + Dy(Tadjoint)*(Dx(conjudirecty)+Dy(conjudirectx)) + Tadjoint*((4.0/3.0)*dxx(conjudirectx) + dyy(conjudirectx) + (1.0/3.0)*dxy(conjudirecty))) + ugradf(Ub,conjrhodirect)*uadjointx + conjrhodirect*div(Ub)*uadjointx
+ugradf(conjudirect,Rhob)*uadjointx + Rhob*div(conjudirect)*uadjointx; 

	graduy = Rhob*(-ugraduTy(uadjoint,conjudirect) + ugradf(conjudirect,uadjointy)) + conjrhodirect*(-ugraduTy(uadjoint,Ub) + ugradf(Ub,uadjointy)) + conjrhodirect*Dy(rhoadjoint) - Tadjoint*( conjrhodirect*Dy(Tb) + Rhob*Dy(conjTdirect) ) + (gamma-1.0)*(conjpdirect*Dy(Tadjoint) + Tadjoint*Dy(conjpdirect)) + (-2.0*gamma*(gamma-1.0)*Ma^2/Re)*(Dy(Tadjoint)*((4./3.)*Dy(conjudirecty) - (2.0/3.0)*Dx(conjudirectx) ) + Dx(Tadjoint)*(Dy(conjudirectx)+Dx(conjudirecty)) + Tadjoint*((4.0/3.0)*dxx(conjudirecty) + dyy(conjudirecty) + (1.0/3.0)*dxy(conjudirectx))) + ugradf(Ub,conjrhodirect)*uadjointy + conjrhodirect*div(Ub)*uadjointy
+ugradf(conjudirect,Rhob)*uadjointy + Rhob*div(conjudirect)*uadjointy;

	gradTA = div(Ub)*conjrhodirect*Tadjoint + ugradf(Ub,conjrhodirect)*Tadjoint + ugradf(Ub,Tadjoint)*conjrhodirect;
	gradT = div(Ub)*conjrhodirect*Tadjoint + ugradf(Ub,conjrhodirect)*Tadjoint + ugradf(Ub,Tadjoint)*conjrhodirect + div(conjudirect)*Rhob*Tadjoint + ugradf(conjudirect,Rhob)*Tadjoint + ugradf(conjudirect,Tadjoint)*Rhob + padjoint*conjrhodirect;

	gradpA = 0.0;
	gradp = -(gamma-1.0)*Tadjoint*div(conjudirect);
	//gradrho = 0.0;
	//gradux = 0.0;
	//graduy = 0.0;
	//gradT = 0.0;



	real ts=clock();

	matrix<complex> JacLoc=jacobian(XXxxxH,XXxxxH);
	matrix<complex> Jac;
	mpiAllReduce(JacLoc,Jac,mpiCommWorld,mpiSUM);
	if(mpirank==0)
		cout<<"Matrix formed in "<<clock()-ts<<" s"<<endl;  
	complex[int] rhsl= DerMachNS(0,XXxxxH);
	rhsl = rhsl;
	complex[int] rhs(Jac.n);
	mpiAllReduce(rhsl,rhs,mpiCommWorld,mpiSUM);
	set(Jac,solver=sparsesolver,sparams=ssparams);
	dUbx[] =  (Jac^-1*rhs);
	complex ener=sqrt(int2d(th)(JJ*(Rhob*(abs(dUby)^2+abs(dUbx)^2+abs(dTb)^2) + abs(dRhob)^2))); 
	if(mpirank==0)
	{
	  cout << "Computed base flow modification with respect to Mach number, Energy of the " << real(ener) << endl;
	}


	sensitivity = sqrt(real(Rhob)*(abs(uadjointx)^2+abs(uadjointy)^2) + real(Rhob)*abs(Tadjoint)^2 + abs(rhoadjoint)^2 ) * sqrt(real(Rhob)*(abs(udirectx)^2+abs(udirecty)^2) +real(Rhob)*abs(Tdirect)^2 + abs(rhodirect)^2 );
	// sensitivity = sqrt(abs(uadjointx)^2+abs(uadjointy)^2) * sqrt(abs(udirectx)^2+abs(udirecty)^2);
	// at this stage [ux,uy,p] is the last computed, namely the adjoint eigenmode
	real norm = sensitivity[].max;
	sensitivity=1/norm*sensitivity;
	// Is this correct ??? I have used the inner product <a,Bb> where B is the mass matrix
	
	
	complex lambdaVarBF = -dMa*(int2d(th,mpirank)(JJ*(-2.0/(gamma*Ma^3)*conj(ugradf(uadjoint,conjpdirect)) - conj(Tadjoint)*(2.0*gamma*(gamma-1.0)*Ma/Re*(2.0*((Strain(udirect):Strain(Ub))+(Strain(Ub):Strain(udirect)))-2.0/3.0*(2.0*div(Ub)*div(udirect)))) )));
	complex lambdaVarMa = dMa*(int2d(th)(JJ*(conj(gradux)*dUbx + conj(graduy)*dUby + conj(gradT)*dTb + conj(gradp)*dPb + conj(gradrho)*dRhob)));
	cout << "LambdaVarMa is as follows : " << endl;
	cout << "conj(gradux)*dUbx = " << int2d(th)(JJ*conj(gradux)*dUbx) << endl;
	cout << "conj(graduy)*dUby = " << int2d(th)(JJ*conj(graduy)*dUby) << endl;
	cout << "conj(gradrho)*dRhob = " << int2d(th)(JJ*conj(gradrho)*dRhob) << endl;
	cout << "conj(gradT)*dTb = " << int2d(th)(JJ*conj(gradT)*dTb) << endl;
	cout << "conj(gradp)*dPb = " << int2d(th)(JJ*conj(gradp)*dPb) << endl;
	cout << "LambdaVarBF is as follows : " << endl;
	cout << " 1st term : " << int2d(th,mpirank)(JJ*(-2.0/(gamma*Ma^3)*conj(ugradf(uadjoint,conjpdirect)))) << endl;
	cout << " 2nd term : " << int2d(th,mpirank)(JJ*(- conj(Tadjoint)*(2.0*gamma*(gamma-1.0)*Ma/Re*(2.0*((Strain(udirect):Strain(Ub))+(Strain(Ub):Strain(udirect)))-2.0/3.0*(2.0*div(Ub)*div(udirect)))))) << endl;
	cout << "NORM of UDIRECT : " << int2d(th)(JJ*(Rhob*(abs(udirectx)^2+abs(udirecty)^2+abs(Tdirect)^2) + abs(rhodirect)^2 )) << endl;
	cout << "NORMALIZATION NORM : " << int2d(th)(JJ*(Rhob*(conj(uadjointx)*udirectx + conj(uadjointy)*udirecty + conj(Tadjoint)*Tdirect) + conj(rhoadjoint)*rhodirect));
	string namefile,namefileFF;
	namefile=ffdatadir+"Sensitivity.txt";
    {
    ofstream file(namefile);
	file << sensitivity[] ;	
    }    
    namefileFF=ffdatadir+"Sensitivity.ff2m";
	p1 xx,yy,sensitivityP1;
	p1 <complex> graduAxP1,graduAyP1,gradpAP1,gradTAP1,gradrhoAP1,graduxP1,graduyP1,gradpP1,gradTP1,gradrhoP1,dUbxP1,dUbyP1,dPbP1,dTbP1,dRhobP1;
	xx=x;
	yy=y;
	dUbxP1 = dUbx;
	dUbyP1 = dUby;
	dPbP1 = dPb;
	dTbP1 = dTb;
	dRhobP1 = dRhob;
	sensitivityP1 = sensitivity;
	graduAxP1 = graduAx;
	graduAyP1 = graduAy;
	gradpAP1 = gradpA;
	gradTAP1 = gradTA;
	gradrhoAP1 = gradrhoA;
	graduxP1 = gradux;
	graduyP1 = graduy;
	gradpP1 = gradp;
	gradTP1 = gradT;
	gradrhoP1 = gradrho;

         
	ofstream fileFF(namefileFF);
	fileFF << "### Data generated by Freefem++ ; " << endl;
	fileFF << "Sensitivity" << endl;
	fileFF << "Format :" << endl;
	fileFF << "P1 sensitivity P1c graduAx P1c graduAy P1c gradpA P1c gradTA P1c gradrhoA P1c gradux P1c graduy P1c gradp P1c gradT P1c gradrho P1c dUbx P1c dUby P1c dPb P1c dTb P1c dRhob " << "complex lambdaVarBF complex lambdaVarMa" << endl << endl ;
	 for (int j=0;j<sensitivityP1[].n ; j++) fileFF << sensitivityP1[][j]  <<  " " << endl;
	 for (int j=0;j<graduAxP1[].n ; j++) fileFF << real(graduAxP1[][j]) << " " << imag(graduAxP1[][j]) << endl;
	 for (int j=0;j<graduAyP1[].n ; j++) fileFF << real(graduAyP1[][j]) << " "<< imag(graduAyP1[][j]) << endl;
	 for (int j=0;j<gradpAP1[].n ; j++) fileFF << real(gradpAP1[][j]) << " " << imag(gradpAP1[][j]) << endl;
	 for (int j=0;j<gradTAP1[].n ; j++) fileFF << real(gradTAP1[][j]) << " " <<  imag(gradTAP1[][j]) << endl;
	 for (int j=0;j<gradrhoAP1[].n ; j++) fileFF << real(gradrhoAP1[][j]) << " " << imag(gradrhoAP1[][j]) << endl;
	 for (int j=0;j<graduxP1[].n ; j++) fileFF << real(graduxP1[][j]) << " " << imag(graduxP1[][j]) <<  endl;
	 for (int j=0;j<graduyP1[].n ; j++) fileFF << real(graduyP1[][j]) << " " << imag(graduyP1[][j]) << endl;
	 for (int j=0;j<gradpP1[].n ; j++) fileFF << real(gradpP1[][j]) << " " << imag(gradpP1[][j]) << endl;
	 for (int j=0;j<gradTP1[].n ; j++) fileFF << real(gradTP1[][j]) << " " << imag(gradTP1[][j]) << endl;
	 for (int j=0;j<gradrhoP1[].n ; j++) fileFF << real(gradrhoP1[][j]) << " " << imag(gradrhoP1[][j]) << endl;
	 for (int j=0;j<dUbxP1[].n ; j++) fileFF << real(dUbxP1[][j]) << " " << imag(dUbxP1[][j]) << endl;
	 for (int j=0;j<dUbyP1[].n ; j++) fileFF << real(dUbyP1[][j]) << " " << imag(dUbyP1[][j]) << endl;
	 for (int j=0;j<dPbP1[].n ; j++) fileFF << real(dPbP1[][j]) << " " << imag(dPbP1[][j]) << endl;
	 for (int j=0;j<dTbP1[].n ; j++) fileFF << real(dTbP1[][j]) << " " << imag(dTbP1[][j]) << endl;
	 for (int j=0;j<dRhobP1[].n ; j++) fileFF << real(dRhobP1[][j]) << " " << imag(dRhobP1[][j]) << endl;
	 fileFF <<  real(lambdaVarBF) << " " << imag(lambdaVarBF) << " " << real(lambdaVarMa) << " " << imag(lambdaVarMa) << endl;

}; // end of selection of mutlicple mode (krylov) / single mode (simple shift-invert)




};



















//
