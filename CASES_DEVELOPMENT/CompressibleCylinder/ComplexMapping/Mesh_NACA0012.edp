/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
///// 
/////                              MESH GENERATOR for a cylinder
/////
/////             This file creates a mesh and an initial base flow for the "StabFem" program.
/////
/////             input parameters : Xmin Xmax Ymax
/////  			  
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
include "Macros_StabFem.edp";
//string ffdatadir = "./WORK/";

// load "../../../SOURCES_OTHER/iovtk"                       /// load library to write in vtk format
// load "BinaryIO"                 ////load libary to write the solution in binary form
// load "BinaryIO_64"




real RADIUS=0.5;         /////// Airfoil "Radius" (As it would be done with conformal mapping)
 


n=0.4;  
real nFine = 10;   
real nFineHor = 3;  
real nFineVer = 5; 
real nFineVerBox = 10;
real nFineHorBox = 10;         
real nsTE=100;
real nsLE=50; 
real thick=0.12, c0=0.296375, c1=0.12635, c2=0.35195, c3=0.283775, c4=0.10185;
real h = 2.0;
real lp = 2.0;
real ln = 1.3;

cout << " Generation of an initial mesh for a 2D cylinder" << endl;
cout << " Enter the dimensions xmin, xmax, ymax ? " << endl; 
   
real xinlet , xoutlet,yside ;

cin >> xinlet >> xoutlet >> yside ;
cout << "Xmin = " << xinlet << " ; Xmax = " << xoutlet << " ; ymax = " << yside << endl;  

xinlet += yside; // Because we add it in the mesh
xoutlet -= yside; // Because we add it in the mesh
/////////////////////////////////////////////////////////////////////////////////
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;
                         /////// label for boundary conditions  
/////////////////////////////////////////////////////////////////////////////////
// airfoil center is in (0,0)

border airfoilUSTE(t=0.05*RADIUS,2*RADIUS){ x=t-RADIUS;y=(thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=2;}
border airfoilUSLE(t=0,0.05*RADIUS){ x=t-RADIUS;y=(thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=2;}

border airfoilLSTE(t=0.05*RADIUS,2*RADIUS){ x=t-RADIUS;y=-(thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=2;}
border airfoilLSLE(t=0,0.05*RADIUS){ x=t-RADIUS;y=-(thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=2;}
border boxVerXn(t=-1,1){ x=-ln*RADIUS-RADIUS;y=t;label=100;}

border airfoilUSTEB(t=0.05*RADIUS,2*RADIUS){ x=t-RADIUS;y=(10*thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=100;}
border airfoilUSLEB(t=0,0.05*RADIUS){ x=t-RADIUS;y=(10*thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=100;}

border airfoilLSTEB(t=0.05*RADIUS,2*RADIUS){ x=t-RADIUS;y=-(10*thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=100;}
border airfoilLSLEB(t=0,0.05*RADIUS){ x=t-RADIUS;y=-(10*thick/0.2)*(c0*sqrt(t) - c1*t - c2*t^2 + c3*t^3 - c4*t^4);label=100;}

//border cylref(t=0,2*pi){ x=(RADIUS+RR)*cos(t);y=(RADIUS+RR)*sin(t);label=999;}
border inlet(t=pi/2,3*pi/2){ x=xinlet+yside*cos(t);y=yside*sin(t);label=1;}

border latinf(t=0,1){ x=xinlet+(xoutlet-xinlet)*t;y=-yside;label=3;}


border outlet1(t=-pi/2,-pi/256){ x=xoutlet+yside*cos(t);y=yside*sin(t);label=3;}
border outlet2(t=-pi/256,pi/256){ x=xoutlet+yside*cos(t);y=yside*sin(t);label=3;}
border outlet3(t=pi/256,pi/2){ x=xoutlet+yside*cos(t);y=yside*sin(t);label=3;}


border latsup(t=0,1){ x=xoutlet-(xoutlet-xinlet)*t;y=yside;label=3;} // label 3 : same conditions as at outlet



// Build a mesh 
mesh th=buildmesh(inlet(2*yside*n)+latinf((xoutlet-xinlet)*n)
				  +outlet1(2*yside*n)+outlet2(2*yside)+outlet3(2*yside*n)
				  +latsup((xoutlet-xinlet)*n)
				  +airfoilUSTE(nsTE)+airfoilUSLE(nsLE)+airfoilLSLE(-nsLE)+airfoilLSTE(-nsTE));

// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometrical parameters for StabFem. Problem type : " << endl;
			file << "2DComp" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real R real Xmin real Xmax real Rmax" << endl;
			file <<  RADIUS  << endl << xinlet << endl << xoutlet << endl << yside  << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)



// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomLengthscale = 1 ; // length scale for nondimensionalization" << endl ;
            file2 << " real SFGeomVelocityscale = 1 ; // velocity scale for nondimensionalization " << endl ;
}





// CREATE A guess for the base flow (here starting from zero works very well)
 	fespace femp1(th,P1);
	fespace femp2xfemp2xfemp1xfemp1xfemp1(th,[P2,P2,P1,P1,P1]); ///   pres P1 + vel 2x P2 + temp P1 + dens P1
        femp2xfemp2xfemp1xfemp1xfemp1 [ux,uy,up,utemp,uro]=[1.0,0.0,1.0,1.0,1.0];
        real Re = 0;real nu=1; real Ma = 0.01; real gamma = 1.4; // these three are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ux[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",0);








