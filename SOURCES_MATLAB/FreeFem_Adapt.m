function [baseflow,eigenmode] = FreeFem_Adapt(varargin)
% 
% This is part of StabFem Project, version 2.1, D. Fabre, July 2017
% Matlab driver for Adapting Mesh 
%
% usage : [baseflow,eigenmode] = FreeFem_Adapt(baseflow,eigenmode)
%
% with only one input argument the adaptation will be done only on base
% flow.
%
% with two input arguments the adaptation will be done on base flow and
% eigenmode structure.
%
%
% The base flow (and if specified the eigenmode) will be recomputed on
% adapted mesh
%
% Version 2.1 by D. Fabre, 2 july 2017

global ff ffdir ffdatadir sfdir verbosity

% managament of optional parameters
% NB here the parser had to be customized because input parameter number 2
% is optional and is a structure ! we should find a better way in future
p = inputParser;
if(mod(nargin,2)==1)
    % input mode for adaptation to base flow
    baseflow=varargin{1};
    eigenmode=0;
    vararginopt={varargin{2:end}};
else
     % input mode for adaptation to base flow
    baseflow=varargin{1};
    eigenmode=varargin{2};
    vararginopt={varargin{3:end}};
end
%    addRequired(p,'baseflow');
%    addOptional(p,'eigenmode',0);
addParameter(p,'Hmax',0.5);
addParameter(p,'Hmin',1e-4);
addParameter(p,'Ratio',10.);               	
addParameter(p,'error',1e-2);			
addParameter(p,'rr',0.95);   
parse(p,vararginopt{:});
   
   
    
system('cp mesh.msh mesh_ans.msh');
system('cp chbase.txt chbase_ans.txt');

%%% Writing parameter file for Adapmesh
fid = fopen('Param_AdaptMesh.edp','w');
fprintf(fid,'// Parameters for adaptmesh (file generated by matlab driver)\n');
fprintf(fid,['real Hmax = ',num2str(p.Results.Hmax),' ;']);
fprintf(fid,['real Hmin = ',num2str(p.Results.Hmin),' ;']);
fprintf(fid,['real Ratio = ',num2str(p.Results.Ratio),' ;']);
fprintf(fid,['real error = ',num2str(p.Results.error),' ;']);
fprintf(fid,['real rr = ',num2str(p.Results.rr),' ;']);
fclose(fid);


if(isnumeric(eigenmode)==1) %% if no eigenmode is provided as input
  command = [ff,' ',ffdir,'Adapt_BaseFlow.edp'];
  error = 'ERROR : FreeFem adaptmesh aborted';
  mysystem(command,error);
  meshnp = importFFmesh('mesh_adapt.msh','nponly');
  disp(['      ### ADAPT mesh to base flow for Re = ' num2str(baseflow.Re),' ; Number of points np = ',num2str(meshnp.np) ])
     
else
    if(strcmp(baseflow.mesh.problemtype,'AxiXR')==1)
        command = [ff,' ',ffdir,'Adapt_UVWP.edp < Eigenmode.txt'];
        
    elseif (strcmp(baseflow.mesh.problemtype,'2D')==1)
        if(strcmp(eigenmode.type,'D')==1)
            command = [ff,' ',ffdir,'Adapt_UVP.edp < Eigenmode.txt'];
        elseif(strcmp(eigenmode.type,'A')==1)
            command = [ff,' ',ffdir,'Adapt_UVP.edp < EigenmodeA.txt'];
        else %if(strcmp(eigenmode.type,'S')==1)
            command = [ff,' ',ffdir,'Adapt_Sensitivity.edp < Sensitivity.txt'];
        end
       
    % elseif(..) for possible other drivers
    end
   error = 'ERROR : FreeFem adaptmesh aborted';
    status=mysystem(command,'skip');
    if(status~=0)
        system('mv mesh_ans.msh mesh.msh');
 		system('mv chbase_ans.txt chbase_guess.txt');
        error(' ERROR in FreeFem_Adapt : recomputing base flow failed, going back to baseflow/mesh')
    end
    meshnp = importFFmesh('mesh_adapt.msh','nponly');
    disp(['      ### ADAPT mesh to base flow AND MODE ( type ',eigenmode.type, ' )  for Re = ' num2str(baseflow.Re),' ; Number of points np = ',num2str(meshnp.np) ])
 end
   
   
    % recomputing base flow after adapt
    system('cp mesh_adapt.msh mesh.msh'); 
	system('cp chbase_adaptguess.txt chbase_guess.txt');
    baseflowNew = baseflow; % initialise structure
    baseflowNew.mesh=importFFmesh('mesh.msh');
    
    baseflowNew = FreeFem_BaseFlow(baseflowNew,baseflow.Re,'NEW');
    if(exist('chbase.txt')==2)
		%  Newton successful : store base flow
		baseflow=baseflowNew;
		baseflow.mesh.namefile=[ffdatadir '/CHBASE/mesh_adapt_Re' num2str(baseflow.Re) '.msh'];
    	system(['cp chbase.txt ' ffdatadir '/CHBASE/chbase_adapt_Re' num2str(baseflow.Re) '.txt']);
    	baseflow.namefile = [ ffdatadir '/CHBASE/chbase_Re' num2str(baseflow.Re) '.txt'];
    	system(['cp mesh.msh ' ffdatadir '/CHBASE/mesh_adapt_Re' num2str(baseflow.Re) '.msh']);
    	 % clean 'CHBASE' directory to avoid mesh/baseflow incompatibilities
    	 system(['rm ' ffdatadir '/CHBASE/chbase_Re*']); 
         system(['cp chbase.txt ' ffdatadir '/CHBASE/chbase_Re' num2str(baseflow.Re) '.txt']);%except last one...`
         system(['cp chbase.ff2m ' ffdatadir '/CHBASE/chbase_Re' num2str(baseflow.Re) '.ff2m']);%except last one...
    	 
         % in case requested, recompute the eigenmode as well
         if(nargout==2&&isnumeric(eigenmode)==0)
            if(strcmp(baseflow.mesh.problemtype,'AxiXR')==1) 
                [ev,eigenmode]=FreeFem_Stability(baseflow,'m',eigenmode.m,'shift',eigenmode.sigma,'nev',1,'type',eigenmode.type);
            elseif(strcmp(baseflow.mesh.problemtype,'2D')==1) 
                [ev,eigenmode]=FreeFem_Stability(baseflow,'shift',eigenmode.sigma,'nev',1,'type',eigenmode.type);
            end
         end
   	else % Newton has probably diverged : revert to previous mesh/baseflow
 		system('mv mesh_ans.msh mesh.msh');
 		system('mv chbase_ans.txt chbase_guess.txt');
        error(' ERROR in FreeFem_Adapt : recomputing base flow failed, going back to baseflow/mesh') 
    end
        system('rm mesh_ans.msh chbase_ans.txt');
end