// EXTRACT FROM Newton_2D.edp
// definition of linear system to be solved at each step of the iteration
 problem NewtonIter([dux,duy,dup],[vx,vy,q]) =
       int2d(th)( -2*nu*(D(du):D(v)) + q*div(du) + div(v)*dup - Conv(up,du,v) ) 
    + int2d(th)( -2*nu*(D(up):D(v)) + q*div(up) + div(v)*upp -.5*Conv(up,up,v) )
    + BoundaryconditionsBaseFlow(du,up,v);     
           
// Newton loop
 while((res>tolerance)&(res<50)&(iter<=Nitermax))
{
    upx[]=ux[];      
    NewtonIter ;          
    ux[] = ux[]+dux[];
    real enerl2=dux[].l2;
    res=sqrt(int2d(th)(dux^2+duy^2)/th.area);
    cout << "$$ Iter = "<< iter+1 << "   Re = " << Re << " ; res = " << res << " ; res l2 = " << enerl2 << endl;
    iter++;
} ;



// EXTRACT FROM Stab2D.edp

// Definition of operators and assembly of matrix OP = NLS - sigma_s B 
varf   LNSE ([ux,uy,up],[vx,vy,q]) =
int2d(th)( -2*nu*(D(u):D(v)) + up*div(v) + div(u)*q - Conv(u,Ub,v) - shift*(ux*vx+uy*vy) )
 + BoundaryconditionsStability(u,v,symmetry);

OP=LNSE(XXMh,XXMh,solver=sparsesolver);

varf brhs([ux,uy,p],[vx,vy,q]) = int2d(th)( (ux0*vx+uy0*vy) );

/// Iteration looop
	for (iter=0; ((err>errmax)&&(iter<itmax)); iter++)
	{
	complex[int] rhs= brhs(0,XXMh); 
	complex[int] w = OP^-1*rhs;
	ux[] = w;
	complex XnXn1 = int2d(th)(ux0*ux+uy0*uy);
	complex Xn1Xn1 =  int2d(th)(ux*ux+uy*uy);
	complex GG = Xn1Xn1/XnXn1;
// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
	lambda = shiftOP+1/GG;
	err = abs(lambda-lambda0);
	cout << "$$ Iteration " << iter+1 << " : " << endl;	
	cout << "$$ Estimated eigenvalue lambda = " << lambda << endl;	
	ux0[] = 1/sqrt(abs(Xn1Xn1))*ux[];
	lambda0 = lambda;
	};