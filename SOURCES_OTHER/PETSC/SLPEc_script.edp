// You need to define 
// 	* the matrices B and OP = A-sigma*B
// 	* nev, the number of eigenvalue you are lookking for
//	* sigma, the shift
// utilisation : mpirun -np 1 FreeFem++-mpi -v 0 -wg yourscript.edp
// or
// utilisation : FreeFem++-mpi -v 0 -wg yourscript.edp
// maybe the mpi run is not important, both work. 
// Paul Bonnefis 25/07/2017

	//////////////////////////////////////////////////////////
	//// SLEPc

    load "PETSc-complex"                             // PETSc plugin
    load "SLEPc-complex"                             // SLEPc plugin


    complex[int,int] EigenVEC(OP.n,nev);
    complex[int] EigenVAL(nev);


    cout << "SLEPc : Beginning the computation of "<<nev<<" eigenvalue around sigma = "<< sigma << "..."<< endl;
    real timeEig = clock();

    int[int] arrayIntersection(0);              // ranks of neighboring subdomains
    int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
    real[int] D;                                // partition of unity
    D.resize(OP.n);
    D = 1;

    dmatrix<complex> DOP(OP, arrayIntersection, restrictionIntersection, D);
    dmatrix<complex> DB(DOP,B);

	// Parameters for the distributed EigenValue solver
    string ssparams =                	
      " -eps_nev " + nev         +     	// Number of eigenvalues
      " -eps_target " + sigma    +  	// Shift
      " -eps_type krylovschur "  +    	// Type of Eigen Problem Solver
      " -st_type sinvert "       +    	// Spectral Transformation
      " -st_pc_type lu "         +    	// Solver for the linear systems
      " -st_pc_factor_mat_solver_package mumps " +
      " -eps_view "
  	;
//    " -eps_smallest_magnitude "+   
//    " -eps_conv_abs "          +
//    " -eps_gen_hermitian"      +      // The problem is symmetric
//    " -eps_type arnoldi "      +      // Type of Eigen Problem Solver     
//    " -eps_pos_gen_non_hermitian" +	// The problem is symmetric 

    int k = zeigensolver
    (
     DOP,                    // matrix OP = A âˆ’ sigma*B
     DB,                     // matrix B
//   vectors = EigenVEC,     // Array to store the FEM-EigenFunctions 
							 //   e.g. Vh<complex>[int] EigenVEC(nev) 
     array   = EigenVEC,     // Array to store a bidimensionnal table 
							 //   e.g. real[int,int] EigenVEC(OP.n,nev) 
							 //   > if you add dof in the problem and EigenVEC is no longer vector a FE-functions
     values  = EigenVAL,     // Array to store the EigenValues
     sparams = ssparams      // Parameters for the distributed EigenValue solver
    );

	k=min(k,nev);   		 // some time the number of converged eigen value
              				 // can be greater than nev;

    timeEig =  clock() - timeEig;
	cout.default <<endl;
	cout <<"Shift = "<< real(sigma) <<" + "<< imag(sigma) <<" i"<<endl; 
	cout <<"Eigenvalues found : "<< k <<" in "<< timeEig <<" s"<< endl;

	int nold=cout.precision(9);
	cout.default << i <<"  ";
	cout.showpos.fixed <<  evr <<"  "<< evi <<"i      "<<endl;

    //////////////////////////////////////////////////////
