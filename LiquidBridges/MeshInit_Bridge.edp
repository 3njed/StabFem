//verbosity = 0;
real R = 1,Rbase=1;
real LL,RMAX,Lsurf;
int d=10;
int typegeom;


real K0, dpdz,gamma;
K0 = 1;dpdz = 0;gamma =1;

include "Macros_StabFem.edp"

cout << "Construction du Maillage initial 'guess' " << endl << endl; 


cout << " Type de geometrie : (0 = cylindre ; 1 = portion de sphere ; 2 = portion de sinusoide ; 3 = portion d'ellipse)" << endl;
cin >> typegeom;

cout << " ENTREZ La longueur L ?" << endl;
cin  >> LL;


cout << " ENTREZ La densite du maillage ?" << endl;
cin  >> d;


border Side1(t=0,R){y=0;x=t;label=5;};
border Axe(t=LL,0){y = t ; x = 0;label=1;};
border Side2(t=R,0){y=LL ; x = t;label=5;};
mesh th;


if (typegeom==0) // cylindre
{
RMAX = R;
border SurfBulle(t=0,LL){y=t;x=R;label=2;};
Lsurf=LL;
plot(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
th = buildmesh(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
};

if (typegeom==1) // portion de sphere
{
real Rc = sqrt((LL/2)^2+1);
RMAX = Rc;
real thetac = atan(LL/2);
Lsurf = 2*Rc*thetac;
cout << " Portion de sphere : Rc = " << Rc << " ; thetac = " << thetac << " ; Lsurf = " << Lsurf << endl;
border SurfBulle(t=-thetac,thetac){y=Rc*(sin(t)+sin(thetac));x=Rc*cos(t);label=2;};
plot(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
th = buildmesh(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
};

if (typegeom==2) // demi-sinusoide
{
cout << " ENTREZ Le rayon max. ?" << endl;
cin  >> RMAX;
border SurfBulle(t=0,LL){y=t;x=R+(RMAX-R)*sin(pi*t/LL);label=2;};
Lsurf = LL; 
plot(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
th = buildmesh(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
};

if (typegeom==3) // portion d'ellipse
{
cout << " ENTREZ Le rayon max. ?" << endl;
cin  >> RMAX;
real a= LL/2;
real b = (RMAX-R);
Lsurf = pi*(3*(a+b)-sqrt((3*a+b)*(a+3*b)))/2; // formule approchee perimetre ellipse
border SurfBulle(t=-pi/2,pi/2){y=LL/2*(1+sin(t));x=R+(RMAX-R)*cos(t);label=2;};
plot(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
th = buildmesh(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe(LL*d));
};



cout << "==> Longueur = " << LL << endl;
cout << "==> Densite = " << d << endl;


plot(th,wait=1);




//SAVE MESH TO FILE

savemesh(th,ffdatadir+"mesh_guess.msh");
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometry for StabFem. Problem type : " << endl;
			file << "3DFreeSurfaceStatic" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real Rinit real Linit " << endl;
			file << R  << endl << LL << endl;
}


// SECOND AUXILIARY FILE mesh.ff2m
{ 
mesh Shempty=emptymesh(th); 
	
include "Macros_Geometrie_Surface.edp";
SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);
CalcGeomSurf;
SFWriteMesh(ffdatadir+"mesh.ff2m",th)
SFWriteMesh(ffdatadir+"mesh_guess.ff2m",th)
}


// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomRbridge = 1 ;" << endl ;
            file2 << " real SFGeomLbridge = " << LL <<  " ;" << endl ;
            file2 << " real SFGeomGAMMA = " << 0 <<  " ;" << endl ;

}



//exec("cp "+ffdatadir+"mesh.ff2m "+ffdatadir+"mesh_guess.ff2m");



//// CREATION OF A BASE FLOW FILE
//// (this is a	static problem so there is actually no base flow. However the file is created to ensure the right functioning of StabFem	
	
	
//		fespace femp2(th,P2);
//		femp2 phi = 0;
//		fespace femp1(th,P1);
//		femp1 phiP1 = 0;
				
//		ofstream file(ffdatadir+"BaseFlow.txt");
//	    file << phi[] << endl;
//	    file <<  endl << 0 << endl;

//// EXPORTATION DU CHAMP DE BASE AUX FORMAT FF2M

//SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",phiP1);


		

	