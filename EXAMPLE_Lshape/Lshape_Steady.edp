
// First sample problem : steady conduction 

IFMACRO(!FREEFEMPLOTS)
macro FREEFEMPLOTS  YES //EOM
ENDIFMACRO 
// Set to YES to generate plots through the native FreeFem plotter ffglut (recommended in terminal /debug mode)
// set to NO to disable all plots (recommended in Matlab/StabFem mode)


// Read the mesh
mesh th = readmesh("mesh.msh");
fespace Vh(th,P1);

// Solve the Poisson Equation
Vh u,v;
func so= 1.0;
real cpu=clock();
solve Poisson(u,v,solver=LU)=int2d(th)(dx(u)*dx(v) + dy(u)*dy(v)) - int2d(th)( so*v)+on(1,u=0);

// Generates the data file for the StabFem driver
{ 
	ofstream file("Data.ff2m"); 
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Temperature field in a L-shaped region ; steady conduction with constant volume source" << endl;
    file << "Format : " << endl;
	file << "P1 T" << endl << endl ; 
	for (int j=0;j<u[].n ; j++)
		file << u[][j] << endl;
}

// Generates a second data file for the StabFem driver with data on a "slice"
{ 
	ofstream file("Heat_1Dcut.ff2m"); 
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Temperature field in a L-shaped region ; values along a transverse line" << endl;
    int NN = 101;
    file << "Format : " << endl;
	file << "real." << NN << " Xcut" << "  real." << NN << " Tcut" << endl << endl ; 
	for (int j=0;j<NN ; j++) { file << 1./(NN-1)*j << endl;} ;
	for (int j=0;j<NN ; j++) {file  << u(1./(NN-1)*j,.25) << endl;};
    file << endl;
}

// Freefem plot if required
IFMACRO(FREEFEMPLOTS,YES)
plot(th,u);
ENDIFMACRO

cout << " CPU time = " << clock()-cpu << endl;
