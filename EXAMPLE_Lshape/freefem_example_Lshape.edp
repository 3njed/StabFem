
/// Example for Freefem_to_matlab
/// Version D.F. mai 2017
/// Adapted from J. Dambrime, 2010

verbosity=0; 
border a(t=0,1){x=t;y=0;label=1;}; 
border b(t=0,0.5){x=1;y=t;label=1;}; 
border c(t=0,0.5){x=1-t;y=0.5;label=1;}; 
border d(t=0.5,1){x=0.5;y=t;label=1;}; 
border e(t=0.5,1){x=1-t;y=1;label=1;}; 
border f(t=0,1){x=0;y=1-t;label=1;}; 
//func uu= sin(y*pi)/10; func vv= cos(x*pi)/10;

int nn=4; // mesh density
mesh Th = buildmesh ( a(6*nn) + b(4*nn) + c(4*nn) +d(4*nn) + e(4*nn) + f(6*nn));
savemesh(Th,"Gilgamesh.msh"); // freefem

// old syntax : Gilgamesh.mshinfo
{
ofstream file("Gilgamesh.mshinfo"); 
file << "Mesh for a L-shaped domain" << endl;
file << "PROBLEM TYPE " << endl;
file << "SIMPLE_EXAMPLE" << endl;
file << "PARAMETERS" << endl;
file << "nn " << endl;
file << nn << endl;
}

// New syntax : Gilgamesh.ff2m
{
            ofstream file("Gilgamesh.ff2m"); 
			file << "Mesh generated by FreeFem++ ; problem type :" << endl;
			file << "2D" << endl;
			file << "Format : " << endl;
			file << "real R " << endl;
			file << 1  << endl;
}



// First sample problem : steady conduction

fespace Vh(Th,P1);
Vh u,v;
func so= 1.0;
real cpu=clock();
solve Poisson(u,v,solver=LU)=int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v)) - int2d(Th)( so*v)+on(a,b,c,d,e,f,u=0);
//plot(Th,u);


{ 
	ofstream file("Heat_steady.ff2m"); 
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Temperature field in a L-shaped region ; steady conduction with constant volume source" << endl;
    file << "Format : " << endl;
	file << "P1 U" << endl << endl ; 
	for (int j=0;j<u[].n ; j++)
		file << u[][j] << endl;
}


// Second sample problem : unsteady conduction
real omega = 50;
Vh<complex> uC,vC;
cpu=clock();
solve PoissonU(uC,vC,solver=LU)=int2d(Th)(dx(uC)*dx(vC) + dy(uC)*dy(vC)) - int2d(Th)(1i*omega*uC*vC)+on(a,b,c,d,e,f,uC=1);
//plot(Th,uC);

Vh normgradUC = sqrt(abs(dx(uC))^2+abs(dy(uC))^2);
Vh normUC = abs(uC);

{ 
	ofstream file("Heat_unsteady.ff2m"); 
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Temperature field in a L-shaped region ; steady conduction with constant volume source" << endl;
    file << "Format : " << endl;
	file << "real omega P1c Uc P1 normUc" << endl << endl ; 
    file << omega << endl ;
	for (int j=0;j<uC[].n ; j++)
		file << real(uC[][j]) << " " << imag(uC[][j]) << endl;
    file << endl;
    for (int j=0;j<uC[].n ; j++)
		file << normUC[][j]  << endl;
}






cout << " CPU time = " << clock()-cpu << endl;
