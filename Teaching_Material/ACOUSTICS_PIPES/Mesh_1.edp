// fichier anciennement nomme Mesh_Pipe_Flanged.edp

verbosity=0;
include "Macros_StabFem.edp";

real Rext=20;
real H=10;
real Rpipe = 1;


// LABELS ANCIENS :
// 1 = axis
// 2 = inlet (imposed normal velocity)
// 21 = inlet (imposed pressure)
// 22 = inlet (imposed incident wave)
// 3 = wall (normal velocity = 0)
// 5 = outlet condition (Spherical wave, Sommerfeld)
// 6 = outlet condition (plane wave)

// LABELS NOUVEAUX :
// 1 = inlet
// 2 = wall
// 3 = outlet (plane) ; 31 = outlet (spherical)
// 6 = axis
// 

border axe(t=Rext,-H){x=0;y=t;label=6;};
border fond(t=0,Rpipe){x=t;y=-H;label=1;};
border mur(t=-H,0){x=Rpipe;y=t;label=2;};
border plate(t=Rpipe,Rext){x=t;y=0;label=2;};
border sphere(t=0,pi/2){x=Rext*cos(t);y=Rext*sin(t);label=31;};


real d = 3; // densite du maillage
mesh th = buildmesh(axe(d*(H+Rext))+fond(d*Rpipe)+mur(d*H)
                    +plate(d*(Rext-Rpipe))+sphere(pi/2*Rext*d/4) );
                    
                 

// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
            file <<  "### Data generated by Freefem++ ; " << endl;
            file << "(Auxiliary file with information on initial mesh)" << endl;
            file << "problemtype AcousticAxi" << endl;
			file << "real ZERO" << endl;
			file <<  0  << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)



// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomLengthscale = 1 ; // length scale for nondimensionalization" << endl ;
            file2 << " real SFGeomVelocityscale = 1 ; // velocity scale for nondimensionalization " << endl ;
}

// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,uy,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ux[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m");
	     //SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",phi,"BaseFlow",0);
	     cout << "Base flow saved" << endl;  

		cout << "............................................" << endl;
		cout << "............................................" << endl;
		cout << "Maillage termine " << endl << "..." << endl;
//		cout << "nombre de sommets: "+Th.nv << endl;
		cout << "............................................" << endl;
		cout << "............................................" << endl;


	
